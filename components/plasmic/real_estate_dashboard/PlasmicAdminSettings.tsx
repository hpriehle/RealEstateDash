// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tkmnpDqLBPFkHbb2kiGN2p
// Component: r0dpvCRWWXBR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import DrawerBuyLeads from "../../DrawerBuyLeads"; // plasmic-import: GeIyNLTRGj3T/component
import Button from "../../Button"; // plasmic-import: otmq_-sWwXFs/component
import Card from "../../Card"; // plasmic-import: bm7RsgXbCAG4/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tkmnpDqLBPFkHbb2kiGN2p/projectcss
import sty from "./PlasmicAdminSettings.module.css"; // plasmic-import: r0dpvCRWWXBR/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: uvRS8ceWkoSL/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGq6elTBcOm4/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: xrjf5RPtuahF/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: dqZVEtD_E7L4/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: XEmZ_KE4kOJn/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Wfs0TLB_QHxx/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: jzV0VpeVYMS6/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: I6P2P1Q1BQMT/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: SMRr1e4nQg0g/icon
import Elements18Icon from "./icons/PlasmicIcon__Elements18"; // plasmic-import: A6L8iSfKCSfc/icon

createPlasmicElementProxy;

export type PlasmicAdminSettings__VariantMembers = {};
export type PlasmicAdminSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminSettings__VariantsArgs;
export const PlasmicAdminSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminSettings__ArgsType = {};
type ArgPropType = keyof PlasmicAdminSettings__ArgsType;
export const PlasmicAdminSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminSettings__OverridesType = {
  root?: Flex__<"div">;
  drawerNotifications?: Flex__<typeof DrawerBuyLeads>;
  card?: Flex__<typeof Card>;
  drawerSupport?: Flex__<typeof DrawerBuyLeads>;
  embedHtml?: Flex__<typeof Embed>;
  section?: Flex__<"section">;
  _switch?: Flex__<typeof AntdSwitch>;
  columns?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  select?: Flex__<typeof AntdSelect>;
  select3?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  select4?: Flex__<typeof AntdSelect>;
  select5?: Flex__<typeof AntdSelect>;
  select6?: Flex__<typeof AntdSelect>;
};

export interface DefaultAdminSettingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminSettings__RenderFunc(props: {
  variants: PlasmicAdminSettings__VariantsArgs;
  args: PlasmicAdminSettings__ArgsType;
  overrides: PlasmicAdminSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerNotifications.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "drawerSupport.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "emailChanges",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "_switch[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "input[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select5[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select6[].value",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getPartners: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "5a127a41-be43-4c59-9a62-af4b62f253ac",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.5a127a41-be43-4c59-9a62-af4b62f253ac.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEntity: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "a3680a46-7351-437a-87b8-1f83aaf71235",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.a3680a46-7351-437a-87b8-1f83aaf71235.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEmails: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "24286361-a970-42c4-9f87-f4a2381c377b",
        userArgs: {},
        cacheKey: `plasmic.$.24286361-a970-42c4-9f87-f4a2381c377b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ixic)}>
            <div className={classNames(projectcss.all, sty.freeBox___3UW2D)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__vyHjN
                )}
              >
                {"RE Dash"}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox__hPFz)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__fjSf7)}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jqFUl
                    )}
                  >
                    {"Dashboard"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__p5I5U)}
                  href={`/adminsettings`}
                  size={"large"}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nEm3
                    )}
                  >
                    {"Settings"}
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fy2Z)}>
                <DrawerBuyLeads
                  data-plasmic-name={"drawerNotifications"}
                  data-plasmic-override={overrides.drawerNotifications}
                  className={classNames(
                    "__wab_instance",
                    sty.drawerNotifications
                  )}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "drawerNotifications",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "drawerNotifications",
                    "open"
                  ])}
                  slot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iDi09)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        []
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Card
                            data-plasmic-name={"card"}
                            data-plasmic-override={overrides.card}
                            className={classNames("__wab_instance", sty.card)}
                            key={currentIndex}
                            title={
                              <React.Fragment>
                                <Icon7Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ciXbS
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hbs5O
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__we6P
                                    )}
                                  >
                                    {""}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___0OzgR
                                    )}
                                  >
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__yl8WS
                                      )}
                                      type={"primary"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dX3YG
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.ActionText;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Button";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdButton>
                                  </div>
                                  <Icon8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pczfj
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </React.Fragment>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__y75Rz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oesXj
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.ErrorText;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "something here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return currentItem.ErrorText.includes(
                                    "uted Lead-"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__pVpRq
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lz7Ao
                                    )}
                                  >
                                    {"Deny"}
                                  </div>
                                </AntdButton>
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.ErrorText.includes(
                                    "Issue with Partner"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___2WQ
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___19YYv
                                    )}
                                  >
                                    {"Post"}
                                  </div>
                                </AntdButton>
                              ) : null}
                            </div>
                          </Card>
                        );
                      })}
                    </Stack__>
                  }
                  trigger={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__fwW8M
                      )}
                      color={"clear"}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__xCcDq)}
                        role={"img"}
                      />

                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__oe5JR)}
                        role={"img"}
                      />
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wxzIy
                    )}
                  >
                    {"Notifications"}
                  </div>
                </DrawerBuyLeads>
                <DrawerBuyLeads
                  data-plasmic-name={"drawerSupport"}
                  data-plasmic-override={overrides.drawerSupport}
                  className={classNames("__wab_instance", sty.drawerSupport)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "drawerSupport",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "drawerSupport",
                    "open"
                  ])}
                  slot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sS7Xk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jrcPv
                        )}
                      >
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__leiG9)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__oyj5Q
                          )}
                          component={Link}
                          href={
                            "https://app.slack.com/client/T0781CQJGAX/C078418AQ3E"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Support on Slack"}
                        </PlasmicLink__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9ZGa6
                        )}
                      >
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__df1Q4)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__rgApp
                          )}
                          component={Link}
                          href={
                            "https://crmappmarketplace.notion.site/Lead-Distribution-Docs-1e1d1b76c6ef44bb923b54f595839d8d?pvs=4"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Documentation"}
                        </PlasmicLink__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iV3DR
                        )}
                      >
                        <Icon11Icon
                          className={classNames(projectcss.all, sty.svg__mnomF)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__nEgaN
                          )}
                          component={Link}
                          href={
                            "https://leaddistribution.canny.io/feature-requests"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Feature Request"}
                        </PlasmicLink__>
                      </div>
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<script src="https://static.elfsight.com/platform/platform.js" data-use-service-core defer></script>\n<div class="elfsight-app-e8972927-bc21-4f55-a0b2-f894260bda47" data-elfsight-app-lazy></div>'
                        }
                      />
                    </Stack__>
                  }
                  trigger={
                    <Button
                      className={classNames("__wab_instance", sty.button__u92J)}
                      color={"clear"}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__rvGah)}
                          role={"img"}
                        />
                      ) : null}
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rUaIz
                    )}
                  >
                    {"Support"}
                  </div>
                </DrawerBuyLeads>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__oVDu6)}>
              <div className={classNames(projectcss.all, sty.freeBox___0WXo)}>
                <div className={classNames(projectcss.all, sty.freeBox__hx8P0)}>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__i5U6X)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__bS53F
                        )}
                      >
                        {"Email Notifications"}
                      </h1>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__kQhN4
                        )}
                        disabled={(() => {
                          try {
                            return $queries.getEmails.data.length >= 3;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        onClick={async () => {
                          const $steps = {};

                          $steps["postgresCreate"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
                                    opId: "3e19f7a3-9cd8-4f5b-b604-d4793b0e9782",
                                    userArgs: {
                                      variables: [$queries.getEntity.data[0].id]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [
                                      "24286361-a970-42c4-9f87-f4a2381c377b"
                                    ],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresCreate"] != null &&
                            typeof $steps["postgresCreate"] === "object" &&
                            typeof $steps["postgresCreate"].then === "function"
                          ) {
                            $steps["postgresCreate"] = await $steps[
                              "postgresCreate"
                            ];
                          }
                        }}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1Hc9
                          )}
                        >
                          <Elements18Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lny3J
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9KEcs
                            )}
                          >
                            {"Add New Email"}
                          </div>
                        </div>
                      </AntdButton>
                    </div>
                    {(() => {
                      try {
                        return $state.emailChanges;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button___6Wlb
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateEmailChanges"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["emailChanges"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEmailChanges"] != null &&
                            typeof $steps["updateEmailChanges"] === "object" &&
                            typeof $steps["updateEmailChanges"].then ===
                              "function"
                          ) {
                            $steps["updateEmailChanges"] = await $steps[
                              "updateEmailChanges"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vzivv
                          )}
                        >
                          {"Save Changes"}
                        </div>
                      </AntdButton>
                    ) : null}
                  </section>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.getEmails.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tiTjd
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uyfpf
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              checked: generateStateValueProp($state, [
                                "_switch",
                                __plasmic_idx_0,
                                "checked"
                              ]),
                              className: classNames(
                                "__wab_instance",
                                sty._switch
                              ),
                              defaultChecked: (() => {
                                try {
                                  return currentItem.isActive;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: generateStateOnChangeProp($state, [
                                "_switch",
                                __plasmic_idx_0,
                                "checked"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "checked",
                                  plasmicStateName: "_switch[].checked"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "_switch[].checked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.isActive;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdSwitch
                                data-plasmic-name={"_switch"}
                                data-plasmic-override={overrides._switch}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__quxte
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "Email " + Number(currentIndex + 1);
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Email 1";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bvacG
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.webhook != null
                                    ? "Trigger Installed"
                                    : "Trigger Not Installed";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "iukdsjbf";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          className={classNames(projectcss.all, sty.columns)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__z0OQs
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input
                                ),
                                disabled: (() => {
                                  try {
                                    return !$state._switch[currentIndex]
                                      .checked;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input", __plasmic_idx_0, "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                  (async event => {
                                    const $steps = {};

                                    $steps["updateEmailChanges"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["emailChanges"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateEmailChanges"] != null &&
                                      typeof $steps["updateEmailChanges"] ===
                                        "object" &&
                                      typeof $steps["updateEmailChanges"]
                                        .then === "function"
                                    ) {
                                      $steps["updateEmailChanges"] =
                                        await $steps["updateEmailChanges"];
                                    }
                                  }).apply(null, eventArgs);
                                },
                                placeholder: "Email Title",
                                value: generateStateValueProp($state, [
                                  "input",
                                  __plasmic_idx_0,
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input[].value"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "input[].value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input"}
                                  data-plasmic-override={overrides.input}
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(() => {
                              try {
                                return (
                                  $state._switch[currentIndex].checked == true
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wRknB
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jvMiG
                                  )}
                                >
                                  {"Frequency"}
                                </div>
                                {(() => {
                                  const child$Props = {
                                    allowClear: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select
                                    ),
                                    defaultStylesClassName: classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    ),
                                    defaultValue: (() => {
                                      try {
                                        return currentItem.frequency;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select",
                                        __plasmic_idx_0,
                                        "value"
                                      ]).apply(null, eventArgs);
                                      (async (value, option) => {
                                        const $steps = {};

                                        $steps["updateEmailChanges"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["emailChanges"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateEmailChanges"] !=
                                            null &&
                                          typeof $steps[
                                            "updateEmailChanges"
                                          ] === "object" &&
                                          typeof $steps["updateEmailChanges"]
                                            .then === "function"
                                        ) {
                                          $steps["updateEmailChanges"] =
                                            await $steps["updateEmailChanges"];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    options: (() => {
                                      const __composite = [
                                        {
                                          value: null,
                                          label: null,
                                          type: "option"
                                        },
                                        {
                                          value: null,
                                          label: null,
                                          type: "option"
                                        }
                                      ];
                                      __composite["0"]["value"] = "7";
                                      __composite["0"]["label"] = "Weekly";
                                      __composite["1"]["value"] = "30";
                                      __composite["1"]["label"] = "Monthly";
                                      return __composite;
                                    })(),

                                    placeholder: "Select Frequency",
                                    popupScopeClassName: sty["select__popup"],
                                    value: generateStateValueProp($state, [
                                      "select",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "select[].value"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.frequency;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSelect
                                      data-plasmic-name={"select"}
                                      data-plasmic-override={overrides.select}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            ) : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__mtGle
                            )}
                          >
                            {(() => {
                              try {
                                return $state.select[currentIndex].value == "7";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dSxOr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eAVzC
                                  )}
                                >
                                  {"On This Day"}
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select3
                                    ),
                                    defaultStylesClassName: classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select3",
                                        __plasmic_idx_0,
                                        "value"
                                      ]).apply(null, eventArgs);
                                      (async (value, option) => {
                                        const $steps = {};

                                        $steps[
                                          "updateDrawerNotificationsOpen"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "drawerNotifications",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateDrawerNotificationsOpen"
                                          ] != null &&
                                          typeof $steps[
                                            "updateDrawerNotificationsOpen"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateDrawerNotificationsOpen"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateDrawerNotificationsOpen"
                                          ] = await $steps[
                                            "updateDrawerNotificationsOpen"
                                          ];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    options: (() => {
                                      try {
                                        return [
                                          {
                                            key: "Monday",
                                            value: "Monday"
                                          },
                                          {
                                            key: "Tuesday",
                                            value: "Tuesday"
                                          },
                                          {
                                            key: "Wednesday",
                                            value: "Wednesday"
                                          },
                                          {
                                            key: "Thursday",
                                            value: "Thursday"
                                          },
                                          {
                                            key: "Friday",
                                            value: "Friday"
                                          },
                                          {
                                            key: "Saturday",
                                            value: "Saturday"
                                          },
                                          {
                                            key: "Sunday",
                                            value: "Sunday"
                                          }
                                        ];
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1",
                                              type: "option"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2",
                                              type: "option"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    placeholder: "Select Day",
                                    popupScopeClassName: sty["select3__popup"],
                                    value: generateStateValueProp($state, [
                                      "select3",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "select3[].value"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select3[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSelect
                                      data-plasmic-name={"select3"}
                                      data-plasmic-override={overrides.select3}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $state.select[currentIndex].value == 30;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__r0Hov
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6Uytq
                                  )}
                                >
                                  {"On This Date"}
                                </div>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select2
                                    ),
                                    defaultStylesClassName: classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    ),
                                    defaultValue: (() => {
                                      try {
                                        return currentItem.date_of_month;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select2",
                                        __plasmic_idx_0,
                                        "value"
                                      ]).apply(null, eventArgs);
                                      (async (value, option) => {
                                        const $steps = {};

                                        $steps["updateEmailChanges"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["emailChanges"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateEmailChanges"] !=
                                            null &&
                                          typeof $steps[
                                            "updateEmailChanges"
                                          ] === "object" &&
                                          typeof $steps["updateEmailChanges"]
                                            .then === "function"
                                        ) {
                                          $steps["updateEmailChanges"] =
                                            await $steps["updateEmailChanges"];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    options: (() => {
                                      try {
                                        return [
                                          {
                                            key: 1,
                                            value: 1
                                          },
                                          {
                                            key: 2,
                                            value: 2
                                          },
                                          {
                                            key: 3,
                                            value: 3
                                          },
                                          {
                                            key: 4,
                                            value: 4
                                          },
                                          {
                                            key: 5,
                                            value: 5
                                          },
                                          {
                                            key: 6,
                                            value: 6
                                          },
                                          {
                                            key: 7,
                                            value: 7
                                          },
                                          {
                                            key: 8,
                                            value: 8
                                          },
                                          {
                                            key: 9,
                                            value: 9
                                          },
                                          {
                                            key: 10,
                                            value: 10
                                          },
                                          {
                                            key: 11,
                                            value: 11
                                          },
                                          {
                                            key: 12,
                                            value: 12
                                          },
                                          {
                                            key: 13,
                                            value: 13
                                          },
                                          {
                                            key: 14,
                                            value: 14
                                          },
                                          {
                                            key: 15,
                                            value: 15
                                          },
                                          {
                                            key: 16,
                                            value: 16
                                          },
                                          {
                                            key: 17,
                                            value: 17
                                          },
                                          {
                                            key: 18,
                                            value: 18
                                          },
                                          {
                                            key: 19,
                                            value: 19
                                          },
                                          {
                                            key: 20,
                                            value: 20
                                          },
                                          {
                                            key: 21,
                                            value: 21
                                          },
                                          {
                                            key: 22,
                                            value: 22
                                          },
                                          {
                                            key: 23,
                                            value: 23
                                          },
                                          {
                                            key: 24,
                                            value: 24
                                          },
                                          {
                                            key: 25,
                                            value: 25
                                          },
                                          {
                                            key: 26,
                                            value: 26
                                          },
                                          {
                                            key: 27,
                                            value: 27
                                          },
                                          {
                                            key: 28,
                                            value: 28
                                          },
                                          {
                                            key: 29,
                                            value: 29
                                          },
                                          {
                                            key: 30,
                                            value: 30
                                          }
                                        ];
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1",
                                              type: "option"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2",
                                              type: "option"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    placeholder: "Select Date",
                                    popupScopeClassName: sty["select2__popup"],
                                    value: generateStateValueProp($state, [
                                      "select2",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "select2[].value"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select2[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return currentItem.date_of_month;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSelect
                                      data-plasmic-name={"select2"}
                                      data-plasmic-override={overrides.select2}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  $state.select[currentIndex].value != undefined
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kzSi5
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eYHhO
                                  )}
                                >
                                  {"At This Time"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yg2Z2
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.select4
                                      ),
                                      defaultStylesClassName: classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      ),
                                      defaultValue: (() => {
                                        try {
                                          return (() => {
                                            const hour = (h =>
                                              h > 12 ? h - 12 : h)(
                                              parseInt(
                                                currentItem.time.split(":")[0]
                                              )
                                            );
                                            return hour;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select4",
                                          __plasmic_idx_0,
                                          "value"
                                        ]).apply(null, eventArgs);
                                        (async (value, option) => {
                                          const $steps = {};

                                          $steps["updateEmailChanges"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "emailChanges"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateEmailChanges"] !=
                                              null &&
                                            typeof $steps[
                                              "updateEmailChanges"
                                            ] === "object" &&
                                            typeof $steps["updateEmailChanges"]
                                              .then === "function"
                                          ) {
                                            $steps["updateEmailChanges"] =
                                              await $steps[
                                                "updateEmailChanges"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      options: (() => {
                                        try {
                                          return [
                                            {
                                              key: 1,
                                              value: 1
                                            },
                                            {
                                              key: 2,
                                              value: 2
                                            },
                                            {
                                              key: 3,
                                              value: 3
                                            },
                                            {
                                              key: 4,
                                              value: 4
                                            },
                                            {
                                              key: 5,
                                              value: 5
                                            },
                                            {
                                              key: 6,
                                              value: 6
                                            },
                                            {
                                              key: 7,
                                              value: 7
                                            },
                                            {
                                              key: 8,
                                              value: 8
                                            },
                                            {
                                              key: 9,
                                              value: 9
                                            },
                                            {
                                              key: 10,
                                              value: 10
                                            },
                                            {
                                              key: 11,
                                              value: 11
                                            },
                                            {
                                              key: 12,
                                              value: 12
                                            }
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [
                                              {
                                                value: "option1",
                                                label: "Option 1",
                                                type: "option"
                                              },
                                              {
                                                value: "option2",
                                                label: "Option 2",
                                                type: "option"
                                              }
                                            ];
                                          }
                                          throw e;
                                        }
                                      })(),
                                      placeholder: "Hour",
                                      popupScopeClassName:
                                        sty["select4__popup"],
                                      value: generateStateValueProp($state, [
                                        "select4",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "select4[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "select4[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (() => {
                                                  const hour = (h =>
                                                    h > 12 ? h - 12 : h)(
                                                    parseInt(
                                                      currentItem.time.split(
                                                        ":"
                                                      )[0]
                                                    )
                                                  );
                                                  return hour;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdSelect
                                        data-plasmic-name={"select4"}
                                        data-plasmic-override={
                                          overrides.select4
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.select5
                                      ),
                                      defaultStylesClassName: classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      ),
                                      defaultValue: (() => {
                                        try {
                                          return (() => {
                                            const minute =
                                              currentItem.time.split(":")[1];
                                            return minute;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select5",
                                          __plasmic_idx_0,
                                          "value"
                                        ]).apply(null, eventArgs);
                                        (async (value, option) => {
                                          const $steps = {};

                                          $steps["updateEmailChanges"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "emailChanges"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateEmailChanges"] !=
                                              null &&
                                            typeof $steps[
                                              "updateEmailChanges"
                                            ] === "object" &&
                                            typeof $steps["updateEmailChanges"]
                                              .then === "function"
                                          ) {
                                            $steps["updateEmailChanges"] =
                                              await $steps[
                                                "updateEmailChanges"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      options: (() => {
                                        try {
                                          return [
                                            {
                                              key: "00",
                                              value: "00"
                                            },
                                            {
                                              key: "01",
                                              value: "01"
                                            },
                                            {
                                              key: "02",
                                              value: "02"
                                            },
                                            {
                                              key: "03",
                                              value: "03"
                                            },
                                            {
                                              key: "04",
                                              value: "04"
                                            },
                                            {
                                              key: "05",
                                              value: "05"
                                            },
                                            {
                                              key: "06",
                                              value: "06"
                                            },
                                            {
                                              key: "07",
                                              value: "07"
                                            },
                                            {
                                              key: "08",
                                              value: "08"
                                            },
                                            {
                                              key: "09",
                                              value: "09"
                                            },
                                            {
                                              key: "10",
                                              value: "10"
                                            },
                                            {
                                              key: "11",
                                              value: "11"
                                            },
                                            {
                                              key: "12",
                                              value: "12"
                                            },
                                            {
                                              key: "13",
                                              value: "13"
                                            },
                                            {
                                              key: "14",
                                              value: "14"
                                            },
                                            {
                                              key: "15",
                                              value: "15"
                                            },
                                            {
                                              key: "16",
                                              value: "16"
                                            },
                                            {
                                              key: "17",
                                              value: "17"
                                            },
                                            {
                                              key: "18",
                                              value: "18"
                                            },
                                            {
                                              key: "19",
                                              value: "19"
                                            },
                                            {
                                              key: "20",
                                              value: "20"
                                            },
                                            {
                                              key: "21",
                                              value: "21"
                                            },
                                            {
                                              key: "22",
                                              value: "22"
                                            },
                                            {
                                              key: "23",
                                              value: "23"
                                            },
                                            {
                                              key: "24",
                                              value: "24"
                                            },
                                            {
                                              key: "25",
                                              value: "25"
                                            },
                                            {
                                              key: "26",
                                              value: "26"
                                            },
                                            {
                                              key: "27",
                                              value: "27"
                                            },
                                            {
                                              key: "28",
                                              value: "28"
                                            },
                                            {
                                              key: "29",
                                              value: "29"
                                            },
                                            {
                                              key: "30",
                                              value: "30"
                                            },
                                            {
                                              key: "31",
                                              value: "31"
                                            },
                                            {
                                              key: "32",
                                              value: "32"
                                            },
                                            {
                                              key: "33",
                                              value: "33"
                                            },
                                            {
                                              key: "34",
                                              value: "34"
                                            },
                                            {
                                              key: "35",
                                              value: "35"
                                            },
                                            {
                                              key: "36",
                                              value: "36"
                                            },
                                            {
                                              key: "37",
                                              value: "37"
                                            },
                                            {
                                              key: "38",
                                              value: "38"
                                            },
                                            {
                                              key: "39",
                                              value: "39"
                                            },
                                            {
                                              key: "40",
                                              value: "40"
                                            },
                                            {
                                              key: "41",
                                              value: "41"
                                            },
                                            {
                                              key: "42",
                                              value: "42"
                                            },
                                            {
                                              key: "43",
                                              value: "43"
                                            },
                                            {
                                              key: "44",
                                              value: "44"
                                            },
                                            {
                                              key: "45",
                                              value: "45"
                                            },
                                            {
                                              key: "46",
                                              value: "46"
                                            },
                                            {
                                              key: "47",
                                              value: "47"
                                            },
                                            {
                                              key: "48",
                                              value: "48"
                                            },
                                            {
                                              key: "49",
                                              value: "49"
                                            },
                                            {
                                              key: "50",
                                              value: "50"
                                            },
                                            {
                                              key: "51",
                                              value: "51"
                                            },
                                            {
                                              key: "52",
                                              value: "52"
                                            },
                                            {
                                              key: "53",
                                              value: "53"
                                            },
                                            {
                                              key: "54",
                                              value: "54"
                                            },
                                            {
                                              key: "55",
                                              value: "55"
                                            },
                                            {
                                              key: "56",
                                              value: "56"
                                            },
                                            {
                                              key: "57",
                                              value: "57"
                                            },
                                            {
                                              key: "58",
                                              value: "58"
                                            },
                                            {
                                              key: "59",
                                              value: "59"
                                            }
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [
                                              {
                                                value: "option1",
                                                label: "Option 1",
                                                type: "option"
                                              },
                                              {
                                                value: "option2",
                                                label: "Option 2",
                                                type: "option"
                                              }
                                            ];
                                          }
                                          throw e;
                                        }
                                      })(),
                                      placeholder: (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__m1UIg
                                          )}
                                        >
                                          {"Min"}
                                        </div>
                                      ),
                                      popupScopeClassName:
                                        sty["select5__popup"],
                                      value: generateStateValueProp($state, [
                                        "select5",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "select5[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "select5[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (() => {
                                                  const minute =
                                                    currentItem.time.split(
                                                      ":"
                                                    )[1];
                                                  return minute;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdSelect
                                        data-plasmic-name={"select5"}
                                        data-plasmic-override={
                                          overrides.select5
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.select6
                                      ),
                                      defaultStylesClassName: classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        projectcss.plasmic_tokens,
                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                      ),
                                      defaultValue: (() => {
                                        try {
                                          return (() => {
                                            const period =
                                              parseInt(
                                                currentItem.time.split(":")[0]
                                              ) >= 12
                                                ? "PM"
                                                : "AM";
                                            return period;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select6",
                                          __plasmic_idx_0,
                                          "value"
                                        ]).apply(null, eventArgs);
                                        (async (value, option) => {
                                          const $steps = {};

                                          $steps["updateEmailChanges"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "emailChanges"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateEmailChanges"] !=
                                              null &&
                                            typeof $steps[
                                              "updateEmailChanges"
                                            ] === "object" &&
                                            typeof $steps["updateEmailChanges"]
                                              .then === "function"
                                          ) {
                                            $steps["updateEmailChanges"] =
                                              await $steps[
                                                "updateEmailChanges"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      options: (() => {
                                        try {
                                          return [
                                            {
                                              key: "AM",
                                              value: "AM"
                                            },
                                            {
                                              key: "PM",
                                              value: "PM"
                                            }
                                          ];
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [
                                              {
                                                value: "option1",
                                                label: "Option 1",
                                                type: "option"
                                              },
                                              {
                                                value: "option2",
                                                label: "Option 2",
                                                type: "option"
                                              }
                                            ];
                                          }
                                          throw e;
                                        }
                                      })(),
                                      placeholder: "Am/Pm",
                                      popupScopeClassName:
                                        sty["select6__popup"],
                                      value: generateStateValueProp($state, [
                                        "select6",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "select6[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "select6[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (() => {
                                                  const period =
                                                    parseInt(
                                                      currentItem.time.split(
                                                        ":"
                                                      )[0]
                                                    ) >= 12
                                                      ? "PM"
                                                      : "AM";
                                                  return period;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdSelect
                                        data-plasmic-name={"select6"}
                                        data-plasmic-override={
                                          overrides.select6
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </div>
                              </div>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___90Vlx)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "drawerNotifications",
    "card",
    "drawerSupport",
    "embedHtml",
    "section",
    "_switch",
    "columns",
    "input",
    "select",
    "select3",
    "select2",
    "select4",
    "select5",
    "select6"
  ],
  drawerNotifications: ["drawerNotifications", "card"],
  card: ["card"],
  drawerSupport: ["drawerSupport", "embedHtml"],
  embedHtml: ["embedHtml"],
  section: ["section"],
  _switch: ["_switch"],
  columns: [
    "columns",
    "input",
    "select",
    "select3",
    "select2",
    "select4",
    "select5",
    "select6"
  ],
  input: ["input"],
  select: ["select"],
  select3: ["select3"],
  select2: ["select2"],
  select4: ["select4"],
  select5: ["select5"],
  select6: ["select6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  drawerNotifications: typeof DrawerBuyLeads;
  card: typeof Card;
  drawerSupport: typeof DrawerBuyLeads;
  embedHtml: typeof Embed;
  section: "section";
  _switch: typeof AntdSwitch;
  columns: "div";
  input: typeof AntdInput;
  select: typeof AntdSelect;
  select3: typeof AntdSelect;
  select2: typeof AntdSelect;
  select4: typeof AntdSelect;
  select5: typeof AntdSelect;
  select6: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminSettings__VariantsArgs;
    args?: PlasmicAdminSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminSettings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminSettings__ArgProps,
          internalVariantPropNames: PlasmicAdminSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminSettings";
  } else {
    func.displayName = `PlasmicAdminSettings.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "tkmnpDqLBPFkHbb2kiGN2p"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAdminSettings = Object.assign(
  // Top-level PlasmicAdminSettings renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    drawerNotifications: makeNodeComponent("drawerNotifications"),
    card: makeNodeComponent("card"),
    drawerSupport: makeNodeComponent("drawerSupport"),
    embedHtml: makeNodeComponent("embedHtml"),
    section: makeNodeComponent("section"),
    _switch: makeNodeComponent("_switch"),
    columns: makeNodeComponent("columns"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    select3: makeNodeComponent("select3"),
    select2: makeNodeComponent("select2"),
    select4: makeNodeComponent("select4"),
    select5: makeNodeComponent("select5"),
    select6: makeNodeComponent("select6"),

    // Metadata about props expected for PlasmicAdminSettings
    internalVariantProps: PlasmicAdminSettings__VariantProps,
    internalArgProps: PlasmicAdminSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminSettings;
/* prettier-ignore-end */
