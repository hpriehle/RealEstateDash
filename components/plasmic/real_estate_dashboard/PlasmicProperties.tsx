// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tkmnpDqLBPFkHbb2kiGN2p
// Component: 7y3Gqqg0TL6r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MapComponent from "../../MapComponent"; // plasmic-import: aSaTcETCxkUE/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_90LdDEgHyil } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 90Ld_DEgHYIL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tkmnpDqLBPFkHbb2kiGN2p/projectcss
import sty from "./PlasmicProperties.module.css"; // plasmic-import: 7y3Gqqg0TL6r/css

import Idea01Icon from "./icons/PlasmicIcon__Idea01"; // plasmic-import: IawKc8dKqxVV/icon
import Elements12Icon from "./icons/PlasmicIcon__Elements12"; // plasmic-import: W_KL-AbGlRhB/icon
import Elements1Icon from "./icons/PlasmicIcon__Elements1"; // plasmic-import: mpbhpBKgaerz/icon
import Elements11Icon from "./icons/PlasmicIcon__Elements11"; // plasmic-import: bpM_1uJebadQ/icon
import Elements13Icon from "./icons/PlasmicIcon__Elements13"; // plasmic-import: pZnhK5qXhOCt/icon
import Elements41Icon from "./icons/PlasmicIcon__Elements41"; // plasmic-import: rsP4mGz6iamP/icon
import Elements40Icon from "./icons/PlasmicIcon__Elements40"; // plasmic-import: nuVz3DPGUpvp/icon
import Elements9Icon from "./icons/PlasmicIcon__Elements9"; // plasmic-import: zpmeAeUqH5SS/icon
import Elements4Icon from "./icons/PlasmicIcon__Elements4"; // plasmic-import: 1PORKmCFcDdF/icon
import Elements5Icon from "./icons/PlasmicIcon__Elements5"; // plasmic-import: 70bYqwblWDtA/icon
import Elements7Icon from "./icons/PlasmicIcon__Elements7"; // plasmic-import: 71SnS22G1cYq/icon
import Elements6Icon from "./icons/PlasmicIcon__Elements6"; // plasmic-import: Ghatf7-g0aLh/icon
import Elements8Icon from "./icons/PlasmicIcon__Elements8"; // plasmic-import: HsHyrudg9ntD/icon
import Elements19Icon from "./icons/PlasmicIcon__Elements19"; // plasmic-import: uCDZdALb3qxF/icon
import Elements20Icon from "./icons/PlasmicIcon__Elements20"; // plasmic-import: F-UG6e1YPJgx/icon
import Elements21Icon from "./icons/PlasmicIcon__Elements21"; // plasmic-import: n9F7yCLi05dg/icon
import CallIcon from "./icons/PlasmicIcon__Call"; // plasmic-import: tdKAOUq2yyAw/icon
import Elements24Icon from "./icons/PlasmicIcon__Elements24"; // plasmic-import: LFyfrqsBIRKg/icon
import Elements33Icon from "./icons/PlasmicIcon__Elements33"; // plasmic-import: HfSMhfZ6S6Tr/icon
import Elements34Icon from "./icons/PlasmicIcon__Elements34"; // plasmic-import: xBJe9hrm7W5M/icon
import Elements35Icon from "./icons/PlasmicIcon__Elements35"; // plasmic-import: _nFiJBwAFGxu/icon
import Elements25Icon from "./icons/PlasmicIcon__Elements25"; // plasmic-import: JRGt3b59rTTh/icon
import Elements29Icon from "./icons/PlasmicIcon__Elements29"; // plasmic-import: chUxViH_7gTK/icon
import Elements36Icon from "./icons/PlasmicIcon__Elements36"; // plasmic-import: 4twW3mkx4lys/icon
import Elements37Icon from "./icons/PlasmicIcon__Elements37"; // plasmic-import: 5FKEt9CBcbVz/icon
import Elements38Icon from "./icons/PlasmicIcon__Elements38"; // plasmic-import: FMe_Sq7EmQPI/icon
import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: wOD5ZcJ3yLuQ/icon
import Elements44Icon from "./icons/PlasmicIcon__Elements44"; // plasmic-import: wZxCSw428OVh/icon
import Elements45Icon from "./icons/PlasmicIcon__Elements45"; // plasmic-import: UBJo-u6n4j-Q/icon
import Elements46Icon from "./icons/PlasmicIcon__Elements46"; // plasmic-import: cJoe5io_YSdi/icon
import Elements43Icon from "./icons/PlasmicIcon__Elements43"; // plasmic-import: ohxH7xg7PIDw/icon

createPlasmicElementProxy;

export type PlasmicProperties__VariantMembers = {};
export type PlasmicProperties__VariantsArgs = {};
type VariantPropType = keyof PlasmicProperties__VariantsArgs;
export const PlasmicProperties__VariantProps = new Array<VariantPropType>();

export type PlasmicProperties__ArgsType = {};
type ArgPropType = keyof PlasmicProperties__ArgsType;
export const PlasmicProperties__ArgProps = new Array<ArgPropType>();

export type PlasmicProperties__OverridesType = {
  root?: Flex__<"div">;
  topLeft?: Flex__<"div">;
  addressBlock?: Flex__<"div">;
  frame5?: Flex__<"div">;
  location06?: Flex__<"div">;
  mapComponent?: Flex__<typeof MapComponent>;
  countStatsBlock?: Flex__<"div">;
  select?: Flex__<typeof AntdSelect>;
  frame60?: Flex__<"div">;
  frame61?: Flex__<"div">;
  hotPrice?: Flex__<"div">;
  frame62?: Flex__<"div">;
  frame49?: Flex__<"div">;
  frame40?: Flex__<"div">;
  chartMedium?: Flex__<"div">;
  frame50?: Flex__<"div">;
  frame54?: Flex__<"div">;
  frame55?: Flex__<"div">;
  chartIncrease?: Flex__<"div">;
  frame427318657?: Flex__<"div">;
  frame56?: Flex__<"div">;
  frame66?: Flex__<"div">;
  frame67?: Flex__<"div">;
  money03?: Flex__<"div">;
  frame427318659?: Flex__<"div">;
  frame68?: Flex__<"div">;
  select2?: Flex__<typeof AntdSelect>;
  frame63?: Flex__<"div">;
  frame64?: Flex__<"div">;
  hotPrice2?: Flex__<"div">;
  frame65?: Flex__<"div">;
  frame51?: Flex__<"div">;
  frame52?: Flex__<"div">;
  chartMedium2?: Flex__<"div">;
  frame53?: Flex__<"div">;
  frame57?: Flex__<"div">;
  frame58?: Flex__<"div">;
  chartIncrease2?: Flex__<"div">;
  frame427318658?: Flex__<"div">;
  frame59?: Flex__<"div">;
  frame69?: Flex__<"div">;
  frame70?: Flex__<"div">;
  money032?: Flex__<"div">;
  frame427318664?: Flex__<"div">;
  frame71?: Flex__<"div">;
  topRight?: Flex__<"div">;
  homeInfoBlock?: Flex__<"div">;
  frame38?: Flex__<"div">;
  frame36?: Flex__<"div">;
  building04?: Flex__<"div">;
  frame31?: Flex__<"div">;
  frame33?: Flex__<"div">;
  frame32?: Flex__<"div">;
  bed?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame45?: Flex__<"div">;
  frame37?: Flex__<"div">;
  bathtub02?: Flex__<"div">;
  frame26?: Flex__<"div">;
  frame44?: Flex__<"div">;
  frame41?: Flex__<"div">;
  squareSquare?: Flex__<"div">;
  frame30?: Flex__<"div">;
  frame43?: Flex__<"div">;
  frame42?: Flex__<"div">;
  building03?: Flex__<"div">;
  frame29?: Flex__<"div">;
  frame35?: Flex__<"div">;
  frame34?: Flex__<"div">;
  square?: Flex__<"div">;
  frame87?: Flex__<"div">;
  homeEstimateBlock?: Flex__<"div">;
  agentBlock?: Flex__<"div">;
  frame427318684?: Flex__<"div">;
  frame18?: Flex__<"div">;
  calendar03?: Flex__<"div">;
  frame20?: Flex__<"div">;
  mail02?: Flex__<"div">;
  frame19?: Flex__<"div">;
  call?: Flex__<"div">;
  homeTrendBlock?: Flex__<"div">;
  homesSoldInArea?: Flex__<"div">;
  frame427318713?: Flex__<"div">;
  frame427318710?: Flex__<"div">;
  frame427318691?: Flex__<"div">;
  frame6?: Flex__<"div">;
  frame427318731?: Flex__<"div">;
  frame427318737?: Flex__<"div">;
  frame427318720?: Flex__<"div">;
  frame46?: Flex__<"div">;
  bed2?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame427318721?: Flex__<"div">;
  frame48?: Flex__<"div">;
  bathtub022?: Flex__<"div">;
  frame72?: Flex__<"div">;
  frame427318722?: Flex__<"div">;
  frame77?: Flex__<"div">;
  building032?: Flex__<"div">;
  frame27?: Flex__<"div">;
  frame427318738?: Flex__<"div">;
  frame427318723?: Flex__<"div">;
  frame78?: Flex__<"div">;
  square2?: Flex__<"div">;
  frame79?: Flex__<"div">;
  frame427318724?: Flex__<"div">;
  frame80?: Flex__<"div">;
  squareSquare2?: Flex__<"div">;
  frame81?: Flex__<"div">;
  frame427318725?: Flex__<"div">;
  frame39?: Flex__<"div">;
  building042?: Flex__<"div">;
  frame82?: Flex__<"div">;
  frame427318739?: Flex__<"div">;
  frame427318726?: Flex__<"div">;
  frame83?: Flex__<"div">;
  school?: Flex__<"div">;
  frame84?: Flex__<"div">;
  frame427318740?: Flex__<"div">;
  frame85?: Flex__<"div">;
  house04?: Flex__<"div">;
  frame86?: Flex__<"div">;
  frame427318716?: Flex__<"div">;
  propertyCard4?: Flex__<"div">;
  frame427318655?: Flex__<"div">;
  frame427318735?: Flex__<"div">;
  _8881SAspenViewDr3?: Flex__<"div">;
  frame427318736?: Flex__<"div">;
  actionsToImproveHome?: Flex__<"div">;
  renovateYourKitchen2?: Flex__<"div">;
  frame90?: Flex__<"div">;
  money034?: Flex__<"div">;
  frame427318789?: Flex__<"div">;
  paying200002?: Flex__<"div">;
  couldIncreaseYourHomeValueBy400002?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  cashOffer?: Flex__<"div">;
  frame427318775?: Flex__<"div">;
  frame427318774?: Flex__<"div">;
  frame427318773?: Flex__<"div">;
  money038?: Flex__<"div">;
  enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2?: Flex__<"div">;
  frame2?: Flex__<"div">;
  arrowDown?: Flex__<"div">;
  vuesaxboldarrowDown?: Flex__<"div">;
  frame16?: Flex__<"div">;
  frame427318811?: Flex__<"div">;
  frame427318812?: Flex__<"div">;
  call2?: Flex__<"div">;
  frame427318813?: Flex__<"div">;
  mail022?: Flex__<"div">;
  frame427318814?: Flex__<"div">;
  global?: Flex__<"div">;
  testimonials7?: Flex__<"div">;
  frame427318805?: Flex__<"div">;
  frame427318806?: Flex__<"div">;
  star?: Flex__<"div">;
  star2?: Flex__<"div">;
  star3?: Flex__<"div">;
  star4?: Flex__<"div">;
  star5?: Flex__<"div">;
  ashleyAllenProvoUt?: Flex__<"div">;
  testimonials2?: Flex__<"div">;
  frame427318807?: Flex__<"div">;
  frame427318808?: Flex__<"div">;
  star6?: Flex__<"div">;
  star7?: Flex__<"div">;
  star8?: Flex__<"div">;
  star9?: Flex__<"div">;
  star10?: Flex__<"div">;
  jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple?: Flex__<"div">;
  ashleyAllenProvoUt2?: Flex__<"div">;
  htmlVideo?: Flex__<typeof Video>;
  iframe?: Flex__<typeof Iframe>;
};

export interface DefaultPropertiesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProperties__RenderFunc(props: {
  variants: PlasmicProperties__VariantsArgs;
  args: PlasmicProperties__ArgsType;
  overrides: PlasmicProperties__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getProperty.data[0].county || "Salt Lake";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "SaltLake";
              }
              throw e;
            }
          })()
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const data = $queries.getCountyData.data;
                function mapToUniqueKeyValuePairs(data) {
                  const uniqueCounties = [
                    ...new Set(data.map(item => item.CountyOrParish))
                  ].filter(county => county);
                  return uniqueCounties.map(county => ({
                    key: county,
                    value: county
                  }));
                }
                const uniqueCountyKeyValuePairs =
                  mapToUniqueKeyValuePairs(data);
                return uniqueCountyKeyValuePairs.find(
                  entry => entry.key != $queries.getProperty.data[0].county
                ).value;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "utah";
              }
              throw e;
            }
          })()
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "homeSoldInfoOn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getProperty: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "841bf782-bb18-4157-b5dd-23ef89b469b9",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.841bf782-bb18-4157-b5dd-23ef89b469b9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCountyData: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "80edcbbe-3f5c-4313-8ae8-151f0fa16c3b",
        userArgs: {},
        cacheKey: `plasmic.$.80edcbbe-3f5c-4313-8ae8-151f0fa16c3b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getValuations: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "66abac06-bce2-41f2-bcf8-ba873bd50d0c",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.66abac06-bce2-41f2-bcf8-ba873bd50d0c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getComps: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "cf4a3a4d-4114-44ba-873e-64b55e05b9dd",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.cf4a3a4d-4114-44ba-873e-64b55e05b9dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_90LdDEgHyil()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zGdVs)} />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__sRe2N)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"topLeft"}
              data-plasmic-override={overrides.topLeft}
              hasGap={true}
              className={classNames(projectcss.all, sty.topLeft)}
            >
              <div
                data-plasmic-name={"addressBlock"}
                data-plasmic-override={overrides.addressBlock}
                className={classNames(projectcss.all, sty.addressBlock)}
              >
                <div className={classNames(projectcss.all, sty.columns__sihiI)}>
                  <div className={classNames(projectcss.all, sty.column__qnYp)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xylmr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l4W8
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kdIv)}
                          displayHeight={"115px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"189px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $queries.getProperty.data[0].streetPhoto;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/real_estate_dashboard/images/rectangle66.png",
                                  fullWidth: 768,
                                  fullHeight: 576,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tIzLr
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.getProperty.data[0].addressFull;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Address";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame5"}
                        data-plasmic-override={overrides.frame5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame5)}
                      >
                        <div
                          data-plasmic-name={"location06"}
                          data-plasmic-override={overrides.location06}
                          className={classNames(projectcss.all, sty.location06)}
                        />
                      </Stack__>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__qjh4R)}
                  >
                    <MapComponent
                      data-plasmic-name={"mapComponent"}
                      data-plasmic-override={overrides.mapComponent}
                      className={classNames("__wab_instance", sty.mapComponent)}
                      location={{ lat: 40.712776, lng: -74.005974 }}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"countStatsBlock"}
                data-plasmic-override={overrides.countStatsBlock}
                className={classNames(projectcss.all, sty.countStatsBlock)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fez10)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xqbDa
                    )}
                  >
                    {"Compare County Stats"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wRnwU)}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__tDvXo
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w1S0T
                        )}
                      >
                        <Idea01Icon
                          className={classNames(projectcss.all, sty.svg__zyy2N)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Gvkl
                          )}
                        >
                          {"Insights"}
                        </div>
                      </div>
                    </AntdButton>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.columns___9TbiA)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column___4DbUg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yiLfz)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dmz3A
                        )}
                      >
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          defaultValue={(() => {
                            try {
                              return (
                                $queries.getProperty.data[0].county ||
                                "Salt Lake"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "SaltLake";
                              }
                              throw e;
                            }
                          })()}
                          onChange={generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ])}
                          options={(() => {
                            try {
                              return (() => {
                                const data = $queries.getCountyData.data;
                                function mapToUniqueKeyValuePairs(data) {
                                  const uniqueCounties = [
                                    ...new Set(
                                      data.map(item => item.CountyOrParish)
                                    )
                                  ].filter(county => county);
                                  return uniqueCounties.map(county => ({
                                    key: county,
                                    value: county
                                  }));
                                }
                                const uniqueCountyKeyValuePairs =
                                  mapToUniqueKeyValuePairs(data);
                                return uniqueCountyKeyValuePairs;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  const __composite = [
                                    {
                                      value: null,
                                      label: null,
                                      type: "option"
                                    },
                                    { value: null, label: null, type: "option" }
                                  ];
                                  __composite["0"]["value"] = "SaltLake";
                                  __composite["0"]["label"] = "Salt Lake City";
                                  __composite["1"]["value"] = "utah";
                                  __composite["1"]["label"] = "Utah County";
                                  return __composite;
                                })();
                              }
                              throw e;
                            }
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9AEKs
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame60"}
                          data-plasmic-override={overrides.frame60}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame60)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame61"}
                            data-plasmic-override={overrides.frame61}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame61)}
                          >
                            <div
                              data-plasmic-name={"hotPrice"}
                              data-plasmic-override={overrides.hotPrice}
                              className={classNames(
                                projectcss.all,
                                sty.hotPrice
                              )}
                            >
                              <Elements12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___3UK5X
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame62"}
                            data-plasmic-override={overrides.frame62}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame62)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rgPu
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const filteredData =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select.value
                                        );
                                      const maxYearEntry = filteredData.reduce(
                                        (max, entry) =>
                                          parseInt(entry.CloseYear) >
                                          parseInt(max.CloseYear)
                                            ? entry
                                            : max
                                      );
                                      const maxQuarterEntry = filteredData
                                        .filter(
                                          entry =>
                                            entry.CloseYear ===
                                            maxYearEntry.CloseYear
                                        )
                                        .reduce((max, entry) =>
                                          parseInt(entry.CloseQuarter) >
                                          parseInt(max.CloseQuarter)
                                            ? entry
                                            : max
                                        );
                                      return (
                                        "$" +
                                        Number(maxQuarterEntry.MdnSold$)
                                          .toString()
                                          .replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "$599K";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iFuUw
                              )}
                            >
                              {"Median Home value"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame49"}
                          data-plasmic-override={overrides.frame49}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame49)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame40"}
                            data-plasmic-override={overrides.frame40}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame40)}
                          >
                            <div
                              data-plasmic-name={"chartMedium"}
                              data-plasmic-override={overrides.chartMedium}
                              className={classNames(
                                projectcss.all,
                                sty.chartMedium
                              )}
                            >
                              <Elements1Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tpoc6
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame50"}
                            data-plasmic-override={overrides.frame50}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame50)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aAoH
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const filteredData =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select.value
                                        );
                                      const maxYearEntry = filteredData.reduce(
                                        (max, entry) =>
                                          parseInt(entry.CloseYear) >
                                          parseInt(max.CloseYear)
                                            ? entry
                                            : max
                                      );
                                      const maxQuarterEntry = filteredData
                                        .filter(
                                          entry =>
                                            entry.CloseYear ===
                                            maxYearEntry.CloseYear
                                        )
                                        .reduce((max, entry) =>
                                          parseInt(entry.CloseQuarter) >
                                          parseInt(max.CloseQuarter)
                                            ? entry
                                            : max
                                        );
                                      return (
                                        Number(maxQuarterEntry.MdnDOM) + " Days"
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "$599K";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__whb2G
                              )}
                            >
                              {"Median days on market"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame54"}
                          data-plasmic-override={overrides.frame54}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame54)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame55"}
                            data-plasmic-override={overrides.frame55}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame55)}
                          >
                            <div
                              data-plasmic-name={"chartIncrease"}
                              data-plasmic-override={overrides.chartIncrease}
                              className={classNames(
                                projectcss.all,
                                sty.chartIncrease
                              )}
                            >
                              <Elements11Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rq3V
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame427318657"}
                            data-plasmic-override={overrides.frame427318657}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame427318657
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame56"}
                              data-plasmic-override={overrides.frame56}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame56
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lceA7
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const filteredData =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxYearEntry =
                                          filteredData.reduce((max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                          );
                                        const maxQuarterEntry = filteredData
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                        return (
                                          Number(
                                            maxQuarterEntry.MdnSold$_Change
                                          ).toFixed(2) + "%"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "$599K";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__thPk
                                )}
                              >
                                {"Sold Price Change"}
                              </div>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame66"}
                          data-plasmic-override={overrides.frame66}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame66)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame67"}
                            data-plasmic-override={overrides.frame67}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame67)}
                          >
                            <div
                              data-plasmic-name={"money03"}
                              data-plasmic-override={overrides.money03}
                              className={classNames(
                                projectcss.all,
                                sty.money03
                              )}
                            >
                              <Elements13Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__iiyTj
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame427318659"}
                            data-plasmic-override={overrides.frame427318659}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame427318659
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame68"}
                              data-plasmic-override={overrides.frame68}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame68
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5Nkbe
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const filteredData =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxYearEntry =
                                          filteredData.reduce((max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                          );
                                        const maxQuarterEntry = filteredData
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                        return (
                                          Number(
                                            maxQuarterEntry.TOTALCOUNT_Change
                                          ).toFixed(2) + "%"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u00a0$90,011";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zw7Zf
                                )}
                              >
                                {"Home on Market Change"}
                              </div>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <SimpleChart
                        className={classNames(
                          "__wab_instance",
                          sty.chart__e5DSa
                        )}
                        data={(() => {
                          const transformedArray = $queries.getCountyData.data
                            .filter(
                              entry =>
                                entry.CountyOrParish === $state.select.value
                            )
                            .map(entry => {
                              const QuarterValue =
                                entry.CloseQuarter === "1"
                                  ? entry.CloseYear
                                  : entry.CloseYear;
                              return {
                                Quarter: QuarterValue,
                                Price: entry.MdnSold$
                              };
                            });
                          return transformedArray;
                        })()}
                        fill={true}
                        type={"line"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__klAmi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y6KF3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r9Yx6
                        )}
                      >
                        <AntdSelect
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          className={classNames("__wab_instance", sty.select2)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          defaultValue={(() => {
                            try {
                              return (() => {
                                const data = $queries.getCountyData.data;
                                function mapToUniqueKeyValuePairs(data) {
                                  const uniqueCounties = [
                                    ...new Set(
                                      data.map(item => item.CountyOrParish)
                                    )
                                  ].filter(county => county);
                                  return uniqueCounties.map(county => ({
                                    key: county,
                                    value: county
                                  }));
                                }
                                const uniqueCountyKeyValuePairs =
                                  mapToUniqueKeyValuePairs(data);
                                return uniqueCountyKeyValuePairs.find(
                                  entry =>
                                    entry.key !=
                                    $queries.getProperty.data[0].county
                                ).value;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "utah";
                              }
                              throw e;
                            }
                          })()}
                          onChange={generateStateOnChangeProp($state, [
                            "select2",
                            "value"
                          ])}
                          options={(() => {
                            try {
                              return (() => {
                                const data = $queries.getCountyData.data;
                                function mapToUniqueKeyValuePairs(data) {
                                  const uniqueCounties = [
                                    ...new Set(
                                      data.map(item => item.CountyOrParish)
                                    )
                                  ].filter(county => county);
                                  return uniqueCounties.map(county => ({
                                    key: county,
                                    value: county
                                  }));
                                }
                                const uniqueCountyKeyValuePairs =
                                  mapToUniqueKeyValuePairs(data);
                                return uniqueCountyKeyValuePairs;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  const __composite = [
                                    { value: null, label: null, type: "option" }
                                  ];
                                  __composite["0"]["value"] = "SaltLake";
                                  __composite["0"]["label"] = "Salt Lake City";
                                  return __composite;
                                })();
                              }
                              throw e;
                            }
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select2__popup"]}
                          value={generateStateValueProp($state, [
                            "select2",
                            "value"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bmjq1
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame63"}
                          data-plasmic-override={overrides.frame63}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame63)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame64"}
                            data-plasmic-override={overrides.frame64}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame64)}
                          >
                            <div
                              data-plasmic-name={"hotPrice2"}
                              data-plasmic-override={overrides.hotPrice2}
                              className={classNames(
                                projectcss.all,
                                sty.hotPrice2
                              )}
                            >
                              <Elements12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__f8S82
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame65"}
                            data-plasmic-override={overrides.frame65}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame65)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ufJhq
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zq488
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const filteredData =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select2.value
                                          );
                                        const maxYearEntry =
                                          filteredData.reduce((max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                          );
                                        const maxQuarterEntry = filteredData
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                        return (
                                          "$" +
                                          Number(maxQuarterEntry.MdnSold$)
                                            .toString()
                                            .replace(
                                              /\B(?=(\d{3})+(?!\d))/g,
                                              ","
                                            )
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "$599K";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ywi3
                                )}
                              >
                                {(() => {
                                  try {
                                    return (() => {
                                      const findMaxQuarterEntry = data => {
                                        const maxYearEntry = data.reduce(
                                          (max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                        );
                                        return data
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                      };
                                      const filteredDataLeft =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select.value
                                        );
                                      const maxQuarterEntryLeft =
                                        findMaxQuarterEntry(filteredDataLeft);
                                      const countyLeft = Number(
                                        maxQuarterEntryLeft.MdnSold$
                                      );
                                      const filteredDataRight =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select2.value
                                        );
                                      const maxQuarterEntryRight =
                                        findMaxQuarterEntry(filteredDataRight);
                                      const countyRight = Number(
                                        maxQuarterEntryRight.MdnSold$
                                      );
                                      const result = countyLeft > countyRight;
                                      return result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Elements41Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__tkxe
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return (() => {
                                      const findMaxQuarterEntry = data => {
                                        const maxYearEntry = data.reduce(
                                          (max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                        );
                                        return data
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                      };
                                      const filteredDataLeft =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select.value
                                        );
                                      const maxQuarterEntryLeft =
                                        findMaxQuarterEntry(filteredDataLeft);
                                      const countyLeft = Number(
                                        maxQuarterEntryLeft.MdnSold$
                                      );
                                      const filteredDataRight =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select2.value
                                        );
                                      const maxQuarterEntryRight =
                                        findMaxQuarterEntry(filteredDataRight);
                                      const countyRight = Number(
                                        maxQuarterEntryRight.MdnSold$
                                      );
                                      const result = countyLeft < countyRight;
                                      return result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Elements40Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___9IzPx
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3DLi8
                              )}
                            >
                              {"Median Home value"}
                            </div>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h2To
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const findMaxQuarterEntry = data => {
                                      const maxYearEntry = data.reduce(
                                        (max, entry) =>
                                          parseInt(entry.CloseYear) >
                                          parseInt(max.CloseYear)
                                            ? entry
                                            : max
                                      );
                                      return data
                                        .filter(
                                          entry =>
                                            entry.CloseYear ===
                                            maxYearEntry.CloseYear
                                        )
                                        .reduce((max, entry) =>
                                          parseInt(entry.CloseQuarter) >
                                          parseInt(max.CloseQuarter)
                                            ? entry
                                            : max
                                        );
                                    };
                                    const filteredDataLeft =
                                      $queries.getCountyData.data.filter(
                                        entry =>
                                          entry.CountyOrParish ==
                                          $state.select.value
                                      );
                                    const maxQuarterEntryLeft =
                                      findMaxQuarterEntry(filteredDataLeft);
                                    const countyLeft = Number(
                                      maxQuarterEntryLeft.MdnSold$
                                    );
                                    const filteredDataRight =
                                      $queries.getCountyData.data.filter(
                                        entry =>
                                          entry.CountyOrParish ==
                                          $state.select2.value
                                      );
                                    const maxQuarterEntryRight =
                                      findMaxQuarterEntry(filteredDataRight);
                                    const countyRight = Number(
                                      maxQuarterEntryRight.MdnSold$
                                    );
                                    const result = countyLeft > countyRight;
                                    return result;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame51"}
                          data-plasmic-override={overrides.frame51}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame51)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame52"}
                            data-plasmic-override={overrides.frame52}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame52)}
                          >
                            <div
                              data-plasmic-name={"chartMedium2"}
                              data-plasmic-override={overrides.chartMedium2}
                              className={classNames(
                                projectcss.all,
                                sty.chartMedium2
                              )}
                            >
                              <Elements1Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___96I01
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame53"}
                            data-plasmic-override={overrides.frame53}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame53)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p27EN
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__djqQ8
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const filteredData =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxYearEntry =
                                          filteredData.reduce((max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                          );
                                        const maxQuarterEntry = filteredData
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                        return (
                                          Number(maxQuarterEntry.MdnDOM) +
                                          " Days"
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "$599K";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mRNw
                                )}
                              >
                                {(() => {
                                  try {
                                    return (() => {
                                      const findMaxQuarterEntry = data => {
                                        const maxYearEntry = data.reduce(
                                          (max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                        );
                                        return data
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                      };
                                      const filteredDataLeft =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select.value
                                        );
                                      const maxQuarterEntryLeft =
                                        findMaxQuarterEntry(filteredDataLeft);
                                      const countyLeft = Number(
                                        maxQuarterEntryLeft.MdnDOM
                                      );
                                      const filteredDataRight =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select2.value
                                        );
                                      const maxQuarterEntryRight =
                                        findMaxQuarterEntry(filteredDataRight);
                                      const countyRight = Number(
                                        maxQuarterEntryRight.MdnDOM
                                      );
                                      const result = countyLeft < countyRight;
                                      return result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Elements40Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__aAeZe
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return (() => {
                                      const findMaxQuarterEntry = data => {
                                        const maxYearEntry = data.reduce(
                                          (max, entry) =>
                                            parseInt(entry.CloseYear) >
                                            parseInt(max.CloseYear)
                                              ? entry
                                              : max
                                        );
                                        return data
                                          .filter(
                                            entry =>
                                              entry.CloseYear ===
                                              maxYearEntry.CloseYear
                                          )
                                          .reduce((max, entry) =>
                                            parseInt(entry.CloseQuarter) >
                                            parseInt(max.CloseQuarter)
                                              ? entry
                                              : max
                                          );
                                      };
                                      const filteredDataLeft =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select.value
                                        );
                                      const maxQuarterEntryLeft =
                                        findMaxQuarterEntry(filteredDataLeft);
                                      const countyLeft = Number(
                                        maxQuarterEntryLeft.MdnDOM
                                      );
                                      const filteredDataRight =
                                        $queries.getCountyData.data.filter(
                                          entry =>
                                            entry.CountyOrParish ==
                                            $state.select2.value
                                        );
                                      const maxQuarterEntryRight =
                                        findMaxQuarterEntry(filteredDataRight);
                                      const countyRight = Number(
                                        maxQuarterEntryRight.MdnDOM
                                      );
                                      const result = countyLeft > countyRight;
                                      return result;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Elements41Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___53Vhp
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rBpMp
                              )}
                            >
                              {"Median days on market"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame57"}
                          data-plasmic-override={overrides.frame57}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame57)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame58"}
                            data-plasmic-override={overrides.frame58}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame58)}
                          >
                            <div
                              data-plasmic-name={"chartIncrease2"}
                              data-plasmic-override={overrides.chartIncrease2}
                              className={classNames(
                                projectcss.all,
                                sty.chartIncrease2
                              )}
                            >
                              <Elements11Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__cEtlY
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame427318658"}
                            data-plasmic-override={overrides.frame427318658}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame427318658
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame59"}
                              data-plasmic-override={overrides.frame59}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame59
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ts0Sr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rcl4E
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const filteredData =
                                            $queries.getCountyData.data.filter(
                                              entry =>
                                                entry.CountyOrParish ==
                                                $state.select2.value
                                            );
                                          const maxYearEntry =
                                            filteredData.reduce((max, entry) =>
                                              parseInt(entry.CloseYear) >
                                              parseInt(max.CloseYear)
                                                ? entry
                                                : max
                                            );
                                          const maxQuarterEntry = filteredData
                                            .filter(
                                              entry =>
                                                entry.CloseYear ===
                                                maxYearEntry.CloseYear
                                            )
                                            .reduce((max, entry) =>
                                              parseInt(entry.CloseQuarter) >
                                              parseInt(max.CloseQuarter)
                                                ? entry
                                                : max
                                            );
                                          return (
                                            Number(
                                              maxQuarterEntry.MdnSold$_Change
                                            ).toFixed(2) + "%"
                                          );
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "0.91%";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8R8OV
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (() => {
                                        const findMaxQuarterEntry = data => {
                                          const maxYearEntry = data.reduce(
                                            (max, entry) =>
                                              parseInt(entry.CloseYear) >
                                              parseInt(max.CloseYear)
                                                ? entry
                                                : max
                                          );
                                          return data
                                            .filter(
                                              entry =>
                                                entry.CloseYear ===
                                                maxYearEntry.CloseYear
                                            )
                                            .reduce((max, entry) =>
                                              parseInt(entry.CloseQuarter) >
                                              parseInt(max.CloseQuarter)
                                                ? entry
                                                : max
                                            );
                                        };
                                        const filteredDataLeft =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxQuarterEntryLeft =
                                          findMaxQuarterEntry(filteredDataLeft);
                                        const countyLeft = Number(
                                          maxQuarterEntryLeft.MdnSold$_Change
                                        );
                                        const filteredDataRight =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select2.value
                                          );
                                        const maxQuarterEntryRight =
                                          findMaxQuarterEntry(
                                            filteredDataRight
                                          );
                                        const countyRight = Number(
                                          maxQuarterEntryRight.MdnSold$_Change
                                        );
                                        const result = countyLeft < countyRight;
                                        return result;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Elements40Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__qnoMo
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (() => {
                                        const findMaxQuarterEntry = data => {
                                          const maxYearEntry = data.reduce(
                                            (max, entry) =>
                                              parseInt(entry.CloseYear) >
                                              parseInt(max.CloseYear)
                                                ? entry
                                                : max
                                          );
                                          return data
                                            .filter(
                                              entry =>
                                                entry.CloseYear ===
                                                maxYearEntry.CloseYear
                                            )
                                            .reduce((max, entry) =>
                                              parseInt(entry.CloseQuarter) >
                                              parseInt(max.CloseQuarter)
                                                ? entry
                                                : max
                                            );
                                        };
                                        const filteredDataLeft =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxQuarterEntryLeft =
                                          findMaxQuarterEntry(filteredDataLeft);
                                        const countyLeft = Number(
                                          maxQuarterEntryLeft.MdnSold$_Change
                                        );
                                        const filteredDataRight =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select2.value
                                          );
                                        const maxQuarterEntryRight =
                                          findMaxQuarterEntry(
                                            filteredDataRight
                                          );
                                        const countyRight = Number(
                                          maxQuarterEntryRight.MdnSold$_Change
                                        );
                                        const result = countyLeft > countyRight;
                                        return result;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Elements41Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__kvN9W
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eRkWi
                                )}
                              >
                                {"Sold Price Change"}
                              </div>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame69"}
                          data-plasmic-override={overrides.frame69}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame69)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame70"}
                            data-plasmic-override={overrides.frame70}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame70)}
                          >
                            <div
                              data-plasmic-name={"money032"}
                              data-plasmic-override={overrides.money032}
                              className={classNames(
                                projectcss.all,
                                sty.money032
                              )}
                            >
                              <Elements13Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dG5K
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame427318664"}
                            data-plasmic-override={overrides.frame427318664}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame427318664
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame71"}
                              data-plasmic-override={overrides.frame71}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame71
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xwgGv
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iX9LI
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const filteredData =
                                            $queries.getCountyData.data.filter(
                                              entry =>
                                                entry.CountyOrParish ==
                                                $state.select2.value
                                            );
                                          const maxYearEntry =
                                            filteredData.reduce((max, entry) =>
                                              parseInt(entry.CloseYear) >
                                              parseInt(max.CloseYear)
                                                ? entry
                                                : max
                                            );
                                          const maxQuarterEntry = filteredData
                                            .filter(
                                              entry =>
                                                entry.CloseYear ===
                                                maxYearEntry.CloseYear
                                            )
                                            .reduce((max, entry) =>
                                              parseInt(entry.CloseQuarter) >
                                              parseInt(max.CloseQuarter)
                                                ? entry
                                                : max
                                            );
                                          return (
                                            Number(
                                              maxQuarterEntry.TOTALCOUNT_Change
                                            ).toFixed(2) + "%"
                                          );
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u00a0$100,011";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rWF2
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return (() => {
                                        const findMaxQuarterEntry = data => {
                                          const maxYearEntry = data.reduce(
                                            (max, entry) =>
                                              parseInt(entry.CloseYear) >
                                              parseInt(max.CloseYear)
                                                ? entry
                                                : max
                                          );
                                          return data
                                            .filter(
                                              entry =>
                                                entry.CloseYear ===
                                                maxYearEntry.CloseYear
                                            )
                                            .reduce((max, entry) =>
                                              parseInt(entry.CloseQuarter) >
                                              parseInt(max.CloseQuarter)
                                                ? entry
                                                : max
                                            );
                                        };
                                        const filteredDataLeft =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxQuarterEntryLeft =
                                          findMaxQuarterEntry(filteredDataLeft);
                                        const countyLeft = Number(
                                          maxQuarterEntryLeft.TOTALCOUNT_Change
                                        );
                                        const filteredDataRight =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select2.value
                                          );
                                        const maxQuarterEntryRight =
                                          findMaxQuarterEntry(
                                            filteredDataRight
                                          );
                                        const countyRight = Number(
                                          maxQuarterEntryRight.TOTALCOUNT_Change
                                        );
                                        const result = countyLeft > countyRight;
                                        return result;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Elements41Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__gdiw
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (() => {
                                        const findMaxQuarterEntry = data => {
                                          const maxYearEntry = data.reduce(
                                            (max, entry) =>
                                              parseInt(entry.CloseYear) >
                                              parseInt(max.CloseYear)
                                                ? entry
                                                : max
                                          );
                                          return data
                                            .filter(
                                              entry =>
                                                entry.CloseYear ===
                                                maxYearEntry.CloseYear
                                            )
                                            .reduce((max, entry) =>
                                              parseInt(entry.CloseQuarter) >
                                              parseInt(max.CloseQuarter)
                                                ? entry
                                                : max
                                            );
                                        };
                                        const filteredDataLeft =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select.value
                                          );
                                        const maxQuarterEntryLeft =
                                          findMaxQuarterEntry(filteredDataLeft);
                                        const countyLeft = Number(
                                          maxQuarterEntryLeft.TOTALCOUNT_Change
                                        );
                                        const filteredDataRight =
                                          $queries.getCountyData.data.filter(
                                            entry =>
                                              entry.CountyOrParish ==
                                              $state.select2.value
                                          );
                                        const maxQuarterEntryRight =
                                          findMaxQuarterEntry(
                                            filteredDataRight
                                          );
                                        const countyRight = Number(
                                          maxQuarterEntryRight.TOTALCOUNT_Change
                                        );
                                        const result = countyLeft < countyRight;
                                        return result;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Elements40Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__jgLl2
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rH310
                                )}
                              >
                                {"Home on Market Change"}
                              </div>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <SimpleChart
                        className={classNames(
                          "__wab_instance",
                          sty.chart__lZ7G
                        )}
                        data={(() => {
                          const transformedArray = $queries.getCountyData.data
                            .filter(
                              entry =>
                                entry.CountyOrParish === $state.select2.value
                            )
                            .map(entry => {
                              const QuarterValue =
                                entry.CloseQuarter === "1"
                                  ? entry.CloseYear
                                  : entry.CloseYear;
                              return {
                                Quarter: QuarterValue,
                                Price: entry.MdnSold$
                              };
                            });
                          return transformedArray;
                        })()}
                        fill={true}
                        type={"line"}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"topRight"}
              data-plasmic-override={overrides.topRight}
              hasGap={true}
              className={classNames(projectcss.all, sty.topRight)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tzk0L)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__efqwq)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___5ZvQ4)}
                  >
                    <div
                      data-plasmic-name={"homeInfoBlock"}
                      data-plasmic-override={overrides.homeInfoBlock}
                      className={classNames(projectcss.all, sty.homeInfoBlock)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__vnOgw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__mLy0
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6L1FI
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__obzRe
                              )}
                            >
                              {"Home Info"}
                            </div>
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__ngMh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dO9D
                                )}
                              >
                                {"Edit Info"}
                              </div>
                            </AntdButton>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xw9Gk
                              )}
                            >
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__oea2J
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fkgAf
                                  )}
                                >
                                  <Idea01Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__fdOjh
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mCf7K
                                    )}
                                  >
                                    {"Insights"}
                                  </div>
                                </div>
                              </AntdButton>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j291Q
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame38"}
                          data-plasmic-override={overrides.frame38}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame38)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame36"}
                            data-plasmic-override={overrides.frame36}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame36)}
                          >
                            <div
                              data-plasmic-name={"building04"}
                              data-plasmic-override={overrides.building04}
                              className={classNames(
                                projectcss.all,
                                sty.building04
                              )}
                            >
                              <Elements9Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rOL
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame31"}
                            data-plasmic-override={overrides.frame31}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame31)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1WoeG
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.getProperty.data[0]
                                      .year_built == null
                                      ? "?"
                                      : $queries.getProperty.data[0].year_built;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "?";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yZ
                              )}
                            >
                              {"Year built"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame33"}
                          data-plasmic-override={overrides.frame33}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame33)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame32"}
                            data-plasmic-override={overrides.frame32}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame32)}
                          >
                            <div
                              data-plasmic-name={"bed"}
                              data-plasmic-override={overrides.bed}
                              className={classNames(projectcss.all, sty.bed)}
                            >
                              <Elements4Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ap1Ih
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame25"}
                            data-plasmic-override={overrides.frame25}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame25)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__waMci
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.getProperty.data[0]
                                      .BedroomsTotal == null
                                      ? "?"
                                      : $queries.getProperty.data[0]
                                          .BedroomsTotal;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "?";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__x5M2K
                              )}
                            >
                              {"Bedrooms"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame45"}
                          data-plasmic-override={overrides.frame45}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame45)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame37"}
                            data-plasmic-override={overrides.frame37}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame37)}
                          >
                            <div
                              data-plasmic-name={"bathtub02"}
                              data-plasmic-override={overrides.bathtub02}
                              className={classNames(
                                projectcss.all,
                                sty.bathtub02
                              )}
                            >
                              <Elements5Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lfJWx
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame26"}
                            data-plasmic-override={overrides.frame26}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame26)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Dcjy
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.getProperty.data[0]
                                      .BathroomsTotal == null
                                      ? "?"
                                      : $queries.getProperty.data[0]
                                          .BathroomsTotal;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "?";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oxPl5
                              )}
                            >
                              {"Bathrooms"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame44"}
                          data-plasmic-override={overrides.frame44}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame44)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame41"}
                            data-plasmic-override={overrides.frame41}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame41)}
                          >
                            <div
                              data-plasmic-name={"squareSquare"}
                              data-plasmic-override={overrides.squareSquare}
                              className={classNames(
                                projectcss.all,
                                sty.squareSquare
                              )}
                            >
                              <Elements7Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dyGur
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame30"}
                            data-plasmic-override={overrides.frame30}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame30)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iPzZ
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.getProperty.data[0]
                                      .lotSize == null
                                      ? "?"
                                      : $queries.getProperty.data[0].lotSize;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "?";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8G03
                              )}
                            >
                              {"Acre Lot"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame43"}
                          data-plasmic-override={overrides.frame43}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame43)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame42"}
                            data-plasmic-override={overrides.frame42}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame42)}
                          >
                            <div
                              data-plasmic-name={"building03"}
                              data-plasmic-override={overrides.building03}
                              className={classNames(
                                projectcss.all,
                                sty.building03
                              )}
                            >
                              <Elements6Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mN7K
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame29"}
                            data-plasmic-override={overrides.frame29}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame29)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zwxi6
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.getProperty.data[0]
                                      .stories == null
                                      ? "?"
                                      : $queries.getProperty.data[0].stories;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "?";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ydYwL
                              )}
                            >
                              {"Stories"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame35"}
                          data-plasmic-override={overrides.frame35}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame35)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame34"}
                            data-plasmic-override={overrides.frame34}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame34)}
                          >
                            <div
                              data-plasmic-name={"square"}
                              data-plasmic-override={overrides.square}
                              className={classNames(projectcss.all, sty.square)}
                            >
                              <Elements8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__b6Kca
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame87"}
                            data-plasmic-override={overrides.frame87}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame87)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sXwJw
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.getProperty.data[0]
                                      .RoomsTotal == null
                                      ? "?"
                                      : $queries.getProperty.data[0].RoomsTotal;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "?";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nV6Y
                              )}
                            >
                              {"Rooms"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"homeEstimateBlock"}
                      data-plasmic-override={overrides.homeEstimateBlock}
                      className={classNames(
                        projectcss.all,
                        sty.homeEstimateBlock
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tw6P
                        )}
                      >
                        {"Your Home Estimate"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eLsZg
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const number =
                                  $queries.getProperty.data[0].total_assessed;
                                const formattedNumber = number
                                  .toString()
                                  .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                                return "$" + formattedNumber;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "$700,000";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__trgeq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v3Tur
                          )}
                        >
                          {"100% Since purchase in 2021!"}
                        </div>
                        <Elements19Icon
                          className={classNames(projectcss.all, sty.svg__qyZd2)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.column__ieHrg)}
                  >
                    <div
                      data-plasmic-name={"agentBlock"}
                      data-plasmic-override={overrides.agentBlock}
                      className={classNames(projectcss.all, sty.agentBlock)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__i5Wyd)}
                        displayHeight={"156px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"296px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/real_estate_dashboard/images/rectangle71.png",
                          fullWidth: 225,
                          fullHeight: 225,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oHjdF
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__dhog8)}
                          displayHeight={"100px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/real_estate_dashboard/images/ellipse1974.svg",
                            fullWidth: 100,
                            fullHeight: 100,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__guHvd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6EmI
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0KuqQ
                            )}
                          >
                            {"Jeff Eaves"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__w7RUq
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zy518
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318684"}
                                data-plasmic-override={overrides.frame427318684}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318684
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame18"}
                                  data-plasmic-override={overrides.frame18}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame18
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"calendar03"}
                                    data-plasmic-override={overrides.calendar03}
                                    className={classNames(
                                      projectcss.all,
                                      sty.calendar03
                                    )}
                                  >
                                    <Elements20Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__gIy6D
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                  {false ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__idlRe
                                      )}
                                    >
                                      {"jeffeaves@gmail.com"}
                                    </div>
                                  ) : null}
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame20"}
                                  data-plasmic-override={overrides.frame20}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame20
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"mail02"}
                                    data-plasmic-override={overrides.mail02}
                                    className={classNames(
                                      projectcss.all,
                                      sty.mail02
                                    )}
                                  >
                                    <Elements21Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__dGj8R
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                  {false ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2OTC
                                      )}
                                    >
                                      {"jeffeaves@gmail.com"}
                                    </div>
                                  ) : null}
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame19"}
                                  data-plasmic-override={overrides.frame19}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame19
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"call"}
                                    data-plasmic-override={overrides.call}
                                    className={classNames(
                                      projectcss.all,
                                      sty.call
                                    )}
                                  >
                                    <CallIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__fgQSx
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                  {false ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___4QUs
                                      )}
                                    >
                                      {"(801) 860-1166"}
                                    </div>
                                  ) : null}
                                </Stack__>
                              </Stack__>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oB95U
                          )}
                        >
                          {"KW South Valley Keller Williams"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b2V6J
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__fEqq3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m5Qxc
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lK3Gr
                                )}
                              >
                                {"Contact Me"}
                              </div>
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    </div>
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"homeTrendBlock"}
                  data-plasmic-override={overrides.homeTrendBlock}
                  className={classNames(projectcss.all, sty.homeTrendBlock)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q1Zbm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nzgdY
                      )}
                    >
                      {"Your Home Trend"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pd4Oj)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__kKzgd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tp9En
                          )}
                        >
                          <Idea01Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7G8QI
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vktr
                            )}
                          >
                            {"Insights"}
                          </div>
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                  <SimpleChart
                    className={classNames("__wab_instance", sty.chart__l545N)}
                    data={(() => {
                      const transformedArray = $queries.getValuations.data
                        .map(entry => {
                          return {
                            Year: entry.year,
                            Valuation: entry.mktTtlValue
                          };
                        })
                        .sort((a, b) => a.Year - b.Year);
                      return transformedArray;
                    })()}
                    fill={false}
                    type={"line"}
                  />
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__jlxKc)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__cfoLu)}
            >
              <div
                data-plasmic-name={"homesSoldInArea"}
                data-plasmic-override={overrides.homesSoldInArea}
                className={classNames(projectcss.all, sty.homesSoldInArea)}
              >
                <div className={classNames(projectcss.all, sty.columns__z7RqC)}>
                  <div
                    className={classNames(projectcss.all, sty.column__utVSw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r7JbY
                      )}
                    >
                      {"Homes Sold in Your Area"}
                    </div>
                  </div>
                  <div className={classNames(projectcss.all, sty.column__z1Pt)}>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button___24K4O
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b3GDq
                        )}
                      >
                        <Idea01Icon
                          className={classNames(projectcss.all, sty.svg__qZoL)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dmfRn
                          )}
                        >
                          {"How Does My Home Compare"}
                        </div>
                      </div>
                    </AntdButton>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.columns__fxfWn)}>
                  <div
                    className={classNames(projectcss.all, sty.column__g2XYb)}
                  >
                    {(() => {
                      try {
                        return $state.homeSoldInfoOn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1SWXq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Dhnc
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___7C7Lk)}
                            displayHeight={"135px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/real_estate_dashboard/images/rectangle2367.jpg",
                              fullWidth: 3500,
                              fullHeight: 2333,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame427318713"}
                          data-plasmic-override={overrides.frame427318713}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame427318713
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame427318710"}
                            data-plasmic-override={overrides.frame427318710}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame427318710
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame427318691"}
                              data-plasmic-override={overrides.frame427318691}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame427318691
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame6"}
                                data-plasmic-override={overrides.frame6}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame6
                                )}
                              >
                                <Elements24Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aE2N
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__pqLd2
                                  )}
                                >
                                  {"8881 S Aspen View Dr"}
                                </div>
                              </Stack__>
                            </Stack__>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5MZx
                              )}
                            >
                              {"$20,000"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame427318731"}
                            data-plasmic-override={overrides.frame427318731}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame427318731
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame427318737"}
                              data-plasmic-override={overrides.frame427318737}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame427318737
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318720"}
                                data-plasmic-override={overrides.frame427318720}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318720
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame46"}
                                  data-plasmic-override={overrides.frame46}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame46
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"bed2"}
                                    data-plasmic-override={overrides.bed2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bed2
                                    )}
                                  >
                                    <Elements33Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__xlSkh
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame47"}
                                  data-plasmic-override={overrides.frame47}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame47
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___76Lrc
                                    )}
                                  >
                                    {"3"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mOcO
                                    )}
                                  >
                                    {"Bedrooms"}
                                  </div>
                                </Stack__>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318721"}
                                data-plasmic-override={overrides.frame427318721}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318721
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame48"}
                                  data-plasmic-override={overrides.frame48}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame48
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"bathtub022"}
                                    data-plasmic-override={overrides.bathtub022}
                                    className={classNames(
                                      projectcss.all,
                                      sty.bathtub022
                                    )}
                                  >
                                    <Elements34Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__wSuTv
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame72"}
                                  data-plasmic-override={overrides.frame72}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame72
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lgbPj
                                    )}
                                  >
                                    {"4"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9K7Ih
                                    )}
                                  >
                                    {"Bathrooms"}
                                  </div>
                                </Stack__>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318722"}
                                data-plasmic-override={overrides.frame427318722}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318722
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame77"}
                                  data-plasmic-override={overrides.frame77}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame77
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"building032"}
                                    data-plasmic-override={
                                      overrides.building032
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.building032
                                    )}
                                  >
                                    <Elements35Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___9XYkF
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame27"}
                                  data-plasmic-override={overrides.frame27}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame27
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vlqB
                                    )}
                                  >
                                    {"1"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bAZj2
                                    )}
                                  >
                                    {"Stories"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame427318738"}
                              data-plasmic-override={overrides.frame427318738}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame427318738
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318723"}
                                data-plasmic-override={overrides.frame427318723}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318723
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame78"}
                                  data-plasmic-override={overrides.frame78}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame78
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"square2"}
                                    data-plasmic-override={overrides.square2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.square2
                                    )}
                                  >
                                    <Elements25Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__opRh4
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame79"}
                                  data-plasmic-override={overrides.frame79}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame79
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3FlPd
                                    )}
                                  >
                                    {"140"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wyESq
                                    )}
                                  >
                                    {"Square foot"}
                                  </div>
                                </Stack__>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318724"}
                                data-plasmic-override={overrides.frame427318724}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318724
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame80"}
                                  data-plasmic-override={overrides.frame80}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame80
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"squareSquare2"}
                                    data-plasmic-override={
                                      overrides.squareSquare2
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.squareSquare2
                                    )}
                                  >
                                    <Elements29Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hRbU
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame81"}
                                  data-plasmic-override={overrides.frame81}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame81
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mwt7R
                                    )}
                                  >
                                    {"700 X 500 = 35,000 ft2"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yt4Xr
                                    )}
                                  >
                                    {"Lot size acreage"}
                                  </div>
                                </Stack__>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318725"}
                                data-plasmic-override={overrides.frame427318725}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318725
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame39"}
                                  data-plasmic-override={overrides.frame39}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame39
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"building042"}
                                    data-plasmic-override={
                                      overrides.building042
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.building042
                                    )}
                                  >
                                    <Elements36Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___1HhVl
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame82"}
                                  data-plasmic-override={overrides.frame82}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame82
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vaf9N
                                    )}
                                  >
                                    {"2010"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__o9FHn
                                    )}
                                  >
                                    {"Year built"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame427318739"}
                              data-plasmic-override={overrides.frame427318739}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame427318739
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318726"}
                                data-plasmic-override={overrides.frame427318726}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318726
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame83"}
                                  data-plasmic-override={overrides.frame83}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame83
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"school"}
                                    data-plasmic-override={overrides.school}
                                    className={classNames(
                                      projectcss.all,
                                      sty.school
                                    )}
                                  >
                                    <Elements37Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ehD8
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame84"}
                                  data-plasmic-override={overrides.frame84}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame84
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___6DnGg
                                    )}
                                  >
                                    {"2km around"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__i7XuV
                                    )}
                                  >
                                    {"School district"}
                                  </div>
                                </Stack__>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318740"}
                                data-plasmic-override={overrides.frame427318740}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318740
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame85"}
                                  data-plasmic-override={overrides.frame85}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame85
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"house04"}
                                    data-plasmic-override={overrides.house04}
                                    className={classNames(
                                      projectcss.all,
                                      sty.house04
                                    )}
                                  >
                                    <Elements38Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__rBoIx
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame86"}
                                  data-plasmic-override={overrides.frame86}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame86
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bRdXr
                                    )}
                                  >
                                    {"3+"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fubE
                                    )}
                                  >
                                    {"Neighborhood"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return !$state.homeSoldInfoOn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hsKqc
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__dCq5K)}
                          displayHeight={"391px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"380px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/real_estate_dashboard/images/flatScreenRoomjpg.jpg",
                            fullWidth: 5346,
                            fullHeight: 3568,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__gglDv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yfpkK
                      )}
                    >
                      {"5 Homes Sold in the Past 6 Weeks"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame427318716"}
                      data-plasmic-override={overrides.frame427318716}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame427318716)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ylDf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iymS2
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getComps.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"propertyCard4"}
                                data-plasmic-override={overrides.propertyCard4}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.propertyCard4
                                )}
                                key={currentIndex}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___0Swgj)}
                                  displayHeight={"120px"}
                                  displayMaxHeight={"120px"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"120px"}
                                  displayMinWidth={"0"}
                                  displayWidth={"187px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/real_estate_dashboard/images/rectangle2367.jpg",
                                    fullWidth: 3500,
                                    fullHeight: 2333,
                                    aspectRatio: undefined
                                  }}
                                />

                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"frame427318655"}
                                  data-plasmic-override={
                                    overrides.frame427318655
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame427318655
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"frame427318735"}
                                    data-plasmic-override={
                                      overrides.frame427318735
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame427318735
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"_8881SAspenViewDr3"}
                                      data-plasmic-override={
                                        overrides._8881SAspenViewDr3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty._8881SAspenViewDr3
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.address1;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "8703 S 5170 W";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ydHay
                                      )}
                                    >
                                      {"Sold 2 weeks ago"}
                                    </div>
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"frame427318736"}
                                    data-plasmic-override={
                                      overrides.frame427318736
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame427318736
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__i9G2T
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              "$" + currentItem.total_assessed
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "$850,459";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const itemEst = Number(
                                            currentItem.total_assessed
                                          );
                                          const propEst = Number(
                                            $queries.getProperty.data[0]
                                              .total_assessed
                                          );
                                          return itemEst > propEst;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Elements40Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__vCc9K
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    {(() => {
                                      try {
                                        return (() => {
                                          const itemEst = Number(
                                            currentItem.total_assessed
                                          );
                                          const propEst = Number(
                                            $queries.getProperty.data[0]
                                              .total_assessed
                                          );
                                          return propEst > itemEst;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Elements41Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___8YGoa
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                  </Stack__>
                                </Stack__>
                              </Stack__>
                            );
                          })}
                        </div>
                      </div>
                    </Stack__>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"actionsToImproveHome"}
                data-plasmic-override={overrides.actionsToImproveHome}
                className={classNames(projectcss.all, sty.actionsToImproveHome)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__eawyr)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ziWpq
                    )}
                  >
                    {"Actions to Improve Home Value"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2TrjL)}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__gFTwF
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iaW7S
                        )}
                      >
                        <Idea01Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2StR3
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Hk6B
                          )}
                        >
                          {"Insights"}
                        </div>
                      </div>
                    </AntdButton>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rSeMe)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [1, 2, 3, 4, 5, 6];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xe46V
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gtFbu
                          )}
                        >
                          <div
                            data-plasmic-name={"renovateYourKitchen2"}
                            data-plasmic-override={
                              overrides.renovateYourKitchen2
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.renovateYourKitchen2
                            )}
                          >
                            {"Increase Storage"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__m9FOe
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___2ZbRf
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame90"}
                                data-plasmic-override={overrides.frame90}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame90
                                )}
                              >
                                <div
                                  data-plasmic-name={"money034"}
                                  data-plasmic-override={overrides.money034}
                                  className={classNames(
                                    projectcss.all,
                                    sty.money034
                                  )}
                                >
                                  <Elements13Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__rYh6
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </Stack__>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__gLviD
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame427318789"}
                                data-plasmic-override={overrides.frame427318789}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame427318789
                                )}
                              >
                                <div
                                  data-plasmic-name={"paying200002"}
                                  data-plasmic-override={overrides.paying200002}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.paying200002
                                  )}
                                >
                                  {"Paying: $10,000"}
                                </div>
                                <div
                                  data-plasmic-name={
                                    "couldIncreaseYourHomeValueBy400002"
                                  }
                                  data-plasmic-override={
                                    overrides.couldIncreaseYourHomeValueBy400002
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.couldIncreaseYourHomeValueBy400002
                                  )}
                                >
                                  {
                                    "Could increase your home value by : $20,000"
                                  }
                                </div>
                              </Stack__>
                            </div>
                          </div>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__zZpWk
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nCzHj
                              )}
                            >
                              {"Interested"}
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.columns__y8Nzv)}>
                <div className={classNames(projectcss.all, sty.column__cdAq9)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qs4X)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.columns___5M8N3
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__lWkZq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qoPdw
                          )}
                        >
                          {"Own Another Home?"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xvHub
                          )}
                        >
                          {
                            "Enter in the address and I\u2019ll send you a new dashboard"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__zv63)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sxT7J
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ),
                              value: generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__kxTby
                            )}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gItoK
                              )}
                            >
                              {"Button"}
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__nmiAv)}>
                  <div
                    data-plasmic-name={"cashOffer"}
                    data-plasmic-override={overrides.cashOffer}
                    className={classNames(projectcss.all, sty.cashOffer)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame427318775"}
                      data-plasmic-override={overrides.frame427318775}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame427318775)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame427318774"}
                        data-plasmic-override={overrides.frame427318774}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame427318774
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame427318773"}
                          data-plasmic-override={overrides.frame427318773}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame427318773
                          )}
                        >
                          <div
                            data-plasmic-name={"money038"}
                            data-plasmic-override={overrides.money038}
                            className={classNames(projectcss.all, sty.money038)}
                          >
                            <Elements13Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__il8Pn
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ndkZq
                            )}
                          >
                            {"Interested in a Cash offer?"}
                          </div>
                        </Stack__>
                        <div
                          data-plasmic-name={
                            "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2"
                          }
                          data-plasmic-override={
                            overrides.enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2
                          )}
                        >
                          {
                            "Enjoy the convenience of a cash offer with no need to show your house, make repairs, or worry about timing. If you prefer simplicity and flexibility over getting the highest price, a cash offer is the perfect choice for you. "
                          }
                        </div>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button___7Trfg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__owiwj
                            )}
                          >
                            {"Request Offer"}
                          </div>
                        </AntdButton>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame2"}
                          data-plasmic-override={overrides.frame2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame2)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"arrowDown"}
                              data-plasmic-override={overrides.arrowDown}
                              className={classNames(
                                projectcss.all,
                                sty.arrowDown
                              )}
                            >
                              <div
                                data-plasmic-name={"vuesaxboldarrowDown"}
                                data-plasmic-override={
                                  overrides.vuesaxboldarrowDown
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.vuesaxboldarrowDown
                                )}
                              >
                                <ArrowDownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wTxLw
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__waGKe)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7IbuZ
                  )}
                >
                  {"I am here for you"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__neWr9)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wQmS7)}
                    displayHeight={"90px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"90px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/real_estate_dashboard/images/ellipse1978.svg",
                      fullWidth: 90,
                      fullHeight: 90,
                      aspectRatio: 1
                    }}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame16"}
                    data-plasmic-override={overrides.frame16}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame16)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pvl2P
                      )}
                    >
                      {"Jeff Eaves"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8JnL4
                      )}
                    >
                      {"KW South Valley Keller Williams"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame427318811"}
                    data-plasmic-override={overrides.frame427318811}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame427318811)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame427318812"}
                      data-plasmic-override={overrides.frame427318812}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame427318812)}
                    >
                      <div
                        data-plasmic-name={"call2"}
                        data-plasmic-override={overrides.call2}
                        className={classNames(projectcss.all, sty.call2)}
                      >
                        <Elements44Icon
                          className={classNames(projectcss.all, sty.svg__hSnfV)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jlTa5
                        )}
                      >
                        {"+1 801 682-90832"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame427318813"}
                      data-plasmic-override={overrides.frame427318813}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame427318813)}
                    >
                      <div
                        data-plasmic-name={"mail022"}
                        data-plasmic-override={overrides.mail022}
                        className={classNames(projectcss.all, sty.mail022)}
                      >
                        <Elements45Icon
                          className={classNames(projectcss.all, sty.svg__hOu4H)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g94VG
                        )}
                      >
                        {"JeffEaves@gmail.com"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame427318814"}
                      data-plasmic-override={overrides.frame427318814}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame427318814)}
                    >
                      <div
                        data-plasmic-name={"global"}
                        data-plasmic-override={overrides.global}
                        className={classNames(projectcss.all, sty.global)}
                      >
                        <Elements46Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7Qpwp
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qwNOb
                        )}
                      >
                        {"JeffEaves.com"}
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.columns__dZTg8)}>
                  <div
                    className={classNames(projectcss.all, sty.column__pcc7V)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"testimonials7"}
                      data-plasmic-override={overrides.testimonials7}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.testimonials7)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame427318805"}
                        data-plasmic-override={overrides.frame427318805}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame427318805
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame427318806"}
                          data-plasmic-override={overrides.frame427318806}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame427318806
                          )}
                        >
                          <div
                            data-plasmic-name={"star"}
                            data-plasmic-override={overrides.star}
                            className={classNames(projectcss.all, sty.star)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__e5I0
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star2"}
                            data-plasmic-override={overrides.star2}
                            className={classNames(projectcss.all, sty.star2)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xd3
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star3"}
                            data-plasmic-override={overrides.star3}
                            className={classNames(projectcss.all, sty.star3)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__cmcXb
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star4"}
                            data-plasmic-override={overrides.star4}
                            className={classNames(projectcss.all, sty.star4)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9Cv8P
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star5"}
                            data-plasmic-override={overrides.star5}
                            className={classNames(projectcss.all, sty.star5)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__i3VdI
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yoGjm
                          )}
                        >
                          {
                            "\u201cJeff is the best realtor around.\nHe helped us through the process \nand made things to simple.\u201d"
                          }
                        </div>
                        <div
                          data-plasmic-name={"ashleyAllenProvoUt"}
                          data-plasmic-override={overrides.ashleyAllenProvoUt}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.ashleyAllenProvoUt
                          )}
                        >
                          {"Ashley Allen- Provo, UT "}
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__wzQcR)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"testimonials2"}
                      data-plasmic-override={overrides.testimonials2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.testimonials2)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame427318807"}
                        data-plasmic-override={overrides.frame427318807}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame427318807
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame427318808"}
                          data-plasmic-override={overrides.frame427318808}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame427318808
                          )}
                        >
                          <div
                            data-plasmic-name={"star6"}
                            data-plasmic-override={overrides.star6}
                            className={classNames(projectcss.all, sty.star6)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nMyzx
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star7"}
                            data-plasmic-override={overrides.star7}
                            className={classNames(projectcss.all, sty.star7)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hn2Di
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star8"}
                            data-plasmic-override={overrides.star8}
                            className={classNames(projectcss.all, sty.star8)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fhaLm
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star9"}
                            data-plasmic-override={overrides.star9}
                            className={classNames(projectcss.all, sty.star9)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__javji
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"star10"}
                            data-plasmic-override={overrides.star10}
                            className={classNames(projectcss.all, sty.star10)}
                          >
                            <Elements43Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___3NTl
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                        <div
                          data-plasmic-name={
                            "jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple"
                          }
                          data-plasmic-override={
                            overrides.jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple
                          }
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple
                          )}
                        >
                          {
                            "\u201cWorking with Jeff was so easy! \nHe helped us make so much more \nfrom selling our house!"
                          }
                        </div>
                        <div
                          data-plasmic-name={"ashleyAllenProvoUt2"}
                          data-plasmic-override={overrides.ashleyAllenProvoUt2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.ashleyAllenProvoUt2
                          )}
                        >
                          {"Connor McLeod- Pleasent Grove, UT"}
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column___3EdN)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zRNp9)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__feiha
                  )}
                >
                  {"Market Trends in Your Area"}
                </div>
                <Video
                  data-plasmic-name={"htmlVideo"}
                  data-plasmic-override={overrides.htmlVideo}
                  className={classNames("__wab_instance", sty.htmlVideo)}
                  controls={true}
                  poster={
                    "/plasmic/real_estate_dashboard/images/frame427318651.png"
                  }
                  preload={"auto"}
                  src={"https://www.youtube.com/watch?v=4zZAdmmzB-g&t=1s"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kTyfM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bwjZr
                  )}
                >
                  {"Book a time to Talk"}
                </div>
                <Iframe
                  data-plasmic-name={"iframe"}
                  data-plasmic-override={overrides.iframe}
                  className={classNames("__wab_instance", sty.iframe)}
                  preview={true}
                  src={
                    "https://link.astronautindustries.com/widget/booking/BvjYnHjBT1oTNcHLSwX7"
                  }
                />
              </div>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topLeft",
    "addressBlock",
    "frame5",
    "location06",
    "mapComponent",
    "countStatsBlock",
    "select",
    "frame60",
    "frame61",
    "hotPrice",
    "frame62",
    "frame49",
    "frame40",
    "chartMedium",
    "frame50",
    "frame54",
    "frame55",
    "chartIncrease",
    "frame427318657",
    "frame56",
    "frame66",
    "frame67",
    "money03",
    "frame427318659",
    "frame68",
    "select2",
    "frame63",
    "frame64",
    "hotPrice2",
    "frame65",
    "frame51",
    "frame52",
    "chartMedium2",
    "frame53",
    "frame57",
    "frame58",
    "chartIncrease2",
    "frame427318658",
    "frame59",
    "frame69",
    "frame70",
    "money032",
    "frame427318664",
    "frame71",
    "topRight",
    "homeInfoBlock",
    "frame38",
    "frame36",
    "building04",
    "frame31",
    "frame33",
    "frame32",
    "bed",
    "frame25",
    "frame45",
    "frame37",
    "bathtub02",
    "frame26",
    "frame44",
    "frame41",
    "squareSquare",
    "frame30",
    "frame43",
    "frame42",
    "building03",
    "frame29",
    "frame35",
    "frame34",
    "square",
    "frame87",
    "homeEstimateBlock",
    "agentBlock",
    "frame427318684",
    "frame18",
    "calendar03",
    "frame20",
    "mail02",
    "frame19",
    "call",
    "homeTrendBlock",
    "homesSoldInArea",
    "frame427318713",
    "frame427318710",
    "frame427318691",
    "frame6",
    "frame427318731",
    "frame427318737",
    "frame427318720",
    "frame46",
    "bed2",
    "frame47",
    "frame427318721",
    "frame48",
    "bathtub022",
    "frame72",
    "frame427318722",
    "frame77",
    "building032",
    "frame27",
    "frame427318738",
    "frame427318723",
    "frame78",
    "square2",
    "frame79",
    "frame427318724",
    "frame80",
    "squareSquare2",
    "frame81",
    "frame427318725",
    "frame39",
    "building042",
    "frame82",
    "frame427318739",
    "frame427318726",
    "frame83",
    "school",
    "frame84",
    "frame427318740",
    "frame85",
    "house04",
    "frame86",
    "frame427318716",
    "propertyCard4",
    "frame427318655",
    "frame427318735",
    "_8881SAspenViewDr3",
    "frame427318736",
    "actionsToImproveHome",
    "renovateYourKitchen2",
    "frame90",
    "money034",
    "frame427318789",
    "paying200002",
    "couldIncreaseYourHomeValueBy400002",
    "input",
    "cashOffer",
    "frame427318775",
    "frame427318774",
    "frame427318773",
    "money038",
    "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2",
    "frame2",
    "arrowDown",
    "vuesaxboldarrowDown",
    "frame16",
    "frame427318811",
    "frame427318812",
    "call2",
    "frame427318813",
    "mail022",
    "frame427318814",
    "global",
    "testimonials7",
    "frame427318805",
    "frame427318806",
    "star",
    "star2",
    "star3",
    "star4",
    "star5",
    "ashleyAllenProvoUt",
    "testimonials2",
    "frame427318807",
    "frame427318808",
    "star6",
    "star7",
    "star8",
    "star9",
    "star10",
    "jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple",
    "ashleyAllenProvoUt2",
    "htmlVideo",
    "iframe"
  ],
  topLeft: [
    "topLeft",
    "addressBlock",
    "frame5",
    "location06",
    "mapComponent",
    "countStatsBlock",
    "select",
    "frame60",
    "frame61",
    "hotPrice",
    "frame62",
    "frame49",
    "frame40",
    "chartMedium",
    "frame50",
    "frame54",
    "frame55",
    "chartIncrease",
    "frame427318657",
    "frame56",
    "frame66",
    "frame67",
    "money03",
    "frame427318659",
    "frame68",
    "select2",
    "frame63",
    "frame64",
    "hotPrice2",
    "frame65",
    "frame51",
    "frame52",
    "chartMedium2",
    "frame53",
    "frame57",
    "frame58",
    "chartIncrease2",
    "frame427318658",
    "frame59",
    "frame69",
    "frame70",
    "money032",
    "frame427318664",
    "frame71"
  ],
  addressBlock: ["addressBlock", "frame5", "location06", "mapComponent"],
  frame5: ["frame5", "location06"],
  location06: ["location06"],
  mapComponent: ["mapComponent"],
  countStatsBlock: [
    "countStatsBlock",
    "select",
    "frame60",
    "frame61",
    "hotPrice",
    "frame62",
    "frame49",
    "frame40",
    "chartMedium",
    "frame50",
    "frame54",
    "frame55",
    "chartIncrease",
    "frame427318657",
    "frame56",
    "frame66",
    "frame67",
    "money03",
    "frame427318659",
    "frame68",
    "select2",
    "frame63",
    "frame64",
    "hotPrice2",
    "frame65",
    "frame51",
    "frame52",
    "chartMedium2",
    "frame53",
    "frame57",
    "frame58",
    "chartIncrease2",
    "frame427318658",
    "frame59",
    "frame69",
    "frame70",
    "money032",
    "frame427318664",
    "frame71"
  ],
  select: ["select"],
  frame60: ["frame60", "frame61", "hotPrice", "frame62"],
  frame61: ["frame61", "hotPrice"],
  hotPrice: ["hotPrice"],
  frame62: ["frame62"],
  frame49: ["frame49", "frame40", "chartMedium", "frame50"],
  frame40: ["frame40", "chartMedium"],
  chartMedium: ["chartMedium"],
  frame50: ["frame50"],
  frame54: ["frame54", "frame55", "chartIncrease", "frame427318657", "frame56"],
  frame55: ["frame55", "chartIncrease"],
  chartIncrease: ["chartIncrease"],
  frame427318657: ["frame427318657", "frame56"],
  frame56: ["frame56"],
  frame66: ["frame66", "frame67", "money03", "frame427318659", "frame68"],
  frame67: ["frame67", "money03"],
  money03: ["money03"],
  frame427318659: ["frame427318659", "frame68"],
  frame68: ["frame68"],
  select2: ["select2"],
  frame63: ["frame63", "frame64", "hotPrice2", "frame65"],
  frame64: ["frame64", "hotPrice2"],
  hotPrice2: ["hotPrice2"],
  frame65: ["frame65"],
  frame51: ["frame51", "frame52", "chartMedium2", "frame53"],
  frame52: ["frame52", "chartMedium2"],
  chartMedium2: ["chartMedium2"],
  frame53: ["frame53"],
  frame57: [
    "frame57",
    "frame58",
    "chartIncrease2",
    "frame427318658",
    "frame59"
  ],
  frame58: ["frame58", "chartIncrease2"],
  chartIncrease2: ["chartIncrease2"],
  frame427318658: ["frame427318658", "frame59"],
  frame59: ["frame59"],
  frame69: ["frame69", "frame70", "money032", "frame427318664", "frame71"],
  frame70: ["frame70", "money032"],
  money032: ["money032"],
  frame427318664: ["frame427318664", "frame71"],
  frame71: ["frame71"],
  topRight: [
    "topRight",
    "homeInfoBlock",
    "frame38",
    "frame36",
    "building04",
    "frame31",
    "frame33",
    "frame32",
    "bed",
    "frame25",
    "frame45",
    "frame37",
    "bathtub02",
    "frame26",
    "frame44",
    "frame41",
    "squareSquare",
    "frame30",
    "frame43",
    "frame42",
    "building03",
    "frame29",
    "frame35",
    "frame34",
    "square",
    "frame87",
    "homeEstimateBlock",
    "agentBlock",
    "frame427318684",
    "frame18",
    "calendar03",
    "frame20",
    "mail02",
    "frame19",
    "call",
    "homeTrendBlock"
  ],
  homeInfoBlock: [
    "homeInfoBlock",
    "frame38",
    "frame36",
    "building04",
    "frame31",
    "frame33",
    "frame32",
    "bed",
    "frame25",
    "frame45",
    "frame37",
    "bathtub02",
    "frame26",
    "frame44",
    "frame41",
    "squareSquare",
    "frame30",
    "frame43",
    "frame42",
    "building03",
    "frame29",
    "frame35",
    "frame34",
    "square",
    "frame87"
  ],
  frame38: ["frame38", "frame36", "building04", "frame31"],
  frame36: ["frame36", "building04"],
  building04: ["building04"],
  frame31: ["frame31"],
  frame33: ["frame33", "frame32", "bed", "frame25"],
  frame32: ["frame32", "bed"],
  bed: ["bed"],
  frame25: ["frame25"],
  frame45: ["frame45", "frame37", "bathtub02", "frame26"],
  frame37: ["frame37", "bathtub02"],
  bathtub02: ["bathtub02"],
  frame26: ["frame26"],
  frame44: ["frame44", "frame41", "squareSquare", "frame30"],
  frame41: ["frame41", "squareSquare"],
  squareSquare: ["squareSquare"],
  frame30: ["frame30"],
  frame43: ["frame43", "frame42", "building03", "frame29"],
  frame42: ["frame42", "building03"],
  building03: ["building03"],
  frame29: ["frame29"],
  frame35: ["frame35", "frame34", "square", "frame87"],
  frame34: ["frame34", "square"],
  square: ["square"],
  frame87: ["frame87"],
  homeEstimateBlock: ["homeEstimateBlock"],
  agentBlock: [
    "agentBlock",
    "frame427318684",
    "frame18",
    "calendar03",
    "frame20",
    "mail02",
    "frame19",
    "call"
  ],
  frame427318684: [
    "frame427318684",
    "frame18",
    "calendar03",
    "frame20",
    "mail02",
    "frame19",
    "call"
  ],
  frame18: ["frame18", "calendar03"],
  calendar03: ["calendar03"],
  frame20: ["frame20", "mail02"],
  mail02: ["mail02"],
  frame19: ["frame19", "call"],
  call: ["call"],
  homeTrendBlock: ["homeTrendBlock"],
  homesSoldInArea: [
    "homesSoldInArea",
    "frame427318713",
    "frame427318710",
    "frame427318691",
    "frame6",
    "frame427318731",
    "frame427318737",
    "frame427318720",
    "frame46",
    "bed2",
    "frame47",
    "frame427318721",
    "frame48",
    "bathtub022",
    "frame72",
    "frame427318722",
    "frame77",
    "building032",
    "frame27",
    "frame427318738",
    "frame427318723",
    "frame78",
    "square2",
    "frame79",
    "frame427318724",
    "frame80",
    "squareSquare2",
    "frame81",
    "frame427318725",
    "frame39",
    "building042",
    "frame82",
    "frame427318739",
    "frame427318726",
    "frame83",
    "school",
    "frame84",
    "frame427318740",
    "frame85",
    "house04",
    "frame86",
    "frame427318716",
    "propertyCard4",
    "frame427318655",
    "frame427318735",
    "_8881SAspenViewDr3",
    "frame427318736"
  ],
  frame427318713: [
    "frame427318713",
    "frame427318710",
    "frame427318691",
    "frame6",
    "frame427318731",
    "frame427318737",
    "frame427318720",
    "frame46",
    "bed2",
    "frame47",
    "frame427318721",
    "frame48",
    "bathtub022",
    "frame72",
    "frame427318722",
    "frame77",
    "building032",
    "frame27",
    "frame427318738",
    "frame427318723",
    "frame78",
    "square2",
    "frame79",
    "frame427318724",
    "frame80",
    "squareSquare2",
    "frame81",
    "frame427318725",
    "frame39",
    "building042",
    "frame82",
    "frame427318739",
    "frame427318726",
    "frame83",
    "school",
    "frame84",
    "frame427318740",
    "frame85",
    "house04",
    "frame86"
  ],
  frame427318710: ["frame427318710", "frame427318691", "frame6"],
  frame427318691: ["frame427318691", "frame6"],
  frame6: ["frame6"],
  frame427318731: [
    "frame427318731",
    "frame427318737",
    "frame427318720",
    "frame46",
    "bed2",
    "frame47",
    "frame427318721",
    "frame48",
    "bathtub022",
    "frame72",
    "frame427318722",
    "frame77",
    "building032",
    "frame27",
    "frame427318738",
    "frame427318723",
    "frame78",
    "square2",
    "frame79",
    "frame427318724",
    "frame80",
    "squareSquare2",
    "frame81",
    "frame427318725",
    "frame39",
    "building042",
    "frame82",
    "frame427318739",
    "frame427318726",
    "frame83",
    "school",
    "frame84",
    "frame427318740",
    "frame85",
    "house04",
    "frame86"
  ],
  frame427318737: [
    "frame427318737",
    "frame427318720",
    "frame46",
    "bed2",
    "frame47",
    "frame427318721",
    "frame48",
    "bathtub022",
    "frame72",
    "frame427318722",
    "frame77",
    "building032",
    "frame27"
  ],
  frame427318720: ["frame427318720", "frame46", "bed2", "frame47"],
  frame46: ["frame46", "bed2"],
  bed2: ["bed2"],
  frame47: ["frame47"],
  frame427318721: ["frame427318721", "frame48", "bathtub022", "frame72"],
  frame48: ["frame48", "bathtub022"],
  bathtub022: ["bathtub022"],
  frame72: ["frame72"],
  frame427318722: ["frame427318722", "frame77", "building032", "frame27"],
  frame77: ["frame77", "building032"],
  building032: ["building032"],
  frame27: ["frame27"],
  frame427318738: [
    "frame427318738",
    "frame427318723",
    "frame78",
    "square2",
    "frame79",
    "frame427318724",
    "frame80",
    "squareSquare2",
    "frame81",
    "frame427318725",
    "frame39",
    "building042",
    "frame82"
  ],
  frame427318723: ["frame427318723", "frame78", "square2", "frame79"],
  frame78: ["frame78", "square2"],
  square2: ["square2"],
  frame79: ["frame79"],
  frame427318724: ["frame427318724", "frame80", "squareSquare2", "frame81"],
  frame80: ["frame80", "squareSquare2"],
  squareSquare2: ["squareSquare2"],
  frame81: ["frame81"],
  frame427318725: ["frame427318725", "frame39", "building042", "frame82"],
  frame39: ["frame39", "building042"],
  building042: ["building042"],
  frame82: ["frame82"],
  frame427318739: [
    "frame427318739",
    "frame427318726",
    "frame83",
    "school",
    "frame84",
    "frame427318740",
    "frame85",
    "house04",
    "frame86"
  ],
  frame427318726: ["frame427318726", "frame83", "school", "frame84"],
  frame83: ["frame83", "school"],
  school: ["school"],
  frame84: ["frame84"],
  frame427318740: ["frame427318740", "frame85", "house04", "frame86"],
  frame85: ["frame85", "house04"],
  house04: ["house04"],
  frame86: ["frame86"],
  frame427318716: [
    "frame427318716",
    "propertyCard4",
    "frame427318655",
    "frame427318735",
    "_8881SAspenViewDr3",
    "frame427318736"
  ],
  propertyCard4: [
    "propertyCard4",
    "frame427318655",
    "frame427318735",
    "_8881SAspenViewDr3",
    "frame427318736"
  ],
  frame427318655: [
    "frame427318655",
    "frame427318735",
    "_8881SAspenViewDr3",
    "frame427318736"
  ],
  frame427318735: ["frame427318735", "_8881SAspenViewDr3"],
  _8881SAspenViewDr3: ["_8881SAspenViewDr3"],
  frame427318736: ["frame427318736"],
  actionsToImproveHome: [
    "actionsToImproveHome",
    "renovateYourKitchen2",
    "frame90",
    "money034",
    "frame427318789",
    "paying200002",
    "couldIncreaseYourHomeValueBy400002"
  ],
  renovateYourKitchen2: ["renovateYourKitchen2"],
  frame90: ["frame90", "money034"],
  money034: ["money034"],
  frame427318789: [
    "frame427318789",
    "paying200002",
    "couldIncreaseYourHomeValueBy400002"
  ],
  paying200002: ["paying200002"],
  couldIncreaseYourHomeValueBy400002: ["couldIncreaseYourHomeValueBy400002"],
  input: ["input"],
  cashOffer: [
    "cashOffer",
    "frame427318775",
    "frame427318774",
    "frame427318773",
    "money038",
    "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2",
    "frame2",
    "arrowDown",
    "vuesaxboldarrowDown"
  ],
  frame427318775: [
    "frame427318775",
    "frame427318774",
    "frame427318773",
    "money038",
    "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2",
    "frame2",
    "arrowDown",
    "vuesaxboldarrowDown"
  ],
  frame427318774: [
    "frame427318774",
    "frame427318773",
    "money038",
    "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2",
    "frame2",
    "arrowDown",
    "vuesaxboldarrowDown"
  ],
  frame427318773: ["frame427318773", "money038"],
  money038: ["money038"],
  enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2:
    [
      "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2"
    ],
  frame2: ["frame2", "arrowDown", "vuesaxboldarrowDown"],
  arrowDown: ["arrowDown", "vuesaxboldarrowDown"],
  vuesaxboldarrowDown: ["vuesaxboldarrowDown"],
  frame16: ["frame16"],
  frame427318811: [
    "frame427318811",
    "frame427318812",
    "call2",
    "frame427318813",
    "mail022",
    "frame427318814",
    "global"
  ],
  frame427318812: ["frame427318812", "call2"],
  call2: ["call2"],
  frame427318813: ["frame427318813", "mail022"],
  mail022: ["mail022"],
  frame427318814: ["frame427318814", "global"],
  global: ["global"],
  testimonials7: [
    "testimonials7",
    "frame427318805",
    "frame427318806",
    "star",
    "star2",
    "star3",
    "star4",
    "star5",
    "ashleyAllenProvoUt"
  ],
  frame427318805: [
    "frame427318805",
    "frame427318806",
    "star",
    "star2",
    "star3",
    "star4",
    "star5",
    "ashleyAllenProvoUt"
  ],
  frame427318806: [
    "frame427318806",
    "star",
    "star2",
    "star3",
    "star4",
    "star5"
  ],
  star: ["star"],
  star2: ["star2"],
  star3: ["star3"],
  star4: ["star4"],
  star5: ["star5"],
  ashleyAllenProvoUt: ["ashleyAllenProvoUt"],
  testimonials2: [
    "testimonials2",
    "frame427318807",
    "frame427318808",
    "star6",
    "star7",
    "star8",
    "star9",
    "star10",
    "jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple",
    "ashleyAllenProvoUt2"
  ],
  frame427318807: [
    "frame427318807",
    "frame427318808",
    "star6",
    "star7",
    "star8",
    "star9",
    "star10",
    "jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple",
    "ashleyAllenProvoUt2"
  ],
  frame427318808: [
    "frame427318808",
    "star6",
    "star7",
    "star8",
    "star9",
    "star10"
  ],
  star6: ["star6"],
  star7: ["star7"],
  star8: ["star8"],
  star9: ["star9"],
  star10: ["star10"],
  jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple: [
    "jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple"
  ],
  ashleyAllenProvoUt2: ["ashleyAllenProvoUt2"],
  htmlVideo: ["htmlVideo"],
  iframe: ["iframe"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  topLeft: "div";
  addressBlock: "div";
  frame5: "div";
  location06: "div";
  mapComponent: typeof MapComponent;
  countStatsBlock: "div";
  select: typeof AntdSelect;
  frame60: "div";
  frame61: "div";
  hotPrice: "div";
  frame62: "div";
  frame49: "div";
  frame40: "div";
  chartMedium: "div";
  frame50: "div";
  frame54: "div";
  frame55: "div";
  chartIncrease: "div";
  frame427318657: "div";
  frame56: "div";
  frame66: "div";
  frame67: "div";
  money03: "div";
  frame427318659: "div";
  frame68: "div";
  select2: typeof AntdSelect;
  frame63: "div";
  frame64: "div";
  hotPrice2: "div";
  frame65: "div";
  frame51: "div";
  frame52: "div";
  chartMedium2: "div";
  frame53: "div";
  frame57: "div";
  frame58: "div";
  chartIncrease2: "div";
  frame427318658: "div";
  frame59: "div";
  frame69: "div";
  frame70: "div";
  money032: "div";
  frame427318664: "div";
  frame71: "div";
  topRight: "div";
  homeInfoBlock: "div";
  frame38: "div";
  frame36: "div";
  building04: "div";
  frame31: "div";
  frame33: "div";
  frame32: "div";
  bed: "div";
  frame25: "div";
  frame45: "div";
  frame37: "div";
  bathtub02: "div";
  frame26: "div";
  frame44: "div";
  frame41: "div";
  squareSquare: "div";
  frame30: "div";
  frame43: "div";
  frame42: "div";
  building03: "div";
  frame29: "div";
  frame35: "div";
  frame34: "div";
  square: "div";
  frame87: "div";
  homeEstimateBlock: "div";
  agentBlock: "div";
  frame427318684: "div";
  frame18: "div";
  calendar03: "div";
  frame20: "div";
  mail02: "div";
  frame19: "div";
  call: "div";
  homeTrendBlock: "div";
  homesSoldInArea: "div";
  frame427318713: "div";
  frame427318710: "div";
  frame427318691: "div";
  frame6: "div";
  frame427318731: "div";
  frame427318737: "div";
  frame427318720: "div";
  frame46: "div";
  bed2: "div";
  frame47: "div";
  frame427318721: "div";
  frame48: "div";
  bathtub022: "div";
  frame72: "div";
  frame427318722: "div";
  frame77: "div";
  building032: "div";
  frame27: "div";
  frame427318738: "div";
  frame427318723: "div";
  frame78: "div";
  square2: "div";
  frame79: "div";
  frame427318724: "div";
  frame80: "div";
  squareSquare2: "div";
  frame81: "div";
  frame427318725: "div";
  frame39: "div";
  building042: "div";
  frame82: "div";
  frame427318739: "div";
  frame427318726: "div";
  frame83: "div";
  school: "div";
  frame84: "div";
  frame427318740: "div";
  frame85: "div";
  house04: "div";
  frame86: "div";
  frame427318716: "div";
  propertyCard4: "div";
  frame427318655: "div";
  frame427318735: "div";
  _8881SAspenViewDr3: "div";
  frame427318736: "div";
  actionsToImproveHome: "div";
  renovateYourKitchen2: "div";
  frame90: "div";
  money034: "div";
  frame427318789: "div";
  paying200002: "div";
  couldIncreaseYourHomeValueBy400002: "div";
  input: typeof AntdInput;
  cashOffer: "div";
  frame427318775: "div";
  frame427318774: "div";
  frame427318773: "div";
  money038: "div";
  enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2: "div";
  frame2: "div";
  arrowDown: "div";
  vuesaxboldarrowDown: "div";
  frame16: "div";
  frame427318811: "div";
  frame427318812: "div";
  call2: "div";
  frame427318813: "div";
  mail022: "div";
  frame427318814: "div";
  global: "div";
  testimonials7: "div";
  frame427318805: "div";
  frame427318806: "div";
  star: "div";
  star2: "div";
  star3: "div";
  star4: "div";
  star5: "div";
  ashleyAllenProvoUt: "div";
  testimonials2: "div";
  frame427318807: "div";
  frame427318808: "div";
  star6: "div";
  star7: "div";
  star8: "div";
  star9: "div";
  star10: "div";
  jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple: "div";
  ashleyAllenProvoUt2: "div";
  htmlVideo: typeof Video;
  iframe: typeof Iframe;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProperties__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProperties__VariantsArgs;
    args?: PlasmicProperties__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProperties__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProperties__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProperties__ArgProps,
          internalVariantPropNames: PlasmicProperties__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProperties__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProperties";
  } else {
    func.displayName = `PlasmicProperties.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "tkmnpDqLBPFkHbb2kiGN2p"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicProperties = Object.assign(
  // Top-level PlasmicProperties renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    topLeft: makeNodeComponent("topLeft"),
    addressBlock: makeNodeComponent("addressBlock"),
    frame5: makeNodeComponent("frame5"),
    location06: makeNodeComponent("location06"),
    mapComponent: makeNodeComponent("mapComponent"),
    countStatsBlock: makeNodeComponent("countStatsBlock"),
    select: makeNodeComponent("select"),
    frame60: makeNodeComponent("frame60"),
    frame61: makeNodeComponent("frame61"),
    hotPrice: makeNodeComponent("hotPrice"),
    frame62: makeNodeComponent("frame62"),
    frame49: makeNodeComponent("frame49"),
    frame40: makeNodeComponent("frame40"),
    chartMedium: makeNodeComponent("chartMedium"),
    frame50: makeNodeComponent("frame50"),
    frame54: makeNodeComponent("frame54"),
    frame55: makeNodeComponent("frame55"),
    chartIncrease: makeNodeComponent("chartIncrease"),
    frame427318657: makeNodeComponent("frame427318657"),
    frame56: makeNodeComponent("frame56"),
    frame66: makeNodeComponent("frame66"),
    frame67: makeNodeComponent("frame67"),
    money03: makeNodeComponent("money03"),
    frame427318659: makeNodeComponent("frame427318659"),
    frame68: makeNodeComponent("frame68"),
    select2: makeNodeComponent("select2"),
    frame63: makeNodeComponent("frame63"),
    frame64: makeNodeComponent("frame64"),
    hotPrice2: makeNodeComponent("hotPrice2"),
    frame65: makeNodeComponent("frame65"),
    frame51: makeNodeComponent("frame51"),
    frame52: makeNodeComponent("frame52"),
    chartMedium2: makeNodeComponent("chartMedium2"),
    frame53: makeNodeComponent("frame53"),
    frame57: makeNodeComponent("frame57"),
    frame58: makeNodeComponent("frame58"),
    chartIncrease2: makeNodeComponent("chartIncrease2"),
    frame427318658: makeNodeComponent("frame427318658"),
    frame59: makeNodeComponent("frame59"),
    frame69: makeNodeComponent("frame69"),
    frame70: makeNodeComponent("frame70"),
    money032: makeNodeComponent("money032"),
    frame427318664: makeNodeComponent("frame427318664"),
    frame71: makeNodeComponent("frame71"),
    topRight: makeNodeComponent("topRight"),
    homeInfoBlock: makeNodeComponent("homeInfoBlock"),
    frame38: makeNodeComponent("frame38"),
    frame36: makeNodeComponent("frame36"),
    building04: makeNodeComponent("building04"),
    frame31: makeNodeComponent("frame31"),
    frame33: makeNodeComponent("frame33"),
    frame32: makeNodeComponent("frame32"),
    bed: makeNodeComponent("bed"),
    frame25: makeNodeComponent("frame25"),
    frame45: makeNodeComponent("frame45"),
    frame37: makeNodeComponent("frame37"),
    bathtub02: makeNodeComponent("bathtub02"),
    frame26: makeNodeComponent("frame26"),
    frame44: makeNodeComponent("frame44"),
    frame41: makeNodeComponent("frame41"),
    squareSquare: makeNodeComponent("squareSquare"),
    frame30: makeNodeComponent("frame30"),
    frame43: makeNodeComponent("frame43"),
    frame42: makeNodeComponent("frame42"),
    building03: makeNodeComponent("building03"),
    frame29: makeNodeComponent("frame29"),
    frame35: makeNodeComponent("frame35"),
    frame34: makeNodeComponent("frame34"),
    square: makeNodeComponent("square"),
    frame87: makeNodeComponent("frame87"),
    homeEstimateBlock: makeNodeComponent("homeEstimateBlock"),
    agentBlock: makeNodeComponent("agentBlock"),
    frame427318684: makeNodeComponent("frame427318684"),
    frame18: makeNodeComponent("frame18"),
    calendar03: makeNodeComponent("calendar03"),
    frame20: makeNodeComponent("frame20"),
    mail02: makeNodeComponent("mail02"),
    frame19: makeNodeComponent("frame19"),
    call: makeNodeComponent("call"),
    homeTrendBlock: makeNodeComponent("homeTrendBlock"),
    homesSoldInArea: makeNodeComponent("homesSoldInArea"),
    frame427318713: makeNodeComponent("frame427318713"),
    frame427318710: makeNodeComponent("frame427318710"),
    frame427318691: makeNodeComponent("frame427318691"),
    frame6: makeNodeComponent("frame6"),
    frame427318731: makeNodeComponent("frame427318731"),
    frame427318737: makeNodeComponent("frame427318737"),
    frame427318720: makeNodeComponent("frame427318720"),
    frame46: makeNodeComponent("frame46"),
    bed2: makeNodeComponent("bed2"),
    frame47: makeNodeComponent("frame47"),
    frame427318721: makeNodeComponent("frame427318721"),
    frame48: makeNodeComponent("frame48"),
    bathtub022: makeNodeComponent("bathtub022"),
    frame72: makeNodeComponent("frame72"),
    frame427318722: makeNodeComponent("frame427318722"),
    frame77: makeNodeComponent("frame77"),
    building032: makeNodeComponent("building032"),
    frame27: makeNodeComponent("frame27"),
    frame427318738: makeNodeComponent("frame427318738"),
    frame427318723: makeNodeComponent("frame427318723"),
    frame78: makeNodeComponent("frame78"),
    square2: makeNodeComponent("square2"),
    frame79: makeNodeComponent("frame79"),
    frame427318724: makeNodeComponent("frame427318724"),
    frame80: makeNodeComponent("frame80"),
    squareSquare2: makeNodeComponent("squareSquare2"),
    frame81: makeNodeComponent("frame81"),
    frame427318725: makeNodeComponent("frame427318725"),
    frame39: makeNodeComponent("frame39"),
    building042: makeNodeComponent("building042"),
    frame82: makeNodeComponent("frame82"),
    frame427318739: makeNodeComponent("frame427318739"),
    frame427318726: makeNodeComponent("frame427318726"),
    frame83: makeNodeComponent("frame83"),
    school: makeNodeComponent("school"),
    frame84: makeNodeComponent("frame84"),
    frame427318740: makeNodeComponent("frame427318740"),
    frame85: makeNodeComponent("frame85"),
    house04: makeNodeComponent("house04"),
    frame86: makeNodeComponent("frame86"),
    frame427318716: makeNodeComponent("frame427318716"),
    propertyCard4: makeNodeComponent("propertyCard4"),
    frame427318655: makeNodeComponent("frame427318655"),
    frame427318735: makeNodeComponent("frame427318735"),
    _8881SAspenViewDr3: makeNodeComponent("_8881SAspenViewDr3"),
    frame427318736: makeNodeComponent("frame427318736"),
    actionsToImproveHome: makeNodeComponent("actionsToImproveHome"),
    renovateYourKitchen2: makeNodeComponent("renovateYourKitchen2"),
    frame90: makeNodeComponent("frame90"),
    money034: makeNodeComponent("money034"),
    frame427318789: makeNodeComponent("frame427318789"),
    paying200002: makeNodeComponent("paying200002"),
    couldIncreaseYourHomeValueBy400002: makeNodeComponent(
      "couldIncreaseYourHomeValueBy400002"
    ),
    input: makeNodeComponent("input"),
    cashOffer: makeNodeComponent("cashOffer"),
    frame427318775: makeNodeComponent("frame427318775"),
    frame427318774: makeNodeComponent("frame427318774"),
    frame427318773: makeNodeComponent("frame427318773"),
    money038: makeNodeComponent("money038"),
    enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2:
      makeNodeComponent(
        "enjoyTheConvenienceOfACashOfferWithNoNeedToShowYourHouseMakeRepairsOrWorryAboutTimingIfYouPreferSimplicityAndFlexibilityOverGettingTheHighestPriceACashOfferIsThePerfectChoiceForYou2"
      ),
    frame2: makeNodeComponent("frame2"),
    arrowDown: makeNodeComponent("arrowDown"),
    vuesaxboldarrowDown: makeNodeComponent("vuesaxboldarrowDown"),
    frame16: makeNodeComponent("frame16"),
    frame427318811: makeNodeComponent("frame427318811"),
    frame427318812: makeNodeComponent("frame427318812"),
    call2: makeNodeComponent("call2"),
    frame427318813: makeNodeComponent("frame427318813"),
    mail022: makeNodeComponent("mail022"),
    frame427318814: makeNodeComponent("frame427318814"),
    global: makeNodeComponent("global"),
    testimonials7: makeNodeComponent("testimonials7"),
    frame427318805: makeNodeComponent("frame427318805"),
    frame427318806: makeNodeComponent("frame427318806"),
    star: makeNodeComponent("star"),
    star2: makeNodeComponent("star2"),
    star3: makeNodeComponent("star3"),
    star4: makeNodeComponent("star4"),
    star5: makeNodeComponent("star5"),
    ashleyAllenProvoUt: makeNodeComponent("ashleyAllenProvoUt"),
    testimonials2: makeNodeComponent("testimonials2"),
    frame427318807: makeNodeComponent("frame427318807"),
    frame427318808: makeNodeComponent("frame427318808"),
    star6: makeNodeComponent("star6"),
    star7: makeNodeComponent("star7"),
    star8: makeNodeComponent("star8"),
    star9: makeNodeComponent("star9"),
    star10: makeNodeComponent("star10"),
    jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple:
      makeNodeComponent(
        "jeffIsTheBestRealtorAroundHeHelpedUsThroughTheProcessAndMadeThingsToSimple"
      ),
    ashleyAllenProvoUt2: makeNodeComponent("ashleyAllenProvoUt2"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    iframe: makeNodeComponent("iframe"),

    // Metadata about props expected for PlasmicProperties
    internalVariantProps: PlasmicProperties__VariantProps,
    internalArgProps: PlasmicProperties__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProperties;
/* prettier-ignore-end */
