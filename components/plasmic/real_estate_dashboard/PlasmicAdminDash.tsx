// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tkmnpDqLBPFkHbb2kiGN2p
// Component: 4YRhTQq6HSy0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import DrawerBuyLeads from "../../DrawerBuyLeads"; // plasmic-import: GeIyNLTRGj3T/component
import Button from "../../Button"; // plasmic-import: otmq_-sWwXFs/component
import Card from "../../Card"; // plasmic-import: bm7RsgXbCAG4/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import Drawer from "../../Drawer"; // plasmic-import: jBduVDN7iRsf/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tkmnpDqLBPFkHbb2kiGN2p/projectcss
import sty from "./PlasmicAdminDash.module.css"; // plasmic-import: 4YRhTQq6HSy0/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: uvRS8ceWkoSL/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGq6elTBcOm4/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: xrjf5RPtuahF/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: dqZVEtD_E7L4/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: XEmZ_KE4kOJn/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Wfs0TLB_QHxx/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: jzV0VpeVYMS6/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: I6P2P1Q1BQMT/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: SMRr1e4nQg0g/icon

createPlasmicElementProxy;

export type PlasmicAdminDash__VariantMembers = {};
export type PlasmicAdminDash__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminDash__VariantsArgs;
export const PlasmicAdminDash__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminDash__ArgsType = {};
type ArgPropType = keyof PlasmicAdminDash__ArgsType;
export const PlasmicAdminDash__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminDash__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  drawerNotifications?: Flex__<typeof DrawerBuyLeads>;
  card?: Flex__<typeof Card>;
  drawerSupport?: Flex__<typeof DrawerBuyLeads>;
  embedHtml?: Flex__<typeof Embed>;
  modal2?: Flex__<typeof AntdModal>;
  input?: Flex__<typeof AntdInput>;
  select10?: Flex__<typeof AntdSelect>;
  input14?: Flex__<typeof AntdInput>;
  input15?: Flex__<typeof AntdInput>;
  input16?: Flex__<typeof AntdInput>;
  input17?: Flex__<typeof AntdInput>;
  input23?: Flex__<typeof AntdInput>;
  input24?: Flex__<typeof AntdInput>;
  input25?: Flex__<typeof AntdInput>;
  input26?: Flex__<typeof AntdInput>;
  table?: Flex__<typeof RichTable>;
  select8?: Flex__<typeof AntdSelect>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  modal?: Flex__<typeof AntdModal>;
  form4?: Flex__<typeof FormWrapper>;
  drawer?: Flex__<typeof Drawer>;
  iframe?: Flex__<typeof Iframe>;
  img?: Flex__<typeof PlasmicImg__>;
  columns?: Flex__<"div">;
  table3?: Flex__<typeof RichTable>;
  table2?: Flex__<typeof RichTable>;
  chart?: Flex__<typeof SimpleChart>;
  select4?: Flex__<typeof AntdSelect>;
  table4?: Flex__<typeof RichTable>;
};

export interface DefaultAdminDashProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminDash__RenderFunc(props: {
  variants: PlasmicAdminDash__VariantsArgs;
  args: PlasmicAdminDash__ArgsType;
  overrides: PlasmicAdminDash__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerNotifications.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "drawerSupport.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getPartners.data[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const result = $queries.getProperties.data
                  .filter(
                    entry => entry.clientId === $state.table.selectedRowKey
                  )
                  .map(entry => ({
                    key: entry.address1,
                    value: entry.address1
                  }))[0];
                return result.key;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "table3.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table3.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table3.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "currentTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form4.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form4",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form4.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form4",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "table4.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table4.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table4.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table4.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 7
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).firstName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).lastName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).phone;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).address1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).city;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input25.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).state;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).postalCode;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getPartners: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "41e9f968-d21a-47fd-ba16-b1a8e272a3ef",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.41e9f968-d21a-47fd-ba16-b1a8e272a3ef.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEntity: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "a3680a46-7351-437a-87b8-1f83aaf71235",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.a3680a46-7351-437a-87b8-1f83aaf71235.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getProperties: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "0ad393b6-1014-49e2-a60d-b3e519be84ed",
        userArgs: {
          filters: [$queries.getEntity.data[0].id]
        },
        cacheKey: `plasmic.$.0ad393b6-1014-49e2-a60d-b3e519be84ed.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getValuation: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "66abac06-bce2-41f2-bcf8-ba873bd50d0c",
        userArgs: {
          filters: [
            $queries.getProperties.data.find(
              entry => entry.address1 === $state.select8.value
            ).id
          ]
        },
        cacheKey: `plasmic.$.66abac06-bce2-41f2-bcf8-ba873bd50d0c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getComps: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "cf4a3a4d-4114-44ba-873e-64b55e05b9dd",
        userArgs: {
          filters: [
            (() => {
              const result = $queries.getProperties.data
                .filter(entry => entry.clientId === $state.table.selectedRowKey)
                .map(entry => ({
                  key: entry.address1,
                  value: entry.id
                }))[0];
              return result.value;
            })()
          ]
        },
        cacheKey: `plasmic.$.cf4a3a4d-4114-44ba-873e-64b55e05b9dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getLogs: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "f0f8d416-1493-4e3d-b9d7-1f8e1687cd1c",
        userArgs: {
          filters: [
            $queries.getProperties.data.find(
              entry => entry.address1 === $state.select8.value
            ).id
          ]
        },
        cacheKey: `plasmic.$.f0f8d416-1493-4e3d-b9d7-1f8e1687cd1c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    hlContacts: usePlasmicDataOp(() => {
      return {
        sourceId: "9knTPZd45SqznZtYFyLRwH",
        opId: "0e080647-501b-4e47-9e13-6ea48e269381",
        userArgs: {
          params: [
            $queries.getEntity.data[0].AgencyLocationId,
            $state.input.value
          ],
          headers: [$queries.getEntity.data[0].hl_api_key]
        },
        cacheKey: `plasmic.$.0e080647-501b-4e47-9e13-6ea48e269381.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nv8Sh)}>
            <div className={classNames(projectcss.all, sty.freeBox__ckhqa)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"RE Dash"}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox__dZabp)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__zqq9R)}
                  href={(() => {
                    try {
                      return (
                        "/leads-a" + "?locationid=" + $ctx.query.locationid
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iznon
                    )}
                  >
                    {"Leads"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__uizr1)}
                  href={"/campaigns-a" + "?locationid=" + $ctx.query.locationid}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q70BS
                    )}
                  >
                    {"Campaigns"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__yuTpn)}
                  href={(() => {
                    try {
                      return (
                        "/accounts-a" + "?locationid=" + $ctx.query.locationid
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  size={"large"}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wWmJx
                    )}
                  >
                    {"Accounts"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button___4L5QL)}
                  href={(() => {
                    try {
                      return (
                        "/settings-a" + "?locationid=" + $ctx.query.locationid
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ilxWw
                    )}
                  >
                    {"Settings"}
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7XwnI)}>
                <DrawerBuyLeads
                  data-plasmic-name={"drawerNotifications"}
                  data-plasmic-override={overrides.drawerNotifications}
                  className={classNames(
                    "__wab_instance",
                    sty.drawerNotifications
                  )}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "drawerNotifications",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "drawerNotifications",
                    "open"
                  ])}
                  slot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rf5Xt)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        []
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Card
                            data-plasmic-name={"card"}
                            data-plasmic-override={overrides.card}
                            className={classNames("__wab_instance", sty.card)}
                            key={currentIndex}
                            title={
                              <React.Fragment>
                                <Icon7Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ok5Gj
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rCg48
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gi7D9
                                    )}
                                  >
                                    {""}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___92VRs
                                    )}
                                  >
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__mmc3J
                                      )}
                                      type={"primary"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__z78Mk
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.ActionText;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Button";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdButton>
                                  </div>
                                  <Icon8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___9KKvD
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </React.Fragment>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kge4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kyusf
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.ErrorText;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "something here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return currentItem.ErrorText.includes(
                                    "uted Lead-"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__jfCfH
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bvIk9
                                    )}
                                  >
                                    {"Deny"}
                                  </div>
                                </AntdButton>
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.ErrorText.includes(
                                    "Issue with Partner"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__d3S9H
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ryRab
                                    )}
                                  >
                                    {"Post"}
                                  </div>
                                </AntdButton>
                              ) : null}
                            </div>
                          </Card>
                        );
                      })}
                    </Stack__>
                  }
                  trigger={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__f7LvZ
                      )}
                      color={"clear"}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__ysNQ)}
                        role={"img"}
                      />

                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__kKEs0)}
                        role={"img"}
                      />
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dWeV
                    )}
                  >
                    {"Notifications"}
                  </div>
                </DrawerBuyLeads>
                <DrawerBuyLeads
                  data-plasmic-name={"drawerSupport"}
                  data-plasmic-override={overrides.drawerSupport}
                  className={classNames("__wab_instance", sty.drawerSupport)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "drawerSupport",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "drawerSupport",
                    "open"
                  ])}
                  slot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___5E6W)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bx5Qk
                        )}
                      >
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__hl9Bk)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___3AnmV
                          )}
                          component={Link}
                          href={
                            "https://app.slack.com/client/T0781CQJGAX/C078418AQ3E"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Support on Slack"}
                        </PlasmicLink__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ecg54
                        )}
                      >
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__bqXh)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__gLR3
                          )}
                          component={Link}
                          href={
                            "https://crmappmarketplace.notion.site/Lead-Distribution-Docs-1e1d1b76c6ef44bb923b54f595839d8d?pvs=4"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Documentation"}
                        </PlasmicLink__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ytAd
                        )}
                      >
                        <Icon11Icon
                          className={classNames(projectcss.all, sty.svg__env6K)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__axjs
                          )}
                          component={Link}
                          href={
                            "https://leaddistribution.canny.io/feature-requests"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Feature Request"}
                        </PlasmicLink__>
                      </div>
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<script src="https://static.elfsight.com/platform/platform.js" data-use-service-core defer></script>\n<div class="elfsight-app-e8972927-bc21-4f55-a0b2-f894260bda47" data-elfsight-app-lazy></div>'
                        }
                      />
                    </Stack__>
                  }
                  trigger={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__mz7AE
                      )}
                      color={"clear"}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__ih5Dm)}
                          role={"img"}
                        />
                      ) : null}
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sIbWt
                    )}
                  >
                    {"Support"}
                  </div>
                </DrawerBuyLeads>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hCiay)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__y7Zu4)}
                  size={"large"}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dx50Y
                    )}
                  >
                    {"Dashboard"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__okJxu)}
                  href={`/adminsettings`}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1L9Uy
                    )}
                  >
                    {"Settings"}
                  </div>
                </AntdButton>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___5Dp7Z)}>
              <div className={classNames(projectcss.all, sty.freeBox___8ODfG)}>
                <div className={classNames(projectcss.all, sty.freeBox__open9)}>
                  <AntdModal
                    data-plasmic-name={"modal2"}
                    data-plasmic-override={overrides.modal2}
                    className={classNames("__wab_instance", sty.modal2)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["modal2__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modal2",
                      "open"
                    ])}
                    open={generateStateValueProp($state, ["modal2", "open"])}
                    title={"Add New Client"}
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__iebur
                        )}
                        type={"default"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wiInz
                          )}
                        >
                          {"Add New Client"}
                        </div>
                      </AntdButton>
                    }
                    width={"600"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iEf4G)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jWpzq
                        )}
                      >
                        {
                          'Enter a search term for the contact you want to find then "Search"'
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dtyJ
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__r5AYr
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["refreshData"] = true
                              ? (() => {
                                  const actionArgs = {
                                    queryInvalidation: [
                                      "0e080647-501b-4e47-9e13-6ea48e269381"
                                    ]
                                  };
                                  return (async ({ queryInvalidation }) => {
                                    if (!queryInvalidation) {
                                      return;
                                    }
                                    await plasmicInvalidate(queryInvalidation);
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["refreshData"] != null &&
                              typeof $steps["refreshData"] === "object" &&
                              typeof $steps["refreshData"].then === "function"
                            ) {
                              $steps["refreshData"] = await $steps[
                                "refreshData"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aDlk
                            )}
                          >
                            {"Search"}
                          </div>
                        </AntdButton>
                        <AntdSelect
                          data-plasmic-name={"select10"}
                          data-plasmic-override={overrides.select10}
                          allowClear={true}
                          className={classNames("__wab_instance", sty.select10)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "select10",
                            "value"
                          ])}
                          options={(() => {
                            try {
                              return (() => {
                                return $queries.hlContacts.data.response
                                  .contacts.length === 0
                                  ? [
                                      {
                                        key: "No Contact Found",
                                        value: "No Contact Found"
                                      }
                                    ]
                                  : $queries.hlContacts.data.response.contacts.map(
                                      entry => ({
                                        label: entry.contactName,
                                        value: entry.id
                                      })
                                    );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [
                                  {
                                    value: "option1",
                                    label: "Option 1",
                                    type: "option"
                                  },
                                  {
                                    value: "option2",
                                    label: "Option 2",
                                    type: "option"
                                  }
                                ];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select10__popup"]}
                          value={generateStateValueProp($state, [
                            "select10",
                            "value"
                          ])}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.select10.value != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cd5IC
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hWoXl
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uFjz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tiEwP
                                )}
                              >
                                {"First Name"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input14
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input14", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input14",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input14.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input14"}
                                    data-plasmic-override={overrides.input14}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oCf6Y
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9KMfO
                                )}
                              >
                                {"Last Name"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input15
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input15", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input15",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input15.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input15"}
                                    data-plasmic-override={overrides.input15}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__d7HJm
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__esPwf
                                )}
                              >
                                {"Phone"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input16
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input16", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input16",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input16.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input16"}
                                    data-plasmic-override={overrides.input16}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eFl52
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___41GR4
                                )}
                              >
                                {"Email"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input17
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input17", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input17",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input17.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input17"}
                                    data-plasmic-override={overrides.input17}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ypSac
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dE5I6
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__czuMw
                                )}
                              >
                                {"Address"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input23
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input23", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input23",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input23.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input23"}
                                    data-plasmic-override={overrides.input23}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pUd6C
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ee1Fy
                                )}
                              >
                                {"City"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input24
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input24", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input24",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input24.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input24"}
                                    data-plasmic-override={overrides.input24}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__huBwd
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jjhO
                                )}
                              >
                                {"State"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input25
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input25", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input25",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input25.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input25"}
                                    data-plasmic-override={overrides.input25}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xIs6A
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5T2Fc
                                )}
                              >
                                {"Zip Code"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input26
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input26", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input26",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input26.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input26"}
                                    data-plasmic-override={overrides.input26}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $state.select10.value != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qFjC
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__s6Wkq
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateModal2Open"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal2", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModal2Open"] != null &&
                                typeof $steps["updateModal2Open"] ===
                                  "object" &&
                                typeof $steps["updateModal2Open"].then ===
                                  "function"
                              ) {
                                $steps["updateModal2Open"] = await $steps[
                                  "updateModal2Open"
                                ];
                              }

                              $steps["useIntegration"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "94DwF4GLwVL8D9jt9sN8Dy",
                                        opId: "28629973-9ef4-4cc4-b59b-45f969a88769",
                                        userArgs: {
                                          body: [
                                            $queries.hlContacts.data.response.contacts.find(
                                              entry =>
                                                entry.id ==
                                                $state.select10.value
                                            ).id,
                                            $state.input14.value,
                                            $state.input15.value,
                                            $state.input17.value,
                                            $state.input16.value,
                                            $state.input23.value,
                                            $state.input24.value,
                                            $state.input25.value,
                                            $state.input26.value,
                                            $queries.getEntity.data[0]
                                              .AgencyLocationId
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "41e9f968-d21a-47fd-ba16-b1a8e272a3ef"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["useIntegration"] != null &&
                                typeof $steps["useIntegration"] === "object" &&
                                typeof $steps["useIntegration"].then ===
                                  "function"
                              ) {
                                $steps["useIntegration"] = await $steps[
                                  "useIntegration"
                                ];
                              }

                              $steps["updateSelect10Value"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["select10", "value"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelect10Value"] != null &&
                                typeof $steps["updateSelect10Value"] ===
                                  "object" &&
                                typeof $steps["updateSelect10Value"].then ===
                                  "function"
                              ) {
                                $steps["updateSelect10Value"] = await $steps[
                                  "updateSelect10Value"
                                ];
                              }

                              $steps["updateInputValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["input", "value"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateInputValue"] != null &&
                                typeof $steps["updateInputValue"] ===
                                  "object" &&
                                typeof $steps["updateInputValue"].then ===
                                  "function"
                              ) {
                                $steps["updateInputValue"] = await $steps[
                                  "updateInputValue"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dcv7J
                              )}
                            >
                              {"Add Client"}
                            </div>
                          </AntdButton>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zO2Ar
                            )}
                          >
                            {"This will also create a dashboard."}
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </AntdModal>
                  {(() => {
                    const child$Props = {
                      canSelectRows: "single",
                      className: classNames("__wab_instance", sty.table),
                      data: (() => {
                        try {
                          return $queries.getPartners;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          { key: "id", fieldId: "id", isHidden: null },
                          {
                            key: "contactId",
                            fieldId: "contactId",
                            isHidden: null
                          },
                          { title: null, expr: null, disableSorting: null },
                          {
                            key: "firstName",
                            fieldId: "firstName",
                            isHidden: null
                          },
                          {
                            key: "lastName",
                            fieldId: "lastName",
                            isHidden: null
                          },
                          {
                            key: "phone",
                            fieldId: "phone",
                            disableSorting: null,
                            title: null,
                            dataType: null
                          },
                          {
                            key: "entityId",
                            fieldId: "entityId",
                            isHidden: null
                          },
                          {
                            key: "created_at",
                            fieldId: "created_at",
                            isHidden: null
                          },
                          {
                            key: "email",
                            fieldId: "email",
                            disableSorting: null,
                            title: null
                          },
                          {
                            key: "isActive",
                            fieldId: "isActive",
                            isHidden: null
                          },
                          {
                            key: "AgencyLocationId",
                            fieldId: "AgencyLocationId",
                            isHidden: null
                          },
                          { title: null, expr: null, disableSorting: null }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["isHidden"] = true;
                        __composite["2"]["title"] = "Name";
                        __composite["2"]["expr"] = (
                          currentItem,
                          currentValue
                        ) => {
                          return (
                            currentItem.firstName + " " + currentItem.lastName
                          );
                        };
                        __composite["2"]["disableSorting"] = true;
                        __composite["3"]["isHidden"] = true;
                        __composite["4"]["isHidden"] = true;
                        __composite["5"]["disableSorting"] = true;
                        __composite["5"]["title"] = "Phone";
                        __composite["5"]["dataType"] = "string";
                        __composite["6"]["isHidden"] = true;
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["disableSorting"] = true;
                        __composite["8"]["title"] = "Email";
                        __composite["9"]["isHidden"] = true;
                        __composite["10"]["isHidden"] = true;
                        __composite["11"]["title"] = "Properties";
                        __composite["11"]["expr"] = (
                          currentItem,
                          currentValue
                        ) => {
                          return $queries.getProperties.data.filter(
                            entry => entry.clientId == currentItem.id
                          ).length;
                        };
                        __composite["11"]["disableSorting"] = true;
                        return __composite;
                      })(),

                      hideColumnPicker: true,
                      hideExports: true,
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pagination: (() => {
                        try {
                          return $queries.getPartners.data.length > 15;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      rowKey: "id",
                      scopeClassName: sty["table__instance"],
                      selectedRowKey: generateStateValueProp($state, [
                        "table",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: generateStateValueProp($state, [
                        "table",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__b7Sl3)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g9P5N)}
                  >
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <AntdSelect
                        data-plasmic-name={"select8"}
                        data-plasmic-override={overrides.select8}
                        className={classNames("__wab_instance", sty.select8)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        defaultValue={(() => {
                          try {
                            return (() => {
                              const result = $queries.getProperties.data
                                .filter(
                                  entry =>
                                    entry.clientId ===
                                    $state.table.selectedRowKey
                                )
                                .map(entry => ({
                                  key: entry.address1,
                                  value: entry.address1
                                }))[0];
                              return result.key;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        onChange={generateStateOnChangeProp($state, [
                          "select8",
                          "value"
                        ])}
                        options={(() => {
                          try {
                            return $queries.getProperties.data
                              .filter(
                                entry =>
                                  entry.clientId === $state.table.selectedRowKey
                              )
                              .map(entry => ({
                                key: entry.address1,
                                value: entry.address1
                              }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m63Sy
                            )}
                          >
                            {"Select..."}
                          </div>
                        }
                        popupScopeClassName={sty["select8__popup"]}
                        value={generateStateValueProp($state, [
                          "select8",
                          "value"
                        ])}
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q7Mkt)}
                  >
                    <AntdRadioGroup
                      data-plasmic-name={"radioGroup"}
                      data-plasmic-override={overrides.radioGroup}
                      className={classNames("__wab_instance", sty.radioGroup)}
                      defaultValue={"1"}
                      onChange={generateStateOnChangeProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                      optionType={"button"}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null },
                          { label: null, value: null }
                        ];
                        __composite["0"]["value"] = "1";
                        __composite["0"]["label"] = "Home";
                        __composite["1"]["value"] = "2";
                        __composite["1"]["label"] = "Activity";
                        __composite["2"]["label"] = "Notifications";
                        __composite["2"]["value"] = "3";
                        return __composite;
                      })()}
                      value={generateStateValueProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                    >
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__wZhAf
                        )}
                        value={"op1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Aot2
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </AntdRadio>
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__rLgk
                        )}
                        value={"op2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rrrLi
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </AntdRadio>
                    </AntdRadioGroup>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g1MTl)}
                  >
                    <AntdModal
                      data-plasmic-name={"modal"}
                      data-plasmic-override={overrides.modal}
                      className={classNames("__wab_instance", sty.modal)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      hideFooter={true}
                      modalScopeClassName={sty["modal__modal"]}
                      onOpenChange={generateStateOnChangeProp($state, [
                        "modal",
                        "open"
                      ])}
                      open={generateStateValueProp($state, ["modal", "open"])}
                      title={"Edit Home Info"}
                      trigger={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kv68
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__bG7Bh
                            )}
                            type={"default"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ek1Cm
                              )}
                            >
                              {"Edit Property Info"}
                            </div>
                          </AntdButton>
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form4),
                          data: {
                            sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
                            opId: "186a6867-5ac4-453b-98fd-15ba95372a28",
                            userArgs: {
                              filters: [
                                $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id
                              ]
                            },
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getOne";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.186a6867-5ac4-453b-98fd-15ba95372a28.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "address1",
                                inputType: "Text",
                                fieldId: "address1",
                                label: null,
                                name: "address1",
                                initialValue: "123 W Main ST"
                              },
                              {
                                key: "state",
                                inputType: "Text",
                                fieldId: "state",
                                label: null,
                                name: "state",
                                initialValue: "UT"
                              },
                              {
                                key: "city",
                                inputType: "Text",
                                fieldId: "city",
                                label: null,
                                name: "city",
                                initialValue: "West Jordan"
                              },
                              {
                                key: "zipCode",
                                inputType: "Text",
                                fieldId: "zipCode",
                                label: null,
                                name: "zipCode",
                                initialValue: "84081"
                              },
                              {
                                key: "county",
                                inputType: null,
                                fieldId: "county",
                                label: null,
                                name: "county",
                                initialValue: "Salt Lake"
                              },
                              {
                                key: "id",
                                inputType: "Number",
                                fieldId: "id",
                                label: "id",
                                name: "id",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "BedroomsTotal",
                                inputType: "Number",
                                fieldId: "BedroomsTotal",
                                label: "BedroomsTotal",
                                name: "BedroomsTotal",
                                initialValue: "3"
                              },
                              {
                                key: "BathroomsTotal",
                                inputType: "Number",
                                fieldId: "BathroomsTotal",
                                label: "BathroomsTotal",
                                name: "BathroomsTotal",
                                initialValue: "2"
                              },
                              {
                                key: "RoomsTotal",
                                inputType: "Number",
                                fieldId: "RoomsTotal",
                                label: "RoomsTotal",
                                name: "RoomsTotal",
                                initialValue: "9"
                              },
                              {
                                key: "lotSize",
                                inputType: "Number",
                                fieldId: "lotSize",
                                label: null,
                                name: "lotSize",
                                initialValue: null
                              },
                              {
                                key: "clientId",
                                inputType: "Number",
                                fieldId: "clientId",
                                label: "clientId",
                                name: "clientId",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "pricePerSqFoot",
                                inputType: "Number",
                                fieldId: "pricePerSqFoot",
                                label: "pricePerSqFoot",
                                name: "pricePerSqFoot",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "addressFull",
                                inputType: "Text",
                                fieldId: "addressFull",
                                label: "addressFull",
                                name: "addressFull",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "stories",
                                inputType: "Number",
                                fieldId: "stories",
                                label: null,
                                name: "stories",
                                initialValue: null
                              },
                              {
                                key: "year_built",
                                inputType: "Number",
                                fieldId: "year_built",
                                label: null,
                                name: "year_built",
                                initialValue: null
                              },
                              {
                                key: "created_at",
                                inputType: "Text",
                                fieldId: "created_at",
                                label: "created_at",
                                name: "created_at",
                                initialValue: "2024-07-15T15:12:05.070Z",
                                hidden: null
                              },
                              {
                                key: "neighborhood_code",
                                inputType: "Text",
                                fieldId: "neighborhood_code",
                                label: "neighborhood_code",
                                name: "neighborhood_code",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "ListingKeyNumeric",
                                inputType: "Number",
                                fieldId: "ListingKeyNumeric",
                                label: "ListingKeyNumeric",
                                name: "ListingKeyNumeric",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "latitude",
                                inputType: "Number",
                                fieldId: "latitude",
                                label: "latitude",
                                name: "latitude",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "atommId",
                                inputType: "Number",
                                fieldId: "atommId",
                                label: "atommId",
                                name: "atommId",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "property_type",
                                inputType: "Text",
                                fieldId: "property_type",
                                label: "property_type",
                                name: "property_type",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "client_email",
                                inputType: "Text",
                                fieldId: "client_email",
                                label: "client_email",
                                name: "client_email",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "parcel_number",
                                inputType: "Text",
                                fieldId: "parcel_number",
                                label: "parcel_number",
                                name: "parcel_number",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "StreetType",
                                inputType: "Text",
                                fieldId: "StreetType",
                                label: "StreetType",
                                name: "StreetType",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "PreDir",
                                inputType: "Text",
                                fieldId: "PreDir",
                                label: "PreDir",
                                name: "PreDir",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "StreetName",
                                inputType: "Text",
                                fieldId: "StreetName",
                                label: "StreetName",
                                name: "StreetName",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "address2",
                                inputType: "Text",
                                fieldId: "address2",
                                label: "address2",
                                name: "address2",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "entityId",
                                inputType: "Number",
                                fieldId: "entityId",
                                label: "entityId",
                                name: "entityId",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "HouseNum",
                                inputType: "Number",
                                fieldId: "HouseNum",
                                label: "HouseNum",
                                name: "HouseNum",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "homeEstimate",
                                inputType: "Number",
                                fieldId: "homeEstimate",
                                label: "homeEstimate",
                                name: "homeEstimate",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "StreetDir",
                                inputType: "Text",
                                fieldId: "StreetDir",
                                label: "StreetDir",
                                name: "StreetDir",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "longitude",
                                inputType: "Number",
                                fieldId: "longitude",
                                label: "longitude",
                                name: "longitude",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "parcel_acres",
                                inputType: "Number",
                                fieldId: "parcel_acres",
                                label: "parcel_acres",
                                name: "parcel_acres",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "streetPhoto",
                                inputType: "Text",
                                fieldId: "streetPhoto",
                                label: "streetPhoto",
                                name: "streetPhoto",
                                initialValue:
                                  "https://assets.utahrealestate.com/photos/640x480/901698.jpg",
                                hidden: null
                              },
                              {
                                key: "taxable_value",
                                inputType: "Number",
                                fieldId: "taxable_value",
                                label: "taxable_value",
                                name: "taxable_value",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "total_assessed",
                                inputType: "Number",
                                fieldId: "total_assessed",
                                label: null,
                                name: "total_assessed",
                                initialValue: null
                              },
                              {
                                key: "total_sq_ft",
                                inputType: "Number",
                                fieldId: "total_sq_ft",
                                label: "total_sq_ft",
                                name: "total_sq_ft",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "pageViews",
                                inputType: "Number",
                                fieldId: "pageViews",
                                label: "pageViews",
                                name: "pageViews",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "prop_status_other",
                                inputType: "Text",
                                fieldId: "prop_status_other",
                                label: "prop_status_other",
                                name: "prop_status_other",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "notif_2",
                                inputType: "Checkbox",
                                fieldId: "notif_2",
                                label: "notif_2",
                                name: "notif_2",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "propsubtype",
                                inputType: "Text",
                                fieldId: "propsubtype",
                                label: "propsubtype",
                                name: "propsubtype",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "propclass",
                                inputType: "Text",
                                fieldId: "propclass",
                                label: "propclass",
                                name: "propclass",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "done",
                                inputType: "Checkbox",
                                fieldId: "done",
                                label: "done",
                                name: "done",
                                initialValue: true,
                                hidden: null
                              },
                              {
                                key: "contactId",
                                inputType: "Text",
                                fieldId: "contactId",
                                label: "contactId",
                                name: "contactId",
                                initialValue: "WkIxUxhQfUy9e7NKe0my",
                                hidden: null
                              },
                              {
                                key: "offer_requested",
                                inputType: "Checkbox",
                                fieldId: "offer_requested",
                                label: "offer_requested",
                                name: "offer_requested",
                                initialValue: false,
                                hidden: null
                              },
                              {
                                key: "notif_3",
                                inputType: "Checkbox",
                                fieldId: "notif_3",
                                label: "notif_3",
                                name: "notif_3",
                                initialValue: {},
                                hidden: null
                              },
                              {
                                key: "prop_next_move",
                                inputType: "Text",
                                fieldId: "prop_next_move",
                                label: "prop_next_move",
                                name: "prop_next_move",
                                initialValue: [2],
                                hidden: null
                              },
                              {
                                key: "comp_map",
                                inputType: "Text",
                                fieldId: "comp_map",
                                label: "comp_map",
                                name: "comp_map",
                                initialValue:
                                  "https://maps.googleapis.com/maps/api/staticmap?size=640x640&maptype=roadmap&markers=color:red%7C40.588606,-112.019422%7C40.588218,-112.016419%7C40.587636,-112.014368%7C40.59324,-112.016033%7C40.588962,-112.011582%7C40.593067,-112.013783%7C40.582813,-112.014281%7C40.593314,-112.013784%7C40.581953,-112.013404%7C40.585847,-112.009393&markers=color:yellow%7C40.588203,-112.019619&key=AIzaSyATfwK78rrMglC2UiaomrD7lij1j_AQ_IU",
                                hidden: null
                              },
                              {
                                key: "onboarding_done",
                                inputType: "Checkbox",
                                fieldId: "onboarding_done",
                                label: "onboarding_done",
                                name: "onboarding_done",
                                initialValue: true,
                                hidden: null
                              },
                              {
                                key: "prop_next_move_other",
                                inputType: "Text",
                                fieldId: "prop_next_move_other",
                                label: "prop_next_move_other",
                                name: "prop_next_move_other",
                                initialValue: "",
                                hidden: null
                              },
                              {
                                key: "prop_status",
                                inputType: "Text",
                                fieldId: "prop_status",
                                label: "prop_status",
                                name: "prop_status",
                                initialValue: [0],
                                hidden: null
                              },
                              {
                                key: "notif_1",
                                inputType: "Checkbox",
                                fieldId: "notif_1",
                                label: "notif_1",
                                name: "notif_1",
                                initialValue: true,
                                hidden: null
                              }
                            ];
                            __composite["0"]["label"] = "Address";
                            __composite["1"]["label"] = "State";
                            __composite["2"]["label"] = "City";
                            __composite["3"]["label"] = "Zip Code";
                            __composite["4"]["inputType"] = "Select";
                            __composite["4"]["label"] = "County";
                            __composite["5"]["initialValue"] = 2;
                            __composite["5"]["hidden"] = true;
                            __composite["9"]["label"] = "Lot Size";
                            __composite["9"]["initialValue"] = 0.1899908;
                            __composite["10"]["initialValue"] = 1;
                            __composite["10"]["hidden"] = true;
                            __composite["11"]["hidden"] = true;
                            __composite["12"]["hidden"] = true;
                            __composite["13"]["label"] = "Stories";
                            __composite["13"]["initialValue"] = 2;
                            __composite["14"]["label"] = "Year Built";
                            __composite["14"]["initialValue"] = 2004;
                            __composite["15"]["hidden"] = true;
                            __composite["16"]["hidden"] = true;
                            __composite["17"]["hidden"] = true;
                            __composite["18"]["initialValue"] = 40.588203;
                            __composite["18"]["hidden"] = true;
                            __composite["19"]["initialValue"] = 35868754;
                            __composite["19"]["hidden"] = true;
                            __composite["20"]["hidden"] = true;
                            __composite["21"]["hidden"] = true;
                            __composite["22"]["hidden"] = true;
                            __composite["23"]["hidden"] = true;
                            __composite["24"]["hidden"] = true;
                            __composite["25"]["hidden"] = true;
                            __composite["26"]["hidden"] = true;
                            __composite["27"]["initialValue"] = 1;
                            __composite["27"]["hidden"] = true;
                            __composite["28"]["hidden"] = true;
                            __composite["29"]["hidden"] = true;
                            __composite["30"]["hidden"] = true;
                            __composite["31"]["initialValue"] = -112.019619;
                            __composite["31"]["hidden"] = true;
                            __composite["32"]["hidden"] = true;
                            __composite["33"]["hidden"] = true;
                            __composite["34"]["hidden"] = true;
                            __composite["35"]["label"] = "Home Estimate";
                            __composite["35"]["initialValue"] = 552000;
                            __composite["36"]["hidden"] = true;
                            __composite["37"]["initialValue"] = 3;
                            __composite["37"]["hidden"] = true;
                            __composite["38"]["hidden"] = true;
                            __composite["39"]["hidden"] = true;
                            __composite["40"]["hidden"] = true;
                            __composite["41"]["hidden"] = true;
                            __composite["42"]["hidden"] = true;
                            __composite["43"]["hidden"] = true;
                            __composite["44"]["hidden"] = true;
                            __composite["45"]["hidden"] = true;
                            __composite["46"]["hidden"] = true;
                            __composite["47"]["hidden"] = true;
                            __composite["48"]["hidden"] = true;
                            __composite["49"]["hidden"] = true;
                            __composite["50"]["hidden"] = true;
                            __composite["51"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form4", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "inline",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
                                      opId: "a058aa78-6196-4994-b25e-a5a31e92b822",
                                      userArgs: {
                                        conditions: [
                                          $queries.getProperties.data.find(
                                            entry =>
                                              entry.address1 ===
                                              $state.select8.value
                                          ).id
                                        ],
                                        variables: [$state.form4.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form4", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["form4"] = ref;
                          },
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__yFjxc
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zNouY
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form4.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form4.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form4"}
                            data-plasmic-override={overrides.form4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </AntdModal>
                    <Drawer
                      data-plasmic-name={"drawer"}
                      data-plasmic-override={overrides.drawer}
                      className={classNames("__wab_instance", sty.drawer)}
                      onOpenChange={generateStateOnChangeProp($state, [
                        "drawer",
                        "open"
                      ])}
                      open={generateStateValueProp($state, ["drawer", "open"])}
                      slot={
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wBfT
                          )}
                        >
                          <Iframe
                            data-plasmic-name={"iframe"}
                            data-plasmic-override={overrides.iframe}
                            className={classNames("__wab_instance", sty.iframe)}
                            preview={true}
                            src={(() => {
                              try {
                                return (
                                  "https://my.utahhomevaluation.com/home/" +
                                  $queries.getProperties.data.find(
                                    entry =>
                                      entry.address1 === $state.select8.value
                                  ).contactId +
                                  "/" +
                                  $queries.getProperties.data.find(
                                    entry =>
                                      entry.address1 === $state.select8.value
                                  ).id
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </Stack__>
                      }
                      trigger={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__idp4R
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__led2A
                            )}
                          >
                            {"View Dashboard "}
                          </div>
                        </Button>
                      }
                    >
                      {"Dashboard View"}
                    </Drawer>
                  </div>
                  {(() => {
                    try {
                      return $state.radioGroup?.value == "1";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__v6ZCw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b0I0A
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__roCej
                          )}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"123px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"163px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).streetPhoto;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yPvpI
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tdnsJ
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $queries.getProperties.data.find(
                                      entry =>
                                        entry.address1 === $state.select8.value
                                    ).address1 +
                                    " " +
                                    $queries.getProperties.data.find(
                                      entry =>
                                        entry.address1 === $state.select8.value
                                    ).state +
                                    " " +
                                    $queries.getProperties.data.find(
                                      entry =>
                                        entry.address1 === $state.select8.value
                                    ).zipCode
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"columns"}
                            data-plasmic-override={overrides.columns}
                            className={classNames(projectcss.all, sty.columns)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__y2GoM
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rEKC
                                )}
                              >
                                {"Valuation:"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nyCk
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function getHighestYearFormatted(data) {
                                          data.sort((a, b) => b.year - a.year);
                                          const highestYearValue =
                                            data[0]?.mktTtlValue;
                                          return highestYearValue
                                            ? "$" +
                                                Number(
                                                  highestYearValue
                                                ).toLocaleString()
                                            : undefined;
                                        }
                                        const result = getHighestYearFormatted(
                                          $queries.getValuation.data
                                        );
                                        return result;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__wg822
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cet6K
                                )}
                              >
                                {"Page Views:"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__x5JwB
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $queries.getProperties.data.find(
                                        entry =>
                                          entry.address1 ===
                                          $state.select8.value
                                      ).pageViews;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ohoPo
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.table3
                                ),
                                data: (() => {
                                  try {
                                    return $queries.getProperties.data.find(
                                      entry =>
                                        entry.address1 === $state.select8.value
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                fields: (() => {
                                  const __composite = [
                                    {
                                      key: "id",
                                      fieldId: "id",
                                      isHidden: null
                                    },
                                    {
                                      key: "city",
                                      fieldId: "city",
                                      disableSorting: null,
                                      title: null
                                    },
                                    {
                                      key: "BedroomsTotal",
                                      fieldId: "BedroomsTotal",
                                      disableSorting: null,
                                      title: null
                                    },
                                    {
                                      key: "BathroomsTotal",
                                      fieldId: "BathroomsTotal",
                                      disableSorting: null,
                                      title: null
                                    },
                                    {
                                      key: "stories",
                                      fieldId: "stories",
                                      disableSorting: null,
                                      title: null
                                    },
                                    {
                                      key: "RoomsTotal",
                                      fieldId: "RoomsTotal",
                                      disableSorting: null,
                                      title: null
                                    },
                                    {
                                      key: "lotSize",
                                      fieldId: "lotSize",
                                      title: null,
                                      disableSorting: null
                                    },
                                    {
                                      key: "clientId",
                                      fieldId: "clientId",
                                      isHidden: null
                                    },
                                    {
                                      key: "pricePerSqFoot",
                                      fieldId: "pricePerSqFoot",
                                      isHidden: null
                                    },
                                    {
                                      key: "addressFull",
                                      fieldId: "addressFull",
                                      isHidden: null
                                    },
                                    {
                                      key: "address1",
                                      fieldId: "address1",
                                      title: null,
                                      disableSorting: null,
                                      isHidden: null
                                    },
                                    {
                                      key: "created_at",
                                      fieldId: "created_at",
                                      isHidden: null
                                    },
                                    {
                                      key: "neighborhood_code",
                                      fieldId: "neighborhood_code",
                                      isHidden: null
                                    },
                                    {
                                      key: "ListingKeyNumeric",
                                      fieldId: "ListingKeyNumeric",
                                      isHidden: null
                                    },
                                    {
                                      key: "latitude",
                                      fieldId: "latitude",
                                      isHidden: null
                                    },
                                    {
                                      key: "atommId",
                                      fieldId: "atommId",
                                      isHidden: null
                                    },
                                    {
                                      key: "property_type",
                                      fieldId: "property_type",
                                      isHidden: null
                                    },
                                    {
                                      key: "client_email",
                                      fieldId: "client_email",
                                      isHidden: null
                                    },
                                    {
                                      key: "state",
                                      fieldId: "state",
                                      disableSorting: null,
                                      title: null,
                                      isHidden: null
                                    },
                                    {
                                      key: "parcel_number",
                                      fieldId: "parcel_number",
                                      isHidden: null
                                    },
                                    {
                                      key: "StreetType",
                                      fieldId: "StreetType",
                                      isHidden: null
                                    },
                                    {
                                      key: "PreDir",
                                      fieldId: "PreDir",
                                      isHidden: null
                                    },
                                    {
                                      key: "zipCode",
                                      fieldId: "zipCode",
                                      isHidden: null
                                    },
                                    {
                                      key: "StreetName",
                                      fieldId: "StreetName",
                                      isHidden: null
                                    },
                                    {
                                      key: "address2",
                                      fieldId: "address2",
                                      isHidden: null
                                    },
                                    {
                                      key: "entityId",
                                      fieldId: "entityId",
                                      isHidden: null
                                    },
                                    {
                                      key: "HouseNum",
                                      fieldId: "HouseNum",
                                      isHidden: null
                                    },
                                    {
                                      key: "county",
                                      fieldId: "county",
                                      isHidden: null
                                    },
                                    {
                                      key: "homeEstimate",
                                      fieldId: "homeEstimate",
                                      isHidden: null
                                    },
                                    {
                                      key: "StreetDir",
                                      fieldId: "StreetDir",
                                      isHidden: null
                                    },
                                    {
                                      key: "longitude",
                                      fieldId: "longitude",
                                      isHidden: null
                                    },
                                    {
                                      key: "parcel_acres",
                                      fieldId: "parcel_acres",
                                      isHidden: null
                                    },
                                    {
                                      key: "streetPhoto",
                                      fieldId: "streetPhoto",
                                      isHidden: null
                                    },
                                    {
                                      key: "year_built",
                                      fieldId: "year_built",
                                      disableSorting: null,
                                      dataType: null,
                                      title: null
                                    },
                                    {
                                      key: "taxable_value",
                                      fieldId: "taxable_value",
                                      isHidden: null
                                    },
                                    {
                                      key: "total_assessed",
                                      fieldId: "total_assessed",
                                      isHidden: null
                                    },
                                    {
                                      key: "total_sq_ft",
                                      fieldId: "total_sq_ft",
                                      isHidden: null
                                    },
                                    {
                                      key: "pageViews",
                                      fieldId: "pageViews",
                                      isHidden: null
                                    },
                                    {
                                      key: "notif_1",
                                      fieldId: "notif_1",
                                      isHidden: null
                                    },
                                    {
                                      key: "notif_2",
                                      fieldId: "notif_2",
                                      isHidden: null
                                    },
                                    {
                                      key: "notif_3",
                                      fieldId: "notif_3",
                                      isHidden: null
                                    },
                                    {
                                      key: "prop_status",
                                      fieldId: "prop_status",
                                      isHidden: null
                                    },
                                    {
                                      key: "prop_next_move",
                                      fieldId: "prop_next_move",
                                      isHidden: null
                                    },
                                    {
                                      key: "prop_status_other",
                                      fieldId: "prop_status_other",
                                      isHidden: null
                                    },
                                    {
                                      key: "prop_next_move_other",
                                      fieldId: "prop_next_move_other",
                                      isHidden: null
                                    },
                                    {
                                      key: "onboarding_done",
                                      fieldId: "onboarding_done",
                                      isHidden: null
                                    },
                                    {
                                      key: "comp_map",
                                      fieldId: "comp_map",
                                      isHidden: null
                                    },
                                    {
                                      key: "propclass",
                                      fieldId: "propclass",
                                      isHidden: null
                                    },
                                    {
                                      key: "propsubtype",
                                      fieldId: "propsubtype",
                                      isHidden: null
                                    },
                                    {
                                      key: "done",
                                      fieldId: "done",
                                      isHidden: null
                                    },
                                    {
                                      key: "contactId",
                                      fieldId: "contactId",
                                      isHidden: null
                                    },
                                    {
                                      key: "offer_requested",
                                      fieldId: "offer_requested",
                                      isHidden: null
                                    }
                                  ];
                                  __composite["0"]["isHidden"] = true;
                                  __composite["1"]["disableSorting"] = true;
                                  __composite["1"]["title"] = "City";
                                  __composite["2"]["disableSorting"] = true;
                                  __composite["2"]["title"] = "Bed";
                                  __composite["3"]["disableSorting"] = true;
                                  __composite["3"]["title"] = "Bath";
                                  __composite["4"]["disableSorting"] = true;
                                  __composite["4"]["title"] = "Sq. F";
                                  __composite["5"]["disableSorting"] = true;
                                  __composite["5"]["title"] = "Rooms";
                                  __composite["6"]["title"] = "Lot";
                                  __composite["6"]["disableSorting"] = true;
                                  __composite["7"]["isHidden"] = true;
                                  __composite["8"]["isHidden"] = true;
                                  __composite["9"]["isHidden"] = true;
                                  __composite["10"]["title"] = "Address";
                                  __composite["10"]["disableSorting"] = true;
                                  __composite["10"]["isHidden"] = true;
                                  __composite["11"]["isHidden"] = true;
                                  __composite["12"]["isHidden"] = true;
                                  __composite["13"]["isHidden"] = true;
                                  __composite["14"]["isHidden"] = true;
                                  __composite["15"]["isHidden"] = true;
                                  __composite["16"]["isHidden"] = true;
                                  __composite["17"]["isHidden"] = true;
                                  __composite["18"]["disableSorting"] = true;
                                  __composite["18"]["title"] = "State";
                                  __composite["18"]["isHidden"] = true;
                                  __composite["19"]["isHidden"] = true;
                                  __composite["20"]["isHidden"] = true;
                                  __composite["21"]["isHidden"] = true;
                                  __composite["22"]["isHidden"] = true;
                                  __composite["23"]["isHidden"] = true;
                                  __composite["24"]["isHidden"] = true;
                                  __composite["25"]["isHidden"] = true;
                                  __composite["26"]["isHidden"] = true;
                                  __composite["27"]["isHidden"] = true;
                                  __composite["28"]["isHidden"] = true;
                                  __composite["29"]["isHidden"] = true;
                                  __composite["30"]["isHidden"] = true;
                                  __composite["31"]["isHidden"] = true;
                                  __composite["32"]["isHidden"] = true;
                                  __composite["33"]["disableSorting"] = true;
                                  __composite["33"]["dataType"] = "string";
                                  __composite["33"]["title"] = "Year";
                                  __composite["34"]["isHidden"] = true;
                                  __composite["35"]["isHidden"] = true;
                                  __composite["36"]["isHidden"] = true;
                                  __composite["37"]["isHidden"] = true;
                                  __composite["38"]["isHidden"] = true;
                                  __composite["39"]["isHidden"] = true;
                                  __composite["40"]["isHidden"] = true;
                                  __composite["41"]["isHidden"] = true;
                                  __composite["42"]["isHidden"] = true;
                                  __composite["43"]["isHidden"] = true;
                                  __composite["44"]["isHidden"] = true;
                                  __composite["45"]["isHidden"] = true;
                                  __composite["46"]["isHidden"] = true;
                                  __composite["47"]["isHidden"] = true;
                                  __composite["48"]["isHidden"] = true;
                                  __composite["49"]["isHidden"] = true;
                                  __composite["50"]["isHidden"] = true;
                                  __composite["51"]["isHidden"] = true;
                                  return __composite;
                                })(),

                                hideColumnPicker: true,
                                hideExports: true,
                                hideSearch: true,
                                onRowSelectionChanged: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKey",
                                    ["table3", "selectedRowKey"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRow",
                                    ["table3", "selectedRow"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRows",
                                    ["table3", "selectedRows"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKeys",
                                    ["table3", "selectedRowKeys"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                },
                                pagination: false,
                                scopeClassName: sty["table3__instance"],
                                selectedRowKey: generateStateValueProp($state, [
                                  "table3",
                                  "selectedRowKey"
                                ]),
                                selectedRowKeys: generateStateValueProp(
                                  $state,
                                  ["table3", "selectedRowKeys"]
                                ),
                                themeResetClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "selectedRowKey",
                                    plasmicStateName: "table3.selectedRowKey"
                                  },
                                  {
                                    name: "selectedRow",
                                    plasmicStateName: "table3.selectedRow"
                                  },
                                  {
                                    name: "selectedRows",
                                    plasmicStateName: "table3.selectedRows"
                                  },
                                  {
                                    name: "selectedRowKeys",
                                    plasmicStateName: "table3.selectedRowKeys"
                                  }
                                ],
                                [],
                                RichTable_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <RichTable
                                  data-plasmic-name={"table3"}
                                  data-plasmic-override={overrides.table3}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cyvS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__clzgn
                          )}
                        >
                          {"Nearby Comparables"}
                        </div>
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table2),
                          data: (() => {
                            try {
                              return (() => {
                                const propid = $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id;
                                return $queries.getComps.data.filter(
                                  entry => entry.property_Id == propid
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              {
                                key: "Distance",
                                fieldId: "Distance",
                                disableSorting: null,
                                dataType: null,
                                maximumFractionDigits: null
                              },
                              {
                                key: "address1",
                                fieldId: "address1",
                                disableSorting: null,
                                title: null,
                                dataType: null
                              },
                              {
                                key: "city",
                                fieldId: "city",
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "state",
                                fieldId: "state",
                                disableSorting: null,
                                title: null,
                                isHidden: null
                              },
                              { key: "id", fieldId: "id", isHidden: null },
                              {
                                key: "created_at",
                                fieldId: "created_at",
                                isHidden: null
                              },
                              {
                                key: "BedroomsTotal",
                                fieldId: "BedroomsTotal",
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "BathroomsTotal",
                                fieldId: "BathroomsTotal",
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "stories",
                                fieldId: "stories",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "RoomsTotal",
                                fieldId: "RoomsTotal",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "lotSize",
                                fieldId: "lotSize",
                                dataType: null,
                                maximumFractionDigits: null,
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "addressFull",
                                fieldId: "addressFull",
                                isHidden: null
                              },
                              {
                                key: "pricePerSqFoot",
                                fieldId: "pricePerSqFoot",
                                isHidden: null
                              },
                              {
                                key: "clientId",
                                fieldId: "clientId",
                                isHidden: null
                              },
                              {
                                key: "parcel_number",
                                fieldId: "parcel_number",
                                isHidden: null
                              },
                              {
                                key: "property_type",
                                fieldId: "property_type",
                                isHidden: null
                              },
                              {
                                key: "property_Id",
                                fieldId: "property_Id",
                                isHidden: null
                              },
                              {
                                key: "StreetName",
                                fieldId: "StreetName",
                                isHidden: null
                              },
                              {
                                key: "zipCode",
                                fieldId: "zipCode",
                                isHidden: null
                              },
                              {
                                key: "PreDir",
                                fieldId: "PreDir",
                                isHidden: null
                              },
                              {
                                key: "StreetType",
                                fieldId: "StreetType",
                                isHidden: null
                              },
                              {
                                key: "neighborhood_code",
                                fieldId: "neighborhood_code",
                                isHidden: null
                              },
                              {
                                key: "ListingKeyNumeric",
                                fieldId: "ListingKeyNumeric",
                                isHidden: null
                              },
                              {
                                key: "latitude",
                                fieldId: "latitude",
                                isHidden: null
                              },
                              {
                                key: "atommId",
                                fieldId: "atommId",
                                isHidden: null
                              },
                              {
                                key: "streetPhoto",
                                fieldId: "streetPhoto",
                                isHidden: null
                              },
                              {
                                key: "parcel_acres",
                                fieldId: "parcel_acres",
                                isHidden: null
                              },
                              {
                                key: "address2",
                                fieldId: "address2",
                                isHidden: null
                              },
                              {
                                key: "homeEstimate",
                                fieldId: "homeEstimate",
                                disableSorting: null,
                                isHidden: null
                              },
                              {
                                key: "longitude",
                                fieldId: "longitude",
                                isHidden: null
                              },
                              {
                                key: "StreetDir",
                                fieldId: "StreetDir",
                                isHidden: null
                              },
                              {
                                key: "HouseNum",
                                fieldId: "HouseNum",
                                isHidden: null
                              },
                              {
                                key: "county",
                                fieldId: "county",
                                isHidden: null
                              },
                              {
                                key: "year_built",
                                fieldId: "year_built",
                                dataType: null,
                                disableSorting: null,
                                title: null,
                                isHidden: null
                              },
                              {
                                key: "total_sq_ft",
                                fieldId: "total_sq_ft",
                                isHidden: null
                              },
                              {
                                key: "total_assessed",
                                fieldId: "total_assessed",
                                isHidden: null,
                                disableSorting: null,
                                dataType: null,
                                maximumFractionDigits: null,
                                title: null
                              },
                              {
                                key: "taxable_value",
                                fieldId: "taxable_value",
                                isHidden: null
                              }
                            ];
                            __composite["0"]["disableSorting"] = true;
                            __composite["0"]["dataType"] = "number";
                            __composite["0"]["maximumFractionDigits"] = 2;
                            __composite["1"]["disableSorting"] = true;
                            __composite["1"]["title"] = "Address";
                            __composite["1"]["dataType"] = "string";
                            __composite["2"]["disableSorting"] = true;
                            __composite["2"]["title"] = "City";
                            __composite["3"]["disableSorting"] = true;
                            __composite["3"]["title"] = "State";
                            __composite["3"]["isHidden"] = true;
                            __composite["4"]["isHidden"] = true;
                            __composite["5"]["isHidden"] = true;
                            __composite["6"]["disableSorting"] = true;
                            __composite["6"]["title"] = "Bed";
                            __composite["7"]["disableSorting"] = true;
                            __composite["7"]["title"] = "Bath";
                            __composite["8"]["title"] = "Stories";
                            __composite["8"]["disableSorting"] = true;
                            __composite["9"]["title"] = "Rooms";
                            __composite["9"]["disableSorting"] = true;
                            __composite["10"]["dataType"] = "number";
                            __composite["10"]["maximumFractionDigits"] = 2;
                            __composite["10"]["disableSorting"] = true;
                            __composite["10"]["title"] = "Lot";
                            __composite["11"]["isHidden"] = true;
                            __composite["12"]["isHidden"] = true;
                            __composite["13"]["isHidden"] = true;
                            __composite["14"]["isHidden"] = true;
                            __composite["15"]["isHidden"] = true;
                            __composite["16"]["isHidden"] = true;
                            __composite["17"]["isHidden"] = true;
                            __composite["18"]["isHidden"] = true;
                            __composite["19"]["isHidden"] = true;
                            __composite["20"]["isHidden"] = true;
                            __composite["21"]["isHidden"] = true;
                            __composite["22"]["isHidden"] = true;
                            __composite["23"]["isHidden"] = true;
                            __composite["24"]["isHidden"] = true;
                            __composite["25"]["isHidden"] = true;
                            __composite["26"]["isHidden"] = true;
                            __composite["27"]["isHidden"] = true;
                            __composite["28"]["disableSorting"] = true;
                            __composite["28"]["isHidden"] = true;
                            __composite["29"]["isHidden"] = true;
                            __composite["30"]["isHidden"] = true;
                            __composite["31"]["isHidden"] = true;
                            __composite["32"]["isHidden"] = true;
                            __composite["33"]["dataType"] = "string";
                            __composite["33"]["disableSorting"] = true;
                            __composite["33"]["title"] = "Year";
                            __composite["33"]["isHidden"] = false;
                            __composite["34"]["isHidden"] = true;
                            __composite["35"]["isHidden"] = false;
                            __composite["35"]["disableSorting"] = true;
                            __composite["35"]["dataType"] = "currency";
                            __composite["35"]["maximumFractionDigits"] = 0;
                            __composite["35"]["title"] = "Valuation";
                            __composite["36"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table2", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table2", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table2", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table2", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pagination: false,
                          scopeClassName: sty["table2__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table2",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table2",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table2.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table2.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table2.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table2.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table2"}
                            data-plasmic-override={overrides.table2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </section>
                  ) : null}
                  {(() => {
                    try {
                      return $state.radioGroup?.value == "2";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__jaKSk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kY6F
                        )}
                      >
                        <SimpleChart
                          data-plasmic-name={"chart"}
                          data-plasmic-override={overrides.chart}
                          className={classNames("__wab_instance", sty.chart)}
                          data={(() => {
                            const propid = $queries.getProperties.data.find(
                              entry => entry.address1 === $state.select8.value
                            ).id;
                            let filteredLogs = $queries.getLogs.data.filter(
                              entry =>
                                entry.propId == propid &&
                                entry.type == "page_view"
                            );
                            const selectedDays = $state.select4.value;
                            const today = new Date();
                            const pastDate = new Date(today);
                            pastDate.setDate(today.getDate() - selectedDays);
                            filteredLogs = filteredLogs.filter(
                              log => new Date(log.created_at) >= pastDate
                            );
                            const dateViewCounts = {};
                            const formatDate = dateString => {
                              const date = new Date(dateString);
                              const options = {
                                day: "2-digit",
                                month: "short"
                              };
                              return date.toLocaleDateString("en-US", options);
                            };
                            filteredLogs.forEach(log => {
                              const formattedDate = formatDate(log.created_at);
                              if (dateViewCounts[formattedDate]) {
                                dateViewCounts[formattedDate] += 1;
                              } else {
                                dateViewCounts[formattedDate] = 1;
                              }
                            });
                            let chartData = Object.keys(dateViewCounts).map(
                              date => ({
                                date: date,
                                views: dateViewCounts[date]
                              })
                            );
                            if (chartData.length === 0) {
                              for (let i = 0; i < 5; i++) {
                                const dummyDate = new Date(today);
                                dummyDate.setDate(today.getDate() - i);
                                const formattedDummyDate = formatDate(
                                  dummyDate.toISOString()
                                );
                                chartData.unshift({
                                  date: formattedDummyDate,
                                  views: 0
                                });
                              }
                            }
                            if (chartData.length < 5 && chartData.length > 0) {
                              const earliestDate = new Date(chartData[0].date);
                              for (let i = 1; chartData.length < 5; i++) {
                                const dummyDate = new Date(earliestDate);
                                dummyDate.setDate(earliestDate.getDate() - i);
                                const formattedDummyDate = formatDate(
                                  dummyDate.toISOString()
                                );
                                if (
                                  !chartData.some(
                                    item => item.date === formattedDummyDate
                                  )
                                ) {
                                  chartData.unshift({
                                    date: formattedDummyDate,
                                    views: 0
                                  });
                                }
                              }
                            }
                            chartData.sort(
                              (a, b) => new Date(a.date) - new Date(b.date)
                            );
                            return chartData;
                          })()}
                          type={"line"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kyQS
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uk27N
                            )}
                          >
                            {"Total Page Views:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oapri
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.getProperties.data.find(
                                    entry =>
                                      entry.address1 === $state.select8.value
                                  ).pageViews;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c3Evr
                            )}
                          >
                            {"Filter"}
                          </div>
                          <AntdSelect
                            data-plasmic-name={"select4"}
                            data-plasmic-override={overrides.select4}
                            className={classNames(
                              "__wab_instance",
                              sty.select4
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            defaultValue={7}
                            onChange={generateStateOnChangeProp($state, [
                              "select4",
                              "value"
                            ])}
                            options={(() => {
                              try {
                                return [
                                  {
                                    label: "This Week",
                                    value: 7
                                  },
                                  {
                                    label: "Last 30 Days",
                                    value: 30
                                  },
                                  {
                                    label: "Last 90 Days",
                                    value: 90
                                  },
                                  {
                                    label: "Last 6 Months",
                                    value: 180
                                  },
                                  {
                                    label: "Last 12 Months",
                                    value: 365
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [
                                    {
                                      value: "option1",
                                      label: "Option 1",
                                      type: "option"
                                    },
                                    {
                                      value: "option2",
                                      label: "Option 2",
                                      type: "option"
                                    }
                                  ];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={"Select..."}
                            popupScopeClassName={sty["select4__popup"]}
                            value={generateStateValueProp($state, [
                              "select4",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table4),
                          data: (() => {
                            try {
                              return (() => {
                                const propid = $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id;
                                return $queries.getLogs.data.filter(
                                  entry => entry.propId == propid
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", isHidden: null },
                              {
                                key: "created_at",
                                fieldId: "created_at",
                                disableSorting: null,
                                title: null,
                                dataType: null
                              },
                              {
                                key: "clientId",
                                fieldId: "clientId",
                                isHidden: null
                              },
                              {
                                key: "propId",
                                fieldId: "propId",
                                isHidden: null
                              },
                              {
                                key: "type",
                                fieldId: "type",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "description",
                                fieldId: "description",
                                title: null,
                                disableSorting: null
                              },
                              { key: "admin", fieldId: "admin", isHidden: null }
                            ];
                            __composite["0"]["isHidden"] = true;
                            __composite["1"]["disableSorting"] = false;
                            __composite["1"]["title"] = "Date Time";
                            __composite["1"]["dataType"] = "datetime";
                            __composite["2"]["isHidden"] = true;
                            __composite["3"]["isHidden"] = true;
                            __composite["4"]["title"] = "Type";
                            __composite["4"]["disableSorting"] = true;
                            __composite["5"]["title"] = "Description";
                            __composite["5"]["disableSorting"] = true;
                            __composite["6"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table4", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table4", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table4", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table4", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: 9,
                          pagination: (() => {
                            try {
                              return (() => {
                                const propid = $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id;
                                return (
                                  $queries.getLogs.data.filter(
                                    entry => entry.propId == propid
                                  ).length > 10
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          scopeClassName: sty["table4__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table4",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table4",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table4.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table4.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table4.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table4.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table4"}
                            data-plasmic-override={overrides.table4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </section>
                  ) : null}
                  {(() => {
                    try {
                      return $state.radioGroup?.value == "3";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__o8Bld)}
                    />
                  ) : null}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "drawerNotifications",
    "card",
    "drawerSupport",
    "embedHtml",
    "modal2",
    "input",
    "select10",
    "input14",
    "input15",
    "input16",
    "input17",
    "input23",
    "input24",
    "input25",
    "input26",
    "table",
    "select8",
    "radioGroup",
    "modal",
    "form4",
    "drawer",
    "iframe",
    "img",
    "columns",
    "table3",
    "table2",
    "chart",
    "select4",
    "table4"
  ],
  h1: ["h1"],
  drawerNotifications: ["drawerNotifications", "card"],
  card: ["card"],
  drawerSupport: ["drawerSupport", "embedHtml"],
  embedHtml: ["embedHtml"],
  modal2: [
    "modal2",
    "input",
    "select10",
    "input14",
    "input15",
    "input16",
    "input17",
    "input23",
    "input24",
    "input25",
    "input26"
  ],
  input: ["input"],
  select10: ["select10"],
  input14: ["input14"],
  input15: ["input15"],
  input16: ["input16"],
  input17: ["input17"],
  input23: ["input23"],
  input24: ["input24"],
  input25: ["input25"],
  input26: ["input26"],
  table: ["table"],
  select8: ["select8"],
  radioGroup: ["radioGroup"],
  modal: ["modal", "form4"],
  form4: ["form4"],
  drawer: ["drawer", "iframe"],
  iframe: ["iframe"],
  img: ["img"],
  columns: ["columns"],
  table3: ["table3"],
  table2: ["table2"],
  chart: ["chart"],
  select4: ["select4"],
  table4: ["table4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  drawerNotifications: typeof DrawerBuyLeads;
  card: typeof Card;
  drawerSupport: typeof DrawerBuyLeads;
  embedHtml: typeof Embed;
  modal2: typeof AntdModal;
  input: typeof AntdInput;
  select10: typeof AntdSelect;
  input14: typeof AntdInput;
  input15: typeof AntdInput;
  input16: typeof AntdInput;
  input17: typeof AntdInput;
  input23: typeof AntdInput;
  input24: typeof AntdInput;
  input25: typeof AntdInput;
  input26: typeof AntdInput;
  table: typeof RichTable;
  select8: typeof AntdSelect;
  radioGroup: typeof AntdRadioGroup;
  modal: typeof AntdModal;
  form4: typeof FormWrapper;
  drawer: typeof Drawer;
  iframe: typeof Iframe;
  img: typeof PlasmicImg__;
  columns: "div";
  table3: typeof RichTable;
  table2: typeof RichTable;
  chart: typeof SimpleChart;
  select4: typeof AntdSelect;
  table4: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminDash__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminDash__VariantsArgs;
    args?: PlasmicAdminDash__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminDash__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminDash__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminDash__ArgProps,
          internalVariantPropNames: PlasmicAdminDash__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminDash__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminDash";
  } else {
    func.displayName = `PlasmicAdminDash.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "tkmnpDqLBPFkHbb2kiGN2p"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAdminDash = Object.assign(
  // Top-level PlasmicAdminDash renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    drawerNotifications: makeNodeComponent("drawerNotifications"),
    card: makeNodeComponent("card"),
    drawerSupport: makeNodeComponent("drawerSupport"),
    embedHtml: makeNodeComponent("embedHtml"),
    modal2: makeNodeComponent("modal2"),
    input: makeNodeComponent("input"),
    select10: makeNodeComponent("select10"),
    input14: makeNodeComponent("input14"),
    input15: makeNodeComponent("input15"),
    input16: makeNodeComponent("input16"),
    input17: makeNodeComponent("input17"),
    input23: makeNodeComponent("input23"),
    input24: makeNodeComponent("input24"),
    input25: makeNodeComponent("input25"),
    input26: makeNodeComponent("input26"),
    table: makeNodeComponent("table"),
    select8: makeNodeComponent("select8"),
    radioGroup: makeNodeComponent("radioGroup"),
    modal: makeNodeComponent("modal"),
    form4: makeNodeComponent("form4"),
    drawer: makeNodeComponent("drawer"),
    iframe: makeNodeComponent("iframe"),
    img: makeNodeComponent("img"),
    columns: makeNodeComponent("columns"),
    table3: makeNodeComponent("table3"),
    table2: makeNodeComponent("table2"),
    chart: makeNodeComponent("chart"),
    select4: makeNodeComponent("select4"),
    table4: makeNodeComponent("table4"),

    // Metadata about props expected for PlasmicAdminDash
    internalVariantProps: PlasmicAdminDash__VariantProps,
    internalArgProps: PlasmicAdminDash__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminDash;
/* prettier-ignore-end */
