// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tkmnpDqLBPFkHbb2kiGN2p
// Component: 4YRhTQq6HSy0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import DrawerBuyLeads from "../../DrawerBuyLeads"; // plasmic-import: GeIyNLTRGj3T/component
import Button from "../../Button"; // plasmic-import: otmq_-sWwXFs/component
import Card from "../../Card"; // plasmic-import: bm7RsgXbCAG4/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tkmnpDqLBPFkHbb2kiGN2p/projectcss
import sty from "./PlasmicAdminDash.module.css"; // plasmic-import: 4YRhTQq6HSy0/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: uvRS8ceWkoSL/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: zGq6elTBcOm4/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: xrjf5RPtuahF/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: dqZVEtD_E7L4/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: XEmZ_KE4kOJn/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Wfs0TLB_QHxx/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: jzV0VpeVYMS6/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: I6P2P1Q1BQMT/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: SMRr1e4nQg0g/icon

createPlasmicElementProxy;

export type PlasmicAdminDash__VariantMembers = {};
export type PlasmicAdminDash__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminDash__VariantsArgs;
export const PlasmicAdminDash__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminDash__ArgsType = {};
type ArgPropType = keyof PlasmicAdminDash__ArgsType;
export const PlasmicAdminDash__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminDash__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  drawerNotifications?: Flex__<typeof DrawerBuyLeads>;
  card?: Flex__<typeof Card>;
  drawerSupport?: Flex__<typeof DrawerBuyLeads>;
  embedHtml?: Flex__<typeof Embed>;
  modalCredit?: Flex__<typeof AntdModal>;
  modalFormCreate?: Flex__<"section">;
  form?: Flex__<typeof FormWrapper>;
  select?: Flex__<typeof AntdSelect>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  checkbox11?: Flex__<typeof AntdCheckbox>;
  modalEditCamp?: Flex__<typeof AntdModal>;
  modalFormEdit?: Flex__<"section">;
  form2?: Flex__<typeof FormWrapper>;
  switch4?: Flex__<typeof AntdSwitch>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  switch2?: Flex__<typeof AntdSwitch>;
  textarea2?: Flex__<"textarea">;
  checkboxEditStates?: Flex__<typeof AntdCheckbox>;
  checkboxEdit1?: Flex__<typeof AntdCheckbox>;
  checkboxEdit2?: Flex__<typeof AntdCheckbox>;
  checkboxEdit3?: Flex__<typeof AntdCheckbox>;
  checkboxEdit4?: Flex__<typeof AntdCheckbox>;
  checkboxEdit5?: Flex__<typeof AntdCheckbox>;
  editAttribute5?: Flex__<"div">;
  richTextEditor?: Flex__<typeof Quill>;
  textarea3?: Flex__<"textarea">;
  input7?: Flex__<typeof AntdInput>;
  modalCreateCamp?: Flex__<typeof AntdModal>;
  modalFormCreate3?: Flex__<"section">;
  form3?: Flex__<typeof FormWrapper>;
  select5?: Flex__<typeof AntdSelect>;
  input8?: Flex__<typeof AntdInput>;
  input9?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
  switch3?: Flex__<typeof AntdSwitch>;
  textarea4?: Flex__<"textarea">;
  checkboxCreateStates?: Flex__<typeof AntdCheckbox>;
  checkboxCreate1?: Flex__<typeof AntdCheckbox>;
  checkboxCreate2?: Flex__<typeof AntdCheckbox>;
  checkboxCreate3?: Flex__<typeof AntdCheckbox>;
  checkboxCreate4?: Flex__<typeof AntdCheckbox>;
  checkboxCreate5?: Flex__<typeof AntdCheckbox>;
  editAttribute52?: Flex__<"div">;
  richTextEditor2?: Flex__<typeof Quill>;
  textarea5?: Flex__<"textarea">;
  input11?: Flex__<typeof AntdInput>;
  modal2?: Flex__<typeof AntdModal>;
  input?: Flex__<typeof AntdInput>;
  select10?: Flex__<typeof AntdSelect>;
  input14?: Flex__<typeof AntdInput>;
  input15?: Flex__<typeof AntdInput>;
  input16?: Flex__<typeof AntdInput>;
  input17?: Flex__<typeof AntdInput>;
  input23?: Flex__<typeof AntdInput>;
  input24?: Flex__<typeof AntdInput>;
  input25?: Flex__<typeof AntdInput>;
  input26?: Flex__<typeof AntdInput>;
  table?: Flex__<typeof RichTable>;
  modalEditPartner?: Flex__<typeof AntdModal>;
  _switch?: Flex__<typeof AntdSwitch>;
  input12?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input13?: Flex__<typeof AntdInput>;
  select8?: Flex__<typeof AntdSelect>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  modal?: Flex__<typeof AntdModal>;
  form4?: Flex__<typeof FormWrapper>;
  img?: Flex__<typeof PlasmicImg__>;
  table3?: Flex__<typeof RichTable>;
  table2?: Flex__<typeof RichTable>;
  chart?: Flex__<typeof SimpleChart>;
  select4?: Flex__<typeof AntdSelect>;
  table4?: Flex__<typeof RichTable>;
  modalReassignLead?: Flex__<typeof AntdModal>;
  switch22?: Flex__<typeof AntdSwitch>;
  select2?: Flex__<typeof AntdSelect>;
  select3?: Flex__<typeof AntdSelect>;
  modalAddPartner?: Flex__<typeof AntdModal>;
  select6?: Flex__<typeof AntdSelect>;
  inputWh?: Flex__<typeof AntdInput>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  switch5?: Flex__<typeof AntdSwitch>;
  input20?: Flex__<typeof AntdInput>;
  inputWu?: Flex__<typeof AntdInput>;
  inputWuId?: Flex__<typeof AntdInput>;
  select9?: Flex__<typeof AntdSelect>;
  inputWc?: Flex__<typeof AntdInput>;
  inputWf?: Flex__<typeof AntdInput>;
  inputWl?: Flex__<typeof AntdInput>;
  inputWp?: Flex__<typeof AntdInput>;
  inputWe?: Flex__<typeof AntdInput>;
  inputWHnoCoamp?: Flex__<typeof AntdInput>;
  inputWHnoFir?: Flex__<typeof AntdInput>;
  inputWHnoLas?: Flex__<typeof AntdInput>;
  inputWHnoPho?: Flex__<typeof AntdInput>;
  inputWHnoEma?: Flex__<typeof AntdInput>;
  inputWUc?: Flex__<typeof AntdInput>;
  inputWUf?: Flex__<typeof AntdInput>;
  inputWUl?: Flex__<typeof AntdInput>;
  inputWUp?: Flex__<typeof AntdInput>;
  inputWUe?: Flex__<typeof AntdInput>;
  select7?: Flex__<typeof AntdSelect>;
};

export interface DefaultAdminDashProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminDash__RenderFunc(props: {
  variants: PlasmicAdminDash__VariantsArgs;
  args: PlasmicAdminDash__ArgsType;
  overrides: PlasmicAdminDash__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerNotifications.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "drawerSupport.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalCredit.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox11[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "modalEditCamp.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "switch4.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "switch2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxEditStates[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxEdit1[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxEdit2[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxEdit3[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxEdit4[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxEdit5[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "modalCreateCamp.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "switch3.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxCreateStates[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxCreate1[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxCreate2[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxCreate3[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxCreate4[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "checkboxCreate5[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "richTextEditor2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getPartners.data[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modalEditPartner.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "_switch.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const result = $queries.getProperties.data
                  .filter(
                    entry => entry.clientId === $state.table.selectedRowKey
                  )
                  .map(entry => ({
                    key: entry.address1,
                    value: entry.address1
                  }))[0];
                return result.key;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "table3.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table3.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table3.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modalReassignLead.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "switch22.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalAddPartner.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "inputWh.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "switch5.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWu.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWuId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputWc.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWf.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWl.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWe.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWHnoCoamp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWHnoFir.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWHnoLas.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWHnoPho.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWHnoEma.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWUc.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWUf.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWUl.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWUp.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputWUe.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textarea5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form4.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form4",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form4.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form4",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "table4.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table4.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table4.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table4.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 7
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).firstName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).lastName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).phone;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).address1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).city;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input25.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).state;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.hlContacts.data.response.contacts.find(
                entry => entry.id == $state.select10.value
              ).postalCode;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getPartners: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "5a127a41-be43-4c59-9a62-af4b62f253ac",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.5a127a41-be43-4c59-9a62-af4b62f253ac.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEntity: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "a3680a46-7351-437a-87b8-1f83aaf71235",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.a3680a46-7351-437a-87b8-1f83aaf71235.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getProperties: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "b5648bd3-b663-461d-b92e-92ada3324c50",
        userArgs: {
          filters: [$queries.getEntity.data[0].id]
        },
        cacheKey: `plasmic.$.b5648bd3-b663-461d-b92e-92ada3324c50.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getValuation: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "66abac06-bce2-41f2-bcf8-ba873bd50d0c",
        userArgs: {
          filters: [
            $queries.getProperties.data.find(
              entry => entry.address1 === $state.select8.value
            ).id
          ]
        },
        cacheKey: `plasmic.$.66abac06-bce2-41f2-bcf8-ba873bd50d0c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getComps: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "cf4a3a4d-4114-44ba-873e-64b55e05b9dd",
        userArgs: {
          filters: [
            (() => {
              const result = $queries.getProperties.data
                .filter(entry => entry.clientId === $state.table.selectedRowKey)
                .map(entry => ({
                  key: entry.address1,
                  value: entry.id
                }))[0];
              return result.value;
            })()
          ]
        },
        cacheKey: `plasmic.$.cf4a3a4d-4114-44ba-873e-64b55e05b9dd.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getLogs: usePlasmicDataOp(() => {
      return {
        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
        opId: "f0f8d416-1493-4e3d-b9d7-1f8e1687cd1c",
        userArgs: {
          filters: [
            $queries.getProperties.data.find(
              entry => entry.address1 === $state.select8.value
            ).id
          ]
        },
        cacheKey: `plasmic.$.f0f8d416-1493-4e3d-b9d7-1f8e1687cd1c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    hlContacts: usePlasmicDataOp(() => {
      return {
        sourceId: "9knTPZd45SqznZtYFyLRwH",
        opId: "0e080647-501b-4e47-9e13-6ea48e269381",
        userArgs: {
          params: [
            $queries.getEntity.data[0].AgencyLocationId,
            $state.input.value
          ],
          headers: [$queries.getEntity.data[0].hl_api_key]
        },
        cacheKey: `plasmic.$.0e080647-501b-4e47-9e13-6ea48e269381.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nv8Sh)}>
            <div className={classNames(projectcss.all, sty.freeBox__ckhqa)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"RE Dash"}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox__dZabp)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__zqq9R)}
                  href={(() => {
                    try {
                      return (
                        "/leads-a" + "?locationid=" + $ctx.query.locationid
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iznon
                    )}
                  >
                    {"Leads"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__uizr1)}
                  href={"/campaigns-a" + "?locationid=" + $ctx.query.locationid}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q70BS
                    )}
                  >
                    {"Campaigns"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__yuTpn)}
                  href={(() => {
                    try {
                      return (
                        "/accounts-a" + "?locationid=" + $ctx.query.locationid
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  size={"large"}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wWmJx
                    )}
                  >
                    {"Accounts"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button___4L5QL)}
                  href={(() => {
                    try {
                      return (
                        "/settings-a" + "?locationid=" + $ctx.query.locationid
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ilxWw
                    )}
                  >
                    {"Settings"}
                  </div>
                </AntdButton>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___7XwnI)}>
                <DrawerBuyLeads
                  data-plasmic-name={"drawerNotifications"}
                  data-plasmic-override={overrides.drawerNotifications}
                  className={classNames(
                    "__wab_instance",
                    sty.drawerNotifications
                  )}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "drawerNotifications",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "drawerNotifications",
                    "open"
                  ])}
                  slot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rf5Xt)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        []
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Card
                            data-plasmic-name={"card"}
                            data-plasmic-override={overrides.card}
                            className={classNames("__wab_instance", sty.card)}
                            key={currentIndex}
                            title={
                              <React.Fragment>
                                <Icon7Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ok5Gj
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rCg48
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gi7D9
                                    )}
                                  >
                                    {""}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___92VRs
                                    )}
                                  >
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__mmc3J
                                      )}
                                      type={"primary"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__z78Mk
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.ActionText;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Button";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </AntdButton>
                                  </div>
                                  <Icon8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___9KKvD
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </React.Fragment>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kge4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kyusf
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.ErrorText;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "something here";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return currentItem.ErrorText.includes(
                                    "uted Lead-"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__jfCfH
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bvIk9
                                    )}
                                  >
                                    {"Deny"}
                                  </div>
                                </AntdButton>
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.ErrorText.includes(
                                    "Issue with Partner"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__d3S9H
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ryRab
                                    )}
                                  >
                                    {"Post"}
                                  </div>
                                </AntdButton>
                              ) : null}
                            </div>
                          </Card>
                        );
                      })}
                    </Stack__>
                  }
                  trigger={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__f7LvZ
                      )}
                      color={"clear"}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__ysNQ)}
                        role={"img"}
                      />

                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__kKEs0)}
                        role={"img"}
                      />
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dWeV
                    )}
                  >
                    {"Notifications"}
                  </div>
                </DrawerBuyLeads>
                <DrawerBuyLeads
                  data-plasmic-name={"drawerSupport"}
                  data-plasmic-override={overrides.drawerSupport}
                  className={classNames("__wab_instance", sty.drawerSupport)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "drawerSupport",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "drawerSupport",
                    "open"
                  ])}
                  slot={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___5E6W)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bx5Qk
                        )}
                      >
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__hl9Bk)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___3AnmV
                          )}
                          component={Link}
                          href={
                            "https://app.slack.com/client/T0781CQJGAX/C078418AQ3E"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Support on Slack"}
                        </PlasmicLink__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ecg54
                        )}
                      >
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__bqXh)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__gLR3
                          )}
                          component={Link}
                          href={
                            "https://crmappmarketplace.notion.site/Lead-Distribution-Docs-1e1d1b76c6ef44bb923b54f595839d8d?pvs=4"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Documentation"}
                        </PlasmicLink__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ytAd
                        )}
                      >
                        <Icon11Icon
                          className={classNames(projectcss.all, sty.svg__env6K)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__axjs
                          )}
                          component={Link}
                          href={
                            "https://leaddistribution.canny.io/feature-requests"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {"Feature Request"}
                        </PlasmicLink__>
                      </div>
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<script src="https://static.elfsight.com/platform/platform.js" data-use-service-core defer></script>\n<div class="elfsight-app-e8972927-bc21-4f55-a0b2-f894260bda47" data-elfsight-app-lazy></div>'
                        }
                      />
                    </Stack__>
                  }
                  trigger={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__mz7AE
                      )}
                      color={"clear"}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__ih5Dm)}
                          role={"img"}
                        />
                      ) : null}
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sIbWt
                    )}
                  >
                    {"Support"}
                  </div>
                </DrawerBuyLeads>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hCiay)}>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__y7Zu4)}
                  size={"large"}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dx50Y
                    )}
                  >
                    {"Dashboard"}
                  </div>
                </AntdButton>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__okJxu)}
                  href={`/adminsettings`}
                  size={"large"}
                  type={"default"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1L9Uy
                    )}
                  >
                    {"Settings"}
                  </div>
                </AntdButton>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modalCredit"}
              data-plasmic-override={overrides.modalCredit}
              className={classNames("__wab_instance", sty.modalCredit)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modalCredit__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modalCredit",
                "open"
              ])}
              open={generateStateValueProp($state, ["modalCredit", "open"])}
              title={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m3KNf
                    )}
                  >
                    {"Add Credit"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wHuqa
                    )}
                  >
                    {
                      "This will not charge the Partner, it will only add Lead Credit to their Wallet"
                    }
                  </div>
                </React.Fragment>
              }
              trigger={
                <AntdButton
                  className={classNames("__wab_instance", sty.button__rWDyZ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__maol
                    )}
                  >
                    {"Show modal"}
                  </div>
                </AntdButton>
              }
              width={"50%"}
            >
              <section
                data-plasmic-name={"modalFormCreate"}
                data-plasmic-override={overrides.modalFormCreate}
                className={classNames(projectcss.all, sty.modalFormCreate)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: (() => {
                      const __composite = { span: 16, horizontalOnly: null };
                      __composite["horizontalOnly"] = true;
                      return __composite;
                    })()
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lo8Mp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__js5YG
                          )}
                        >
                          {"Partner"}
                        </div>
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          allowClear={true}
                          className={classNames("__wab_instance", sty.select)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ])}
                          options={[
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ]}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__u1J4Q
                              )}
                            >
                              {"Select..."}
                            </div>
                          }
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__s0Tt
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pawFg
                          )}
                        >
                          {"Amount"}
                        </div>
                        <AntdInputNumber
                          data-plasmic-name={"numberInput"}
                          data-plasmic-override={overrides.numberInput}
                          className={classNames(
                            "__wab_instance",
                            sty.numberInput
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "numberInput",
                            "value"
                          ])}
                          placeholder={"$"}
                          type={"number"}
                          value={generateStateValueProp($state, [
                            "numberInput",
                            "value"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2EFtj
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          []
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (() => {
                            const child$Props = {
                              checked: generateStateValueProp($state, [
                                "checkbox11",
                                __plasmic_idx_0,
                                "checked"
                              ]),
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox11
                              ),
                              key: currentIndex,
                              onChange: generateStateOnChangeProp($state, [
                                "checkbox11",
                                __plasmic_idx_0,
                                "checked"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "checked",
                                  plasmicStateName: "checkbox11[].checked"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox11[].checked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdCheckbox
                                data-plasmic-name={"checkbox11"}
                                data-plasmic-override={overrides.checkbox11}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___20LvD
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.label;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Checkbox";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </AntdCheckbox>
                            );
                          })();
                        })}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sgqYh
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__oQghl
                          )}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1L6ZU
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                      </div>
                    </FormWrapper>
                  );
                })()}
              </section>
            </AntdModal>
            <AntdModal
              data-plasmic-name={"modalEditCamp"}
              data-plasmic-override={overrides.modalEditCamp}
              className={classNames("__wab_instance", sty.modalEditCamp)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modalEditCamp__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modalEditCamp",
                "open"
              ])}
              open={generateStateValueProp($state, ["modalEditCamp", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___70NEk
                  )}
                >
                  {"Edit Campaign"}
                </div>
              }
              trigger={
                <AntdButton
                  className={classNames("__wab_instance", sty.button__zcieO)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hVrv
                    )}
                  >
                    {"Show modal"}
                  </div>
                </AntdButton>
              }
              width={"50%"}
            >
              <section
                data-plasmic-name={"modalFormEdit"}
                data-plasmic-override={overrides.modalFormEdit}
                className={classNames(projectcss.all, sty.modalFormEdit)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: (() => {
                      const __composite = { span: 16, horizontalOnly: null };
                      __composite["horizontalOnly"] = true;
                      return __composite;
                    })()
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kaDqS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yn528
                          )}
                        >
                          {"Active"}
                        </div>
                        <AntdSwitch
                          data-plasmic-name={"switch4"}
                          data-plasmic-override={overrides.switch4}
                          checked={generateStateValueProp($state, [
                            "switch4",
                            "checked"
                          ])}
                          className={classNames("__wab_instance", sty.switch4)}
                          onChange={generateStateOnChangeProp($state, [
                            "switch4",
                            "checked"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qc3JE
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sougE
                          )}
                        >
                          {"Campaign Name"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input4),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input4", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input4",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input4.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input4"}
                              data-plasmic-override={overrides.input4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aEwg0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kEoqn
                          )}
                        >
                          {"Leads Per Day"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input5),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input5", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            type: "number",
                            value: generateStateValueProp($state, [
                              "input5",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input5.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input5"}
                              data-plasmic-override={overrides.input5}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dbeAe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wbKHe
                          )}
                        >
                          {"Price"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input6),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input6", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            type: "number",
                            value: generateStateValueProp($state, [
                              "input6",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input6.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input6"}
                              data-plasmic-override={overrides.input6}
                              {...child$Props}
                            />
                          );
                        })()}
                        <AntdSwitch
                          data-plasmic-name={"switch2"}
                          data-plasmic-override={overrides.switch2}
                          checked={generateStateValueProp($state, [
                            "switch2",
                            "checked"
                          ])}
                          className={classNames("__wab_instance", sty.switch2)}
                          onChange={generateStateOnChangeProp($state, [
                            "switch2",
                            "checked"
                          ])}
                        />

                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__nEgpU
                          )}
                          titleText={
                            'Advanced: If you need to dynamically change price by  input via the workflow. Keep  set to "Price from Campaign" by default'
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4ChVl
                            )}
                          >
                            {""}
                          </div>
                        </AntdTooltip>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sLyMd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yOfzs
                          )}
                        >
                          {"Zip Codes"}
                        </div>
                        <textarea
                          data-plasmic-name={"textarea2"}
                          data-plasmic-override={overrides.textarea2}
                          className={classNames(
                            projectcss.all,
                            projectcss.textarea,
                            sty.textarea2
                          )}
                          onChange={e => {
                            generateStateOnChangeProp($state, [
                              "textarea2",
                              "value"
                            ])(e.target.value);
                          }}
                          placeholder={
                            'Zip codes separated by  "," Ex. 32666, 84606'
                          }
                          ref={ref => {
                            $refs["textarea2"] = ref;
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textarea2",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yrEg8
                        )}
                      >
                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__uzSl7
                          )}
                          titleText={"Any specific zip codes (if applicable)"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zsM2N
                            )}
                          >
                            {"States"}
                          </div>
                        </AntdTooltip>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rb9QF
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  {
                                    key: "alabama",
                                    label: "Alabama"
                                  },
                                  {
                                    key: "alaska",
                                    label: "Alaska"
                                  },
                                  {
                                    key: "arizona",
                                    label: "Arizona"
                                  },
                                  {
                                    key: "arkansas",
                                    label: "Arkansas"
                                  },
                                  {
                                    key: "california",
                                    label: "California"
                                  },
                                  {
                                    key: "colorado",
                                    label: "Colorado"
                                  },
                                  {
                                    key: "connecticut",
                                    label: "Connecticut"
                                  },
                                  {
                                    key: "delaware",
                                    label: "Delaware"
                                  },
                                  {
                                    key: "florida",
                                    label: "Florida"
                                  },
                                  {
                                    key: "georgia",
                                    label: "Georgia"
                                  },
                                  {
                                    key: "hawaii",
                                    label: "Hawaii"
                                  },
                                  {
                                    key: "idaho",
                                    label: "Idaho"
                                  },
                                  {
                                    key: "illinois",
                                    label: "Illinois"
                                  },
                                  {
                                    key: "indiana",
                                    label: "Indiana"
                                  },
                                  {
                                    key: "iowa",
                                    label: "Iowa"
                                  },
                                  {
                                    key: "kansas",
                                    label: "Kansas"
                                  },
                                  {
                                    key: "kentucky",
                                    label: "Kentucky"
                                  },
                                  {
                                    key: "louisiana",
                                    label: "Louisiana"
                                  },
                                  {
                                    key: "maine",
                                    label: "Maine"
                                  },
                                  {
                                    key: "maryland",
                                    label: "Maryland"
                                  },
                                  {
                                    key: "massachusetts",
                                    label: "Massachusetts"
                                  },
                                  {
                                    key: "michigan",
                                    label: "Michigan"
                                  },
                                  {
                                    key: "minnesota",
                                    label: "Minnesota"
                                  },
                                  {
                                    key: "mississippi",
                                    label: "Mississippi"
                                  },
                                  {
                                    key: "missouri",
                                    label: "Missouri"
                                  },
                                  {
                                    key: "montana",
                                    label: "Montana"
                                  },
                                  {
                                    key: "nebraska",
                                    label: "Nebraska"
                                  },
                                  {
                                    key: "nevada",
                                    label: "Nevada"
                                  },
                                  {
                                    key: "new_hampshire",
                                    label: "New Hampshire"
                                  },
                                  {
                                    key: "new_jersey",
                                    label: "New Jersey"
                                  },
                                  {
                                    key: "new_mexico",
                                    label: "New Mexico"
                                  },
                                  {
                                    key: "new_york",
                                    label: "New York"
                                  },
                                  {
                                    key: "north_carolina",
                                    label: "North Carolina"
                                  },
                                  {
                                    key: "north_dakota",
                                    label: "North Dakota"
                                  },
                                  {
                                    key: "ohio",
                                    label: "Ohio"
                                  },
                                  {
                                    key: "oklahoma",
                                    label: "Oklahoma"
                                  },
                                  {
                                    key: "oregon",
                                    label: "Oregon"
                                  },
                                  {
                                    key: "pennsylvania",
                                    label: "Pennsylvania"
                                  },
                                  {
                                    key: "rhode_island",
                                    label: "Rhode Island"
                                  },
                                  {
                                    key: "south_carolina",
                                    label: "South Carolina"
                                  },
                                  {
                                    key: "south_dakota",
                                    label: "South Dakota"
                                  },
                                  {
                                    key: "tennessee",
                                    label: "Tennessee"
                                  },
                                  {
                                    key: "texas",
                                    label: "Texas"
                                  },
                                  {
                                    key: "utah",
                                    label: "Utah"
                                  },
                                  {
                                    key: "vermont",
                                    label: "Vermont"
                                  },
                                  {
                                    key: "virginia",
                                    label: "Virginia"
                                  },
                                  {
                                    key: "washington",
                                    label: "Washington"
                                  },
                                  {
                                    key: "west_virginia",
                                    label: "West Virginia"
                                  },
                                  {
                                    key: "wisconsin",
                                    label: "Wisconsin"
                                  },
                                  {
                                    key: "wyoming",
                                    label: "Wyoming"
                                  },
                                  {
                                    key: "dc",
                                    label: "District of Colombia"
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxEditStates",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxEditStates
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxEditStates",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxEditStates[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxEditStates[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxEditStates"}
                                  data-plasmic-override={
                                    overrides.checkboxEditStates
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uXnYs
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qdFhm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fvFbz
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__geye5
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxEdit1",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxEdit1
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxEdit1",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "checkboxEdit1[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxEdit1[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxEdit1"}
                                  data-plasmic-override={
                                    overrides.checkboxEdit1
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eT4D
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zjLCo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mc6FO
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0B9Hn
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxEdit2",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxEdit2
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxEdit2",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "checkboxEdit2[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxEdit2[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxEdit2"}
                                  data-plasmic-override={
                                    overrides.checkboxEdit2
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cIt1
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2VYnd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mgSPf
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wuXz3
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxEdit3",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxEdit3
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxEdit3",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "checkboxEdit3[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxEdit3[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxEdit3"}
                                  data-plasmic-override={
                                    overrides.checkboxEdit3
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lzWn
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lfvpm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g18Fx
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bdsU
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxEdit4",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxEdit4
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxEdit4",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "checkboxEdit4[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxEdit4[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxEdit4"}
                                  data-plasmic-override={
                                    overrides.checkboxEdit4
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tPw4I
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nGljA
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qaOgn
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pJh9E
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxEdit5",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxEdit5
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxEdit5",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "checkboxEdit5[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxEdit5[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxEdit5"}
                                  data-plasmic-override={
                                    overrides.checkboxEdit5
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qFhDh
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.freeBox__bvY)}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__wtJxj
                          )}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lNaok
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pgTBb
                        )}
                      >
                        <div
                          data-plasmic-name={"editAttribute5"}
                          data-plasmic-override={overrides.editAttribute5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.editAttribute5
                          )}
                        >
                          {""}
                        </div>
                        {(() => {
                          const child$Props = {
                            containerClassName: classNames(
                              "__wab_instance",
                              sty.richTextEditor
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["richTextEditor", "value"],
                                Quill_Helpers
                              ),
                            preserveWhitespace: true,
                            readOnly: false,
                            toolbar: {
                              textStyle: [
                                "bold",
                                "italic",
                                "underline",
                                "strikethrough"
                              ],
                              colors: ["text color", "text background"],
                              script: true,
                              fontFamily: true,
                              heading: [
                                "Heading 1",
                                "Heading 2",
                                "Heading 3",
                                "Heading 4",
                                "Heading 5",
                                "Heading 6",
                                "Body"
                              ],
                              fontSizes: ["small", "medium", "large", "huge"],
                              formatting: [
                                "alignment",
                                "list",
                                "indentation",
                                "text direction",
                                "clear formatting"
                              ],
                              inputTypes: [
                                "link",
                                "blockquote",
                                "image",
                                "video",
                                "code-block",
                                "formula"
                              ]
                            },
                            value: generateStateValueProp($state, [
                              "richTextEditor",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "richTextEditor.value"
                              }
                            ],
                            [],
                            Quill_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <Quill
                              data-plasmic-name={"richTextEditor"}
                              data-plasmic-override={overrides.richTextEditor}
                              {...child$Props}
                            />
                          );
                        })()}
                        <textarea
                          data-plasmic-name={"textarea3"}
                          data-plasmic-override={overrides.textarea3}
                          className={classNames(
                            projectcss.all,
                            projectcss.textarea,
                            sty.textarea3
                          )}
                          onChange={e => {
                            generateStateOnChangeProp($state, [
                              "textarea3",
                              "value"
                            ])(e.target.value);
                          }}
                          ref={ref => {
                            $refs["textarea3"] = ref;
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textarea3",
                              "value"
                            ]) ?? ""
                          }
                        />

                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input7),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input7", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input7",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input7.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input7"}
                              data-plasmic-override={overrides.input7}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </FormWrapper>
                  );
                })()}
              </section>
            </AntdModal>
            <AntdModal
              data-plasmic-name={"modalCreateCamp"}
              data-plasmic-override={overrides.modalCreateCamp}
              className={classNames("__wab_instance", sty.modalCreateCamp)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modalCreateCamp__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modalCreateCamp",
                "open"
              ])}
              open={generateStateValueProp($state, ["modalCreateCamp", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vehTq
                  )}
                >
                  {"Create Campaign"}
                </div>
              }
              trigger={
                <AntdButton
                  className={classNames("__wab_instance", sty.button__n5F)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i5A5Q
                    )}
                  >
                    {"Show modal"}
                  </div>
                </AntdButton>
              }
              width={"50%"}
            >
              <section
                data-plasmic-name={"modalFormCreate3"}
                data-plasmic-override={overrides.modalFormCreate3}
                className={classNames(projectcss.all, sty.modalFormCreate3)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form3),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form3", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form3", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form3"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: (() => {
                      const __composite = { span: 16, horizontalOnly: null };
                      __composite["horizontalOnly"] = true;
                      return __composite;
                    })()
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form3.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form3.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form3"}
                      data-plasmic-override={overrides.form3}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tC0Xp
                        )}
                      >
                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__dV28F
                          )}
                          titleText={"A name to identify the campaign"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c96De
                            )}
                          >
                            {"Partner"}
                          </div>
                        </AntdTooltip>
                        <AntdSelect
                          data-plasmic-name={"select5"}
                          data-plasmic-override={overrides.select5}
                          allowClear={true}
                          className={classNames("__wab_instance", sty.select5)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "select5",
                            "value"
                          ])}
                          options={[
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ]}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zq4Ge
                              )}
                            >
                              {"Select..."}
                            </div>
                          }
                          popupScopeClassName={sty["select5__popup"]}
                          showSearch={true}
                          value={generateStateValueProp($state, [
                            "select5",
                            "value"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bZeA6
                        )}
                      >
                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__cgIxf
                          )}
                          titleText={"A name to identify the campaign"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6E17G
                            )}
                          >
                            {"Campaign Name"}
                          </div>
                        </AntdTooltip>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input8),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input8", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input8",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input8.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input8"}
                              data-plasmic-override={overrides.input8}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o8Z4
                        )}
                      >
                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__ytTqL
                          )}
                          titleText={"How many leads to receive per day "}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oAful
                            )}
                          >
                            {"Leads Per Day"}
                          </div>
                        </AntdTooltip>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input9),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input9", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            type: "number",
                            value: generateStateValueProp($state, [
                              "input9",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input9.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input9"}
                              data-plasmic-override={overrides.input9}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ks1Ed
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__do0Ss
                          )}
                        >
                          {"Price"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input10
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input10", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            type: "number",
                            value: generateStateValueProp($state, [
                              "input10",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input10.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input10"}
                              data-plasmic-override={overrides.input10}
                              {...child$Props}
                            />
                          );
                        })()}
                        <AntdSwitch
                          data-plasmic-name={"switch3"}
                          data-plasmic-override={overrides.switch3}
                          checked={generateStateValueProp($state, [
                            "switch3",
                            "checked"
                          ])}
                          className={classNames("__wab_instance", sty.switch3)}
                          onChange={generateStateOnChangeProp($state, [
                            "switch3",
                            "checked"
                          ])}
                        />

                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__oKf2
                          )}
                          titleText={
                            'Advanced: If you need to dynamically change price by  input via the workflow. Keep  set to "Price from Campaign" by default'
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y1UqX
                            )}
                          >
                            {""}
                          </div>
                        </AntdTooltip>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fqf9B
                        )}
                      >
                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__eWjGm
                          )}
                          titleText={"Any specific zip codes (if applicable)"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5P1Aw
                            )}
                          >
                            {"Postal Code"}
                          </div>
                        </AntdTooltip>
                        <textarea
                          data-plasmic-name={"textarea4"}
                          data-plasmic-override={overrides.textarea4}
                          className={classNames(
                            projectcss.all,
                            projectcss.textarea,
                            sty.textarea4
                          )}
                          onChange={e => {
                            generateStateOnChangeProp($state, [
                              "textarea4",
                              "value"
                            ])(e.target.value);
                          }}
                          placeholder={
                            'Postal codes separated by  "," Ex. 32666, 84606'
                          }
                          ref={ref => {
                            $refs["textarea4"] = ref;
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textarea4",
                              "value"
                            ]) ?? ""
                          }
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lOfVq
                        )}
                      >
                        <AntdTooltip
                          className={classNames(
                            "__wab_instance",
                            sty.tooltip__rRjxD
                          )}
                          titleText={"Any specific zip codes (if applicable)"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nLb7X
                            )}
                          >
                            {"States"}
                          </div>
                        </AntdTooltip>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__u3Tqy
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxCreateStates",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxCreateStates
                                ),
                                defaultChecked: false,
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxCreateStates",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxCreateStates[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxCreateStates[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      false
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxCreateStates"}
                                  data-plasmic-override={
                                    overrides.checkboxCreateStates
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__k3Efa
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mdFgk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uSkDd
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c41K6
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxCreate1",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxCreate1
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxCreate1",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxCreate1[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxCreate1[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxCreate1"}
                                  data-plasmic-override={
                                    overrides.checkboxCreate1
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gtkTo
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r8Mew
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___93SM7
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ezoex
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxCreate2",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxCreate2
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxCreate2",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxCreate2[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxCreate2[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxCreate2"}
                                  data-plasmic-override={
                                    overrides.checkboxCreate2
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iwhee
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kAcc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ikkLn
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iYu23
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxCreate3",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxCreate3
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxCreate3",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxCreate3[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxCreate3[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxCreate3"}
                                  data-plasmic-override={
                                    overrides.checkboxCreate3
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vzoIv
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2Lha6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dpIzH
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yVjZc
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxCreate4",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxCreate4
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxCreate4",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxCreate4[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxCreate4[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxCreate4"}
                                  data-plasmic-override={
                                    overrides.checkboxCreate4
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jzzbE
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__btmAh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j8SXk
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yu263
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            []
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "checkboxCreate5",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.checkboxCreate5
                                ),
                                key: currentIndex,
                                onChange: generateStateOnChangeProp($state, [
                                  "checkboxCreate5",
                                  __plasmic_idx_0,
                                  "checked"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName:
                                      "checkboxCreate5[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkboxCreate5[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      undefined
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdCheckbox
                                  data-plasmic-name={"checkboxCreate5"}
                                  data-plasmic-override={
                                    overrides.checkboxCreate5
                                  }
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lwkeF
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Checkbox";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </AntdCheckbox>
                              );
                            })();
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dcDbb
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button___5P6P
                          )}
                          ghost={false}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eh0Ho
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nJw0N
                        )}
                      >
                        <div
                          data-plasmic-name={"editAttribute52"}
                          data-plasmic-override={overrides.editAttribute52}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.editAttribute52
                          )}
                        >
                          {""}
                        </div>
                        {(() => {
                          const child$Props = {
                            containerClassName: classNames(
                              "__wab_instance",
                              sty.richTextEditor2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["richTextEditor2", "value"],
                                Quill_Helpers
                              ),
                            preserveWhitespace: true,
                            readOnly: false,
                            toolbar: {
                              textStyle: [
                                "bold",
                                "italic",
                                "underline",
                                "strikethrough"
                              ],
                              colors: ["text color", "text background"],
                              script: true,
                              fontFamily: true,
                              heading: [
                                "Heading 1",
                                "Heading 2",
                                "Heading 3",
                                "Heading 4",
                                "Heading 5",
                                "Heading 6",
                                "Body"
                              ],
                              fontSizes: ["small", "medium", "large", "huge"],
                              formatting: [
                                "alignment",
                                "list",
                                "indentation",
                                "text direction",
                                "clear formatting"
                              ],
                              inputTypes: [
                                "link",
                                "blockquote",
                                "image",
                                "video",
                                "code-block",
                                "formula"
                              ]
                            },
                            value: generateStateValueProp($state, [
                              "richTextEditor2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "richTextEditor2.value"
                              }
                            ],
                            [],
                            Quill_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <Quill
                              data-plasmic-name={"richTextEditor2"}
                              data-plasmic-override={overrides.richTextEditor2}
                              {...child$Props}
                            />
                          );
                        })()}
                        <textarea
                          data-plasmic-name={"textarea5"}
                          data-plasmic-override={overrides.textarea5}
                          className={classNames(
                            projectcss.all,
                            projectcss.textarea,
                            sty.textarea5
                          )}
                          onChange={e => {
                            generateStateOnChangeProp($state, [
                              "textarea5",
                              "value"
                            ])(e.target.value);
                          }}
                          ref={ref => {
                            $refs["textarea5"] = ref;
                          }}
                          value={
                            generateStateValueProp($state, [
                              "textarea5",
                              "value"
                            ]) ?? ""
                          }
                        />

                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input11
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input11", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input11",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input11.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input11"}
                              data-plasmic-override={overrides.input11}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </FormWrapper>
                  );
                })()}
              </section>
            </AntdModal>
            <div className={classNames(projectcss.all, sty.freeBox___5Dp7Z)}>
              <div className={classNames(projectcss.all, sty.freeBox___8ODfG)}>
                <div className={classNames(projectcss.all, sty.freeBox__open9)}>
                  <AntdModal
                    data-plasmic-name={"modal2"}
                    data-plasmic-override={overrides.modal2}
                    className={classNames("__wab_instance", sty.modal2)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["modal2__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modal2",
                      "open"
                    ])}
                    open={generateStateValueProp($state, ["modal2", "open"])}
                    title={"Add New Client"}
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__iebur
                        )}
                        type={"default"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wiInz
                          )}
                        >
                          {"Add New Client"}
                        </div>
                      </AntdButton>
                    }
                    width={"600"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iEf4G)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jWpzq
                        )}
                      >
                        {
                          'Enter a search term for the contact you want to find then "Search"'
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dtyJ
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__r5AYr
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["refreshData"] = true
                              ? (() => {
                                  const actionArgs = {
                                    queryInvalidation: [
                                      "0e080647-501b-4e47-9e13-6ea48e269381"
                                    ]
                                  };
                                  return (async ({ queryInvalidation }) => {
                                    if (!queryInvalidation) {
                                      return;
                                    }
                                    await plasmicInvalidate(queryInvalidation);
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["refreshData"] != null &&
                              typeof $steps["refreshData"] === "object" &&
                              typeof $steps["refreshData"].then === "function"
                            ) {
                              $steps["refreshData"] = await $steps[
                                "refreshData"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aDlk
                            )}
                          >
                            {"Search"}
                          </div>
                        </AntdButton>
                        <AntdSelect
                          data-plasmic-name={"select10"}
                          data-plasmic-override={overrides.select10}
                          allowClear={true}
                          className={classNames("__wab_instance", sty.select10)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "select10",
                            "value"
                          ])}
                          options={(() => {
                            try {
                              return (() => {
                                return $queries.hlContacts.data.response
                                  .contacts.length === 0
                                  ? [
                                      {
                                        key: "No Contact Found",
                                        value: "No Contact Found"
                                      }
                                    ]
                                  : $queries.hlContacts.data.response.contacts.map(
                                      entry => ({
                                        label: entry.contactName,
                                        value: entry.id
                                      })
                                    );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [
                                  {
                                    value: "option1",
                                    label: "Option 1",
                                    type: "option"
                                  },
                                  {
                                    value: "option2",
                                    label: "Option 2",
                                    type: "option"
                                  }
                                ];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select10__popup"]}
                          value={generateStateValueProp($state, [
                            "select10",
                            "value"
                          ])}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.select10.value != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cd5IC
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hWoXl
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uFjz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tiEwP
                                )}
                              >
                                {"First Name"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input14
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input14", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input14",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input14.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input14"}
                                    data-plasmic-override={overrides.input14}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oCf6Y
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9KMfO
                                )}
                              >
                                {"Last Name"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input15
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input15", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input15",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input15.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input15"}
                                    data-plasmic-override={overrides.input15}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__d7HJm
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__esPwf
                                )}
                              >
                                {"Phone"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input16
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input16", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input16",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input16.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input16"}
                                    data-plasmic-override={overrides.input16}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eFl52
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___41GR4
                                )}
                              >
                                {"Email"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input17
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input17", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input17",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input17.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input17"}
                                    data-plasmic-override={overrides.input17}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ypSac
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dE5I6
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__czuMw
                                )}
                              >
                                {"Address"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input23
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input23", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input23",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input23.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input23"}
                                    data-plasmic-override={overrides.input23}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pUd6C
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ee1Fy
                                )}
                              >
                                {"City"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input24
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input24", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input24",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input24.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input24"}
                                    data-plasmic-override={overrides.input24}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__huBwd
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jjhO
                                )}
                              >
                                {"State"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input25
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input25", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input25",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input25.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input25"}
                                    data-plasmic-override={overrides.input25}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xIs6A
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5T2Fc
                                )}
                              >
                                {"Zip Code"}
                              </div>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input26
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input26", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input26",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input26.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input26"}
                                    data-plasmic-override={overrides.input26}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $state.select10.value != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qFjC
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__s6Wkq
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateModal2Open"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal2", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModal2Open"] != null &&
                                typeof $steps["updateModal2Open"] ===
                                  "object" &&
                                typeof $steps["updateModal2Open"].then ===
                                  "function"
                              ) {
                                $steps["updateModal2Open"] = await $steps[
                                  "updateModal2Open"
                                ];
                              }

                              $steps["useIntegration"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "94DwF4GLwVL8D9jt9sN8Dy",
                                        opId: "28629973-9ef4-4cc4-b59b-45f969a88769",
                                        userArgs: {
                                          body: [
                                            $queries.hlContacts.data.response.contacts.find(
                                              entry =>
                                                entry.id ==
                                                $state.select10.value
                                            ).id,
                                            $state.input14.value,
                                            $state.input15.value,
                                            $state.input17.value,
                                            $state.input16.value,
                                            $state.input23.value,
                                            $state.input24.value,
                                            $state.input25.value,
                                            $state.input26.value,
                                            $queries.getEntity.data[0]
                                              .AgencyLocationId
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "5a127a41-be43-4c59-9a62-af4b62f253ac"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["useIntegration"] != null &&
                                typeof $steps["useIntegration"] === "object" &&
                                typeof $steps["useIntegration"].then ===
                                  "function"
                              ) {
                                $steps["useIntegration"] = await $steps[
                                  "useIntegration"
                                ];
                              }

                              $steps["updateSelect10Value"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["select10", "value"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelect10Value"] != null &&
                                typeof $steps["updateSelect10Value"] ===
                                  "object" &&
                                typeof $steps["updateSelect10Value"].then ===
                                  "function"
                              ) {
                                $steps["updateSelect10Value"] = await $steps[
                                  "updateSelect10Value"
                                ];
                              }

                              $steps["updateInputValue"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["input", "value"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateInputValue"] != null &&
                                typeof $steps["updateInputValue"] ===
                                  "object" &&
                                typeof $steps["updateInputValue"].then ===
                                  "function"
                              ) {
                                $steps["updateInputValue"] = await $steps[
                                  "updateInputValue"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dcv7J
                              )}
                            >
                              {"Add Client"}
                            </div>
                          </AntdButton>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zO2Ar
                            )}
                          >
                            {"This will also create a dashboard."}
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </AntdModal>
                  {(() => {
                    const child$Props = {
                      canSelectRows: "single",
                      className: classNames("__wab_instance", sty.table),
                      data: (() => {
                        try {
                          return $queries.getPartners;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          { key: "id", fieldId: "id", isHidden: null },
                          {
                            key: "contactId",
                            fieldId: "contactId",
                            isHidden: null
                          },
                          { title: null, expr: null, disableSorting: null },
                          {
                            key: "firstName",
                            fieldId: "firstName",
                            isHidden: null
                          },
                          {
                            key: "lastName",
                            fieldId: "lastName",
                            isHidden: null
                          },
                          {
                            key: "phone",
                            fieldId: "phone",
                            disableSorting: null,
                            title: null
                          },
                          {
                            key: "entityId",
                            fieldId: "entityId",
                            isHidden: null
                          },
                          {
                            key: "created_at",
                            fieldId: "created_at",
                            isHidden: null
                          },
                          {
                            key: "email",
                            fieldId: "email",
                            disableSorting: null,
                            title: null
                          },
                          {
                            key: "isActive",
                            fieldId: "isActive",
                            isHidden: null
                          },
                          {
                            key: "AgencyLocationId",
                            fieldId: "AgencyLocationId",
                            isHidden: null
                          },
                          { title: null, expr: null, disableSorting: null }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["isHidden"] = true;
                        __composite["2"]["title"] = "Name";
                        __composite["2"]["expr"] = (
                          currentItem,
                          currentValue
                        ) => {
                          return (
                            currentItem.firstName + " " + currentItem.lastName
                          );
                        };
                        __composite["2"]["disableSorting"] = true;
                        __composite["3"]["isHidden"] = true;
                        __composite["4"]["isHidden"] = true;
                        __composite["5"]["disableSorting"] = true;
                        __composite["5"]["title"] = "Phone";
                        __composite["6"]["isHidden"] = true;
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["disableSorting"] = true;
                        __composite["8"]["title"] = "Email";
                        __composite["9"]["isHidden"] = true;
                        __composite["10"]["isHidden"] = true;
                        __composite["11"]["title"] = "Properties";
                        __composite["11"]["expr"] = (
                          currentItem,
                          currentValue
                        ) => {
                          return $queries.getProperties.data.filter(
                            entry => entry.clientId == currentItem.id
                          ).length;
                        };
                        __composite["11"]["disableSorting"] = true;
                        return __composite;
                      })(),

                      hideColumnPicker: true,
                      hideExports: true,
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pagination: (() => {
                        try {
                          return $queries.getPartners.data.length > 15;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      rowKey: "id",
                      scopeClassName: sty["table__instance"],
                      selectedRowKey: generateStateValueProp($state, [
                        "table",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: generateStateValueProp($state, [
                        "table",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdModal
                    data-plasmic-name={"modalEditPartner"}
                    data-plasmic-override={overrides.modalEditPartner}
                    className={classNames(
                      "__wab_instance",
                      sty.modalEditPartner
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["modalEditPartner__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modalEditPartner",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "modalEditPartner",
                      "open"
                    ])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sd0II
                        )}
                      >
                        {"Edit Partner"}
                      </div>
                    }
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__nXMfl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rygX9
                          )}
                        >
                          {"Show modal"}
                        </div>
                      </AntdButton>
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h9IAa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ow3B2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kCtbv
                          )}
                        >
                          {"Active"}
                        </div>
                        <AntdSwitch
                          data-plasmic-name={"_switch"}
                          data-plasmic-override={overrides._switch}
                          checked={generateStateValueProp($state, [
                            "_switch",
                            "checked"
                          ])}
                          className={classNames("__wab_instance", sty._switch)}
                          onChange={generateStateOnChangeProp($state, [
                            "_switch",
                            "checked"
                          ])}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wzdIr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vdu4S
                          )}
                        >
                          {"Partner"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input12
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input12", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input12",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input12.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input12"}
                              data-plasmic-override={overrides.input12}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m0Bz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eytOp
                          )}
                        >
                          {"Email"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input2),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input2", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input2.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e28ET
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qw9H
                          )}
                        >
                          {"Phone"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input3),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input3", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input3",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input3.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input3"}
                              data-plasmic-override={overrides.input3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rQRv2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l4Pol
                          )}
                        >
                          {"Webhook"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input13
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input13", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input13",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input13.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input13"}
                              data-plasmic-override={overrides.input13}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gMt2I
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__iZ0GZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o95Xv
                            )}
                          >
                            {"Delete"}
                          </div>
                        </AntdButton>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__hQz3I
                          )}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fKoeZ
                            )}
                          >
                            {"Save"}
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </AntdModal>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__b7Sl3)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g9P5N)}
                  >
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <AntdSelect
                        data-plasmic-name={"select8"}
                        data-plasmic-override={overrides.select8}
                        className={classNames("__wab_instance", sty.select8)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        defaultValue={(() => {
                          try {
                            return (() => {
                              const result = $queries.getProperties.data
                                .filter(
                                  entry =>
                                    entry.clientId ===
                                    $state.table.selectedRowKey
                                )
                                .map(entry => ({
                                  key: entry.address1,
                                  value: entry.address1
                                }))[0];
                              return result.key;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        onChange={generateStateOnChangeProp($state, [
                          "select8",
                          "value"
                        ])}
                        options={(() => {
                          try {
                            return $queries.getProperties.data
                              .filter(
                                entry =>
                                  entry.clientId === $state.table.selectedRowKey
                              )
                              .map(entry => ({
                                key: entry.address1,
                                value: entry.address1
                              }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m63Sy
                            )}
                          >
                            {"Select..."}
                          </div>
                        }
                        popupScopeClassName={sty["select8__popup"]}
                        value={generateStateValueProp($state, [
                          "select8",
                          "value"
                        ])}
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q7Mkt)}
                  >
                    <AntdRadioGroup
                      data-plasmic-name={"radioGroup"}
                      data-plasmic-override={overrides.radioGroup}
                      className={classNames("__wab_instance", sty.radioGroup)}
                      defaultValue={"1"}
                      onChange={generateStateOnChangeProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                      optionType={"button"}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null },
                          { label: null, value: null }
                        ];
                        __composite["0"]["value"] = "1";
                        __composite["0"]["label"] = "Home";
                        __composite["1"]["value"] = "2";
                        __composite["1"]["label"] = "Activity";
                        __composite["2"]["label"] = "Notifications";
                        __composite["2"]["value"] = "3";
                        return __composite;
                      })()}
                      value={generateStateValueProp($state, [
                        "radioGroup",
                        "value"
                      ])}
                    >
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__wZhAf
                        )}
                        value={"op1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Aot2
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </AntdRadio>
                      <AntdRadio
                        className={classNames(
                          "__wab_instance",
                          sty.radio__rLgk
                        )}
                        value={"op2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rrrLi
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </AntdRadio>
                    </AntdRadioGroup>
                  </div>
                  {(() => {
                    try {
                      return $state.radioGroup.value == "1";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__v6ZCw)}
                    >
                      <AntdModal
                        data-plasmic-name={"modal"}
                        data-plasmic-override={overrides.modal}
                        className={classNames("__wab_instance", sty.modal)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        hideFooter={true}
                        modalScopeClassName={sty["modal__modal"]}
                        onOpenChange={generateStateOnChangeProp($state, [
                          "modal",
                          "open"
                        ])}
                        open={generateStateValueProp($state, ["modal", "open"])}
                        title={"Edit Home Info"}
                        trigger={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5ZKw3
                            )}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__bG7Bh
                              )}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ek1Cm
                                )}
                              >
                                {"Edit Property Info"}
                              </div>
                            </AntdButton>
                          </div>
                        }
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.form4),
                            data: {
                              sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
                              opId: "186a6867-5ac4-453b-98fd-15ba95372a28",
                              userArgs: {
                                filters: [
                                  $queries.getProperties.data.find(
                                    entry =>
                                      entry.address1 === $state.select8.value
                                  ).id
                                ]
                              },
                              cacheKey: `plasmic.$.${(() => {
                                try {
                                  return "getOne";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}.$.186a6867-5ac4-453b-98fd-15ba95372a28.$.`,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            dataFormItems: (() => {
                              const __composite = [
                                {
                                  key: "address1",
                                  inputType: "Text",
                                  fieldId: "address1",
                                  label: null,
                                  name: "address1",
                                  initialValue: "123 W Main ST"
                                },
                                {
                                  key: "state",
                                  inputType: "Text",
                                  fieldId: "state",
                                  label: null,
                                  name: "state",
                                  initialValue: "UT"
                                },
                                {
                                  key: "city",
                                  inputType: "Text",
                                  fieldId: "city",
                                  label: null,
                                  name: "city",
                                  initialValue: "West Jordan"
                                },
                                {
                                  key: "zipCode",
                                  inputType: "Text",
                                  fieldId: "zipCode",
                                  label: null,
                                  name: "zipCode",
                                  initialValue: "84081"
                                },
                                {
                                  key: "county",
                                  inputType: null,
                                  fieldId: "county",
                                  label: null,
                                  name: "county",
                                  initialValue: "Salt Lake"
                                },
                                {
                                  key: "id",
                                  inputType: "Number",
                                  fieldId: "id",
                                  label: "id",
                                  name: "id",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "BedroomsTotal",
                                  inputType: "Number",
                                  fieldId: "BedroomsTotal",
                                  label: "BedroomsTotal",
                                  name: "BedroomsTotal",
                                  initialValue: "3"
                                },
                                {
                                  key: "BathroomsTotal",
                                  inputType: "Number",
                                  fieldId: "BathroomsTotal",
                                  label: "BathroomsTotal",
                                  name: "BathroomsTotal",
                                  initialValue: "2"
                                },
                                {
                                  key: "RoomsTotal",
                                  inputType: "Number",
                                  fieldId: "RoomsTotal",
                                  label: "RoomsTotal",
                                  name: "RoomsTotal",
                                  initialValue: "9"
                                },
                                {
                                  key: "lotSize",
                                  inputType: "Number",
                                  fieldId: "lotSize",
                                  label: null,
                                  name: "lotSize",
                                  initialValue: null
                                },
                                {
                                  key: "clientId",
                                  inputType: "Number",
                                  fieldId: "clientId",
                                  label: "clientId",
                                  name: "clientId",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "pricePerSqFoot",
                                  inputType: "Number",
                                  fieldId: "pricePerSqFoot",
                                  label: "pricePerSqFoot",
                                  name: "pricePerSqFoot",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "addressFull",
                                  inputType: "Text",
                                  fieldId: "addressFull",
                                  label: "addressFull",
                                  name: "addressFull",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "stories",
                                  inputType: "Number",
                                  fieldId: "stories",
                                  label: null,
                                  name: "stories",
                                  initialValue: null
                                },
                                {
                                  key: "year_built",
                                  inputType: "Number",
                                  fieldId: "year_built",
                                  label: null,
                                  name: "year_built",
                                  initialValue: null
                                },
                                {
                                  key: "created_at",
                                  inputType: "Text",
                                  fieldId: "created_at",
                                  label: "created_at",
                                  name: "created_at",
                                  initialValue: "2024-07-15T15:12:05.070Z",
                                  hidden: null
                                },
                                {
                                  key: "neighborhood_code",
                                  inputType: "Text",
                                  fieldId: "neighborhood_code",
                                  label: "neighborhood_code",
                                  name: "neighborhood_code",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "ListingKeyNumeric",
                                  inputType: "Number",
                                  fieldId: "ListingKeyNumeric",
                                  label: "ListingKeyNumeric",
                                  name: "ListingKeyNumeric",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "latitude",
                                  inputType: "Number",
                                  fieldId: "latitude",
                                  label: "latitude",
                                  name: "latitude",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "atommId",
                                  inputType: "Number",
                                  fieldId: "atommId",
                                  label: "atommId",
                                  name: "atommId",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "property_type",
                                  inputType: "Text",
                                  fieldId: "property_type",
                                  label: "property_type",
                                  name: "property_type",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "client_email",
                                  inputType: "Text",
                                  fieldId: "client_email",
                                  label: "client_email",
                                  name: "client_email",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "parcel_number",
                                  inputType: "Text",
                                  fieldId: "parcel_number",
                                  label: "parcel_number",
                                  name: "parcel_number",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "StreetType",
                                  inputType: "Text",
                                  fieldId: "StreetType",
                                  label: "StreetType",
                                  name: "StreetType",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "PreDir",
                                  inputType: "Text",
                                  fieldId: "PreDir",
                                  label: "PreDir",
                                  name: "PreDir",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "StreetName",
                                  inputType: "Text",
                                  fieldId: "StreetName",
                                  label: "StreetName",
                                  name: "StreetName",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "address2",
                                  inputType: "Text",
                                  fieldId: "address2",
                                  label: "address2",
                                  name: "address2",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "entityId",
                                  inputType: "Number",
                                  fieldId: "entityId",
                                  label: "entityId",
                                  name: "entityId",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "HouseNum",
                                  inputType: "Number",
                                  fieldId: "HouseNum",
                                  label: "HouseNum",
                                  name: "HouseNum",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "homeEstimate",
                                  inputType: "Number",
                                  fieldId: "homeEstimate",
                                  label: "homeEstimate",
                                  name: "homeEstimate",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "StreetDir",
                                  inputType: "Text",
                                  fieldId: "StreetDir",
                                  label: "StreetDir",
                                  name: "StreetDir",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "longitude",
                                  inputType: "Number",
                                  fieldId: "longitude",
                                  label: "longitude",
                                  name: "longitude",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "parcel_acres",
                                  inputType: "Number",
                                  fieldId: "parcel_acres",
                                  label: "parcel_acres",
                                  name: "parcel_acres",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "streetPhoto",
                                  inputType: "Text",
                                  fieldId: "streetPhoto",
                                  label: "streetPhoto",
                                  name: "streetPhoto",
                                  initialValue:
                                    "https://assets.utahrealestate.com/photos/640x480/901698.jpg",
                                  hidden: null
                                },
                                {
                                  key: "taxable_value",
                                  inputType: "Number",
                                  fieldId: "taxable_value",
                                  label: "taxable_value",
                                  name: "taxable_value",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "total_assessed",
                                  inputType: "Number",
                                  fieldId: "total_assessed",
                                  label: null,
                                  name: "total_assessed",
                                  initialValue: null
                                },
                                {
                                  key: "total_sq_ft",
                                  inputType: "Number",
                                  fieldId: "total_sq_ft",
                                  label: "total_sq_ft",
                                  name: "total_sq_ft",
                                  initialValue: {},
                                  hidden: null
                                },
                                {
                                  key: "pageViews",
                                  inputType: "Number",
                                  fieldId: "pageViews",
                                  label: "pageViews",
                                  name: "pageViews",
                                  initialValue: null,
                                  hidden: null
                                }
                              ];
                              __composite["0"]["label"] = "Address";
                              __composite["1"]["label"] = "State";
                              __composite["2"]["label"] = "City";
                              __composite["3"]["label"] = "Zip Code";
                              __composite["4"]["inputType"] = "Select";
                              __composite["4"]["label"] = "County";
                              __composite["5"]["initialValue"] = 2;
                              __composite["5"]["hidden"] = true;
                              __composite["9"]["label"] = "Lot Size";
                              __composite["9"]["initialValue"] = 0.1899908;
                              __composite["10"]["initialValue"] = 1;
                              __composite["10"]["hidden"] = true;
                              __composite["11"]["hidden"] = true;
                              __composite["12"]["hidden"] = true;
                              __composite["13"]["label"] = "Stories";
                              __composite["13"]["initialValue"] = 2;
                              __composite["14"]["label"] = "Year Built";
                              __composite["14"]["initialValue"] = 2004;
                              __composite["15"]["hidden"] = true;
                              __composite["16"]["hidden"] = true;
                              __composite["17"]["hidden"] = true;
                              __composite["18"]["initialValue"] = 40.588203;
                              __composite["18"]["hidden"] = true;
                              __composite["19"]["initialValue"] = 35868754;
                              __composite["19"]["hidden"] = true;
                              __composite["20"]["hidden"] = true;
                              __composite["21"]["hidden"] = true;
                              __composite["22"]["hidden"] = true;
                              __composite["23"]["hidden"] = true;
                              __composite["24"]["hidden"] = true;
                              __composite["25"]["hidden"] = true;
                              __composite["26"]["hidden"] = true;
                              __composite["27"]["initialValue"] = 1;
                              __composite["27"]["hidden"] = true;
                              __composite["28"]["hidden"] = true;
                              __composite["29"]["hidden"] = true;
                              __composite["30"]["hidden"] = true;
                              __composite["31"]["initialValue"] = -112.019619;
                              __composite["31"]["hidden"] = true;
                              __composite["32"]["hidden"] = true;
                              __composite["33"]["hidden"] = true;
                              __composite["34"]["hidden"] = true;
                              __composite["35"]["label"] = "Home Estimate";
                              __composite["35"]["initialValue"] = 552000;
                              __composite["36"]["hidden"] = true;
                              __composite["37"]["initialValue"] = 3;
                              __composite["37"]["hidden"] = true;
                              return __composite;
                            })(),

                            extendedOnValuesChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form4", "value"],
                                FormWrapper_Helpers
                              ),
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "inline",
                            mode: "simplified",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["defaultSubmit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "33LCJKUUYeeeZEYXFqVtgQ",
                                        opId: "a058aa78-6196-4994-b25e-a5a31e92b822",
                                        userArgs: {
                                          conditions: [
                                            $queries.getProperties.data.find(
                                              entry =>
                                                entry.address1 ===
                                                $state.select8.value
                                            ).id
                                          ],
                                          variables: [$state.form4.value]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["defaultSubmit"] != null &&
                                typeof $steps["defaultSubmit"] === "object" &&
                                typeof $steps["defaultSubmit"].then ===
                                  "function"
                              ) {
                                $steps["defaultSubmit"] = await $steps[
                                  "defaultSubmit"
                                ];
                              }
                            },
                            onIsSubmittingChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form4", "isSubmitting"],
                                FormWrapper_Helpers
                              ),
                            ref: ref => {
                              $refs["form4"] = ref;
                            },
                            submitSlot: (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__yFjxc
                                )}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zNouY
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </AntdButton>
                            ),
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form4.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form4.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form4"}
                              data-plasmic-override={overrides.form4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </AntdModal>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b0I0A
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__roCej
                          )}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"123px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"163px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).streetPhoto;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yPvpI
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__hJzno
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__zutCg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__hRg64
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__ovcoO
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fhaO8
                                    )}
                                  >
                                    {"Address:"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bqlk0
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tdnsJ
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.getProperties.data.find(
                                              entry =>
                                                entry.address1 ===
                                                $state.select8.value
                                            ).address1;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__y2GoM
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rEKC
                                    )}
                                  >
                                    {"Valuation:"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__k5R2
                                    )}
                                  >
                                    {""}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nyCk
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            function getHighestYearFormatted(
                                              data
                                            ) {
                                              data.sort(
                                                (a, b) => b.year - a.year
                                              );
                                              const highestYearValue =
                                                data[0]?.mktTtlValue;
                                              return highestYearValue
                                                ? "$" +
                                                    Number(
                                                      highestYearValue
                                                    ).toLocaleString()
                                                : undefined;
                                            }
                                            const result =
                                              getHighestYearFormatted(
                                                $queries.getValuation.data
                                              );
                                            return result;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__wg822
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cet6K
                                    )}
                                  >
                                    {"Page Views:"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__x5JwB
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $queries.getProperties.data.find(
                                            entry =>
                                              entry.address1 ===
                                              $state.select8.value
                                          ).pageViews;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.table3
                              ),
                              data: (() => {
                                try {
                                  return $queries.getProperties.data.find(
                                    entry =>
                                      entry.address1 === $state.select8.value
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id", isHidden: null },
                                  {
                                    key: "city",
                                    fieldId: "city",
                                    disableSorting: null,
                                    title: null
                                  },
                                  {
                                    key: "BedroomsTotal",
                                    fieldId: "BedroomsTotal",
                                    disableSorting: null,
                                    title: null
                                  },
                                  {
                                    key: "BathroomsTotal",
                                    fieldId: "BathroomsTotal",
                                    disableSorting: null,
                                    title: null
                                  },
                                  {
                                    key: "stories",
                                    fieldId: "stories",
                                    disableSorting: null,
                                    title: null
                                  },
                                  {
                                    key: "RoomsTotal",
                                    fieldId: "RoomsTotal",
                                    disableSorting: null,
                                    title: null
                                  },
                                  {
                                    key: "lotSize",
                                    fieldId: "lotSize",
                                    title: null,
                                    disableSorting: null
                                  },
                                  {
                                    key: "clientId",
                                    fieldId: "clientId",
                                    isHidden: null
                                  },
                                  {
                                    key: "pricePerSqFoot",
                                    fieldId: "pricePerSqFoot",
                                    isHidden: null
                                  },
                                  {
                                    key: "addressFull",
                                    fieldId: "addressFull",
                                    isHidden: null
                                  },
                                  {
                                    key: "address1",
                                    fieldId: "address1",
                                    title: null,
                                    disableSorting: null,
                                    isHidden: null
                                  },
                                  {
                                    key: "created_at",
                                    fieldId: "created_at",
                                    isHidden: null
                                  },
                                  {
                                    key: "neighborhood_code",
                                    fieldId: "neighborhood_code",
                                    isHidden: null
                                  },
                                  {
                                    key: "ListingKeyNumeric",
                                    fieldId: "ListingKeyNumeric",
                                    isHidden: null
                                  },
                                  {
                                    key: "latitude",
                                    fieldId: "latitude",
                                    isHidden: null
                                  },
                                  {
                                    key: "atommId",
                                    fieldId: "atommId",
                                    isHidden: null
                                  },
                                  {
                                    key: "property_type",
                                    fieldId: "property_type",
                                    isHidden: null
                                  },
                                  {
                                    key: "client_email",
                                    fieldId: "client_email",
                                    isHidden: null
                                  },
                                  {
                                    key: "state",
                                    fieldId: "state",
                                    disableSorting: null,
                                    title: null,
                                    isHidden: null
                                  },
                                  {
                                    key: "parcel_number",
                                    fieldId: "parcel_number",
                                    isHidden: null
                                  },
                                  {
                                    key: "StreetType",
                                    fieldId: "StreetType",
                                    isHidden: null
                                  },
                                  {
                                    key: "PreDir",
                                    fieldId: "PreDir",
                                    isHidden: null
                                  },
                                  {
                                    key: "zipCode",
                                    fieldId: "zipCode",
                                    isHidden: null
                                  },
                                  {
                                    key: "StreetName",
                                    fieldId: "StreetName",
                                    isHidden: null
                                  },
                                  {
                                    key: "address2",
                                    fieldId: "address2",
                                    isHidden: null
                                  },
                                  {
                                    key: "entityId",
                                    fieldId: "entityId",
                                    isHidden: null
                                  },
                                  {
                                    key: "HouseNum",
                                    fieldId: "HouseNum",
                                    isHidden: null
                                  },
                                  {
                                    key: "county",
                                    fieldId: "county",
                                    isHidden: null
                                  },
                                  {
                                    key: "homeEstimate",
                                    fieldId: "homeEstimate",
                                    isHidden: null
                                  },
                                  {
                                    key: "StreetDir",
                                    fieldId: "StreetDir",
                                    isHidden: null
                                  },
                                  {
                                    key: "longitude",
                                    fieldId: "longitude",
                                    isHidden: null
                                  },
                                  {
                                    key: "parcel_acres",
                                    fieldId: "parcel_acres",
                                    isHidden: null
                                  },
                                  {
                                    key: "streetPhoto",
                                    fieldId: "streetPhoto",
                                    isHidden: null
                                  },
                                  {
                                    key: "year_built",
                                    fieldId: "year_built",
                                    disableSorting: null,
                                    dataType: null,
                                    title: null
                                  },
                                  {
                                    key: "taxable_value",
                                    fieldId: "taxable_value",
                                    isHidden: null
                                  },
                                  {
                                    key: "total_assessed",
                                    fieldId: "total_assessed",
                                    isHidden: null
                                  },
                                  {
                                    key: "total_sq_ft",
                                    fieldId: "total_sq_ft",
                                    isHidden: null
                                  },
                                  {
                                    key: "pageViews",
                                    fieldId: "pageViews",
                                    isHidden: null
                                  },
                                  {
                                    key: "notif_1",
                                    fieldId: "notif_1",
                                    isHidden: null
                                  },
                                  {
                                    key: "notif_2",
                                    fieldId: "notif_2",
                                    isHidden: null
                                  },
                                  {
                                    key: "notif_3",
                                    fieldId: "notif_3",
                                    isHidden: null
                                  }
                                ];
                                __composite["0"]["isHidden"] = true;
                                __composite["1"]["disableSorting"] = true;
                                __composite["1"]["title"] = "City";
                                __composite["2"]["disableSorting"] = true;
                                __composite["2"]["title"] = "Bed";
                                __composite["3"]["disableSorting"] = true;
                                __composite["3"]["title"] = "Bath";
                                __composite["4"]["disableSorting"] = true;
                                __composite["4"]["title"] = "Stories";
                                __composite["5"]["disableSorting"] = true;
                                __composite["5"]["title"] = "Rooms";
                                __composite["6"]["title"] = "Lot";
                                __composite["6"]["disableSorting"] = true;
                                __composite["7"]["isHidden"] = true;
                                __composite["8"]["isHidden"] = true;
                                __composite["9"]["isHidden"] = true;
                                __composite["10"]["title"] = "Address";
                                __composite["10"]["disableSorting"] = true;
                                __composite["10"]["isHidden"] = true;
                                __composite["11"]["isHidden"] = true;
                                __composite["12"]["isHidden"] = true;
                                __composite["13"]["isHidden"] = true;
                                __composite["14"]["isHidden"] = true;
                                __composite["15"]["isHidden"] = true;
                                __composite["16"]["isHidden"] = true;
                                __composite["17"]["isHidden"] = true;
                                __composite["18"]["disableSorting"] = true;
                                __composite["18"]["title"] = "State";
                                __composite["18"]["isHidden"] = true;
                                __composite["19"]["isHidden"] = true;
                                __composite["20"]["isHidden"] = true;
                                __composite["21"]["isHidden"] = true;
                                __composite["22"]["isHidden"] = true;
                                __composite["23"]["isHidden"] = true;
                                __composite["24"]["isHidden"] = true;
                                __composite["25"]["isHidden"] = true;
                                __composite["26"]["isHidden"] = true;
                                __composite["27"]["isHidden"] = true;
                                __composite["28"]["isHidden"] = true;
                                __composite["29"]["isHidden"] = true;
                                __composite["30"]["isHidden"] = true;
                                __composite["31"]["isHidden"] = true;
                                __composite["32"]["isHidden"] = true;
                                __composite["33"]["disableSorting"] = true;
                                __composite["33"]["dataType"] = "string";
                                __composite["33"]["title"] = "Year";
                                __composite["34"]["isHidden"] = true;
                                __composite["35"]["isHidden"] = true;
                                __composite["36"]["isHidden"] = true;
                                __composite["37"]["isHidden"] = true;
                                __composite["38"]["isHidden"] = true;
                                __composite["39"]["isHidden"] = true;
                                __composite["40"]["isHidden"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideExports: true,
                              hideSearch: true,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table3", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table3", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table3", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table3", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              pagination: false,
                              scopeClassName: sty["table3__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table3",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table3",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table3.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table3.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table3.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table3.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table3"}
                                data-plasmic-override={overrides.table3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cyvS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__clzgn
                          )}
                        >
                          {"Nearby Comparables"}
                        </div>
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table2),
                          data: (() => {
                            try {
                              return (() => {
                                const propid = $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id;
                                return $queries.getComps.data.filter(
                                  entry => entry.property_Id == propid
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              {
                                key: "Distance",
                                fieldId: "Distance",
                                disableSorting: null,
                                dataType: null,
                                maximumFractionDigits: null
                              },
                              {
                                key: "address1",
                                fieldId: "address1",
                                disableSorting: null,
                                title: null,
                                dataType: null
                              },
                              {
                                key: "city",
                                fieldId: "city",
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "state",
                                fieldId: "state",
                                disableSorting: null,
                                title: null,
                                isHidden: null
                              },
                              { key: "id", fieldId: "id", isHidden: null },
                              {
                                key: "created_at",
                                fieldId: "created_at",
                                isHidden: null
                              },
                              {
                                key: "BedroomsTotal",
                                fieldId: "BedroomsTotal",
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "BathroomsTotal",
                                fieldId: "BathroomsTotal",
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "stories",
                                fieldId: "stories",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "RoomsTotal",
                                fieldId: "RoomsTotal",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "lotSize",
                                fieldId: "lotSize",
                                dataType: null,
                                maximumFractionDigits: null,
                                disableSorting: null,
                                title: null
                              },
                              {
                                key: "addressFull",
                                fieldId: "addressFull",
                                isHidden: null
                              },
                              {
                                key: "pricePerSqFoot",
                                fieldId: "pricePerSqFoot",
                                isHidden: null
                              },
                              {
                                key: "clientId",
                                fieldId: "clientId",
                                isHidden: null
                              },
                              {
                                key: "parcel_number",
                                fieldId: "parcel_number",
                                isHidden: null
                              },
                              {
                                key: "property_type",
                                fieldId: "property_type",
                                isHidden: null
                              },
                              {
                                key: "property_Id",
                                fieldId: "property_Id",
                                isHidden: null
                              },
                              {
                                key: "StreetName",
                                fieldId: "StreetName",
                                isHidden: null
                              },
                              {
                                key: "zipCode",
                                fieldId: "zipCode",
                                isHidden: null
                              },
                              {
                                key: "PreDir",
                                fieldId: "PreDir",
                                isHidden: null
                              },
                              {
                                key: "StreetType",
                                fieldId: "StreetType",
                                isHidden: null
                              },
                              {
                                key: "neighborhood_code",
                                fieldId: "neighborhood_code",
                                isHidden: null
                              },
                              {
                                key: "ListingKeyNumeric",
                                fieldId: "ListingKeyNumeric",
                                isHidden: null
                              },
                              {
                                key: "latitude",
                                fieldId: "latitude",
                                isHidden: null
                              },
                              {
                                key: "atommId",
                                fieldId: "atommId",
                                isHidden: null
                              },
                              {
                                key: "streetPhoto",
                                fieldId: "streetPhoto",
                                isHidden: null
                              },
                              {
                                key: "parcel_acres",
                                fieldId: "parcel_acres",
                                isHidden: null
                              },
                              {
                                key: "address2",
                                fieldId: "address2",
                                isHidden: null
                              },
                              {
                                key: "homeEstimate",
                                fieldId: "homeEstimate",
                                disableSorting: null,
                                isHidden: null
                              },
                              {
                                key: "longitude",
                                fieldId: "longitude",
                                isHidden: null
                              },
                              {
                                key: "StreetDir",
                                fieldId: "StreetDir",
                                isHidden: null
                              },
                              {
                                key: "HouseNum",
                                fieldId: "HouseNum",
                                isHidden: null
                              },
                              {
                                key: "county",
                                fieldId: "county",
                                isHidden: null
                              },
                              {
                                key: "year_built",
                                fieldId: "year_built",
                                dataType: null,
                                disableSorting: null,
                                title: null,
                                isHidden: null
                              },
                              {
                                key: "total_sq_ft",
                                fieldId: "total_sq_ft",
                                isHidden: null
                              },
                              {
                                key: "total_assessed",
                                fieldId: "total_assessed",
                                isHidden: null,
                                disableSorting: null,
                                dataType: null,
                                maximumFractionDigits: null,
                                title: null
                              },
                              {
                                key: "taxable_value",
                                fieldId: "taxable_value",
                                isHidden: null
                              }
                            ];
                            __composite["0"]["disableSorting"] = true;
                            __composite["0"]["dataType"] = "number";
                            __composite["0"]["maximumFractionDigits"] = 2;
                            __composite["1"]["disableSorting"] = true;
                            __composite["1"]["title"] = "Address";
                            __composite["1"]["dataType"] = "string";
                            __composite["2"]["disableSorting"] = true;
                            __composite["2"]["title"] = "City";
                            __composite["3"]["disableSorting"] = true;
                            __composite["3"]["title"] = "State";
                            __composite["3"]["isHidden"] = true;
                            __composite["4"]["isHidden"] = true;
                            __composite["5"]["isHidden"] = true;
                            __composite["6"]["disableSorting"] = true;
                            __composite["6"]["title"] = "Bed";
                            __composite["7"]["disableSorting"] = true;
                            __composite["7"]["title"] = "Bath";
                            __composite["8"]["title"] = "Stories";
                            __composite["8"]["disableSorting"] = true;
                            __composite["9"]["title"] = "Rooms";
                            __composite["9"]["disableSorting"] = true;
                            __composite["10"]["dataType"] = "number";
                            __composite["10"]["maximumFractionDigits"] = 2;
                            __composite["10"]["disableSorting"] = true;
                            __composite["10"]["title"] = "Lot";
                            __composite["11"]["isHidden"] = true;
                            __composite["12"]["isHidden"] = true;
                            __composite["13"]["isHidden"] = true;
                            __composite["14"]["isHidden"] = true;
                            __composite["15"]["isHidden"] = true;
                            __composite["16"]["isHidden"] = true;
                            __composite["17"]["isHidden"] = true;
                            __composite["18"]["isHidden"] = true;
                            __composite["19"]["isHidden"] = true;
                            __composite["20"]["isHidden"] = true;
                            __composite["21"]["isHidden"] = true;
                            __composite["22"]["isHidden"] = true;
                            __composite["23"]["isHidden"] = true;
                            __composite["24"]["isHidden"] = true;
                            __composite["25"]["isHidden"] = true;
                            __composite["26"]["isHidden"] = true;
                            __composite["27"]["isHidden"] = true;
                            __composite["28"]["disableSorting"] = true;
                            __composite["28"]["isHidden"] = true;
                            __composite["29"]["isHidden"] = true;
                            __composite["30"]["isHidden"] = true;
                            __composite["31"]["isHidden"] = true;
                            __composite["32"]["isHidden"] = true;
                            __composite["33"]["dataType"] = "string";
                            __composite["33"]["disableSorting"] = true;
                            __composite["33"]["title"] = "Year";
                            __composite["33"]["isHidden"] = false;
                            __composite["34"]["isHidden"] = true;
                            __composite["35"]["isHidden"] = false;
                            __composite["35"]["disableSorting"] = true;
                            __composite["35"]["dataType"] = "currency";
                            __composite["35"]["maximumFractionDigits"] = 0;
                            __composite["35"]["title"] = "Valuation";
                            __composite["36"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table2", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table2", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table2", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table2", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pagination: false,
                          scopeClassName: sty["table2__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table2",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table2",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table2.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table2.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table2.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table2.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table2"}
                            data-plasmic-override={overrides.table2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </section>
                  ) : null}
                  {(() => {
                    try {
                      return $state.radioGroup.value == "2";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__jaKSk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kY6F
                        )}
                      >
                        <SimpleChart
                          data-plasmic-name={"chart"}
                          data-plasmic-override={overrides.chart}
                          className={classNames("__wab_instance", sty.chart)}
                          data={(() => {
                            const propid = $queries.getProperties.data.find(
                              entry => entry.address1 === $state.select8.value
                            ).id;
                            let filteredLogs = $queries.getLogs.data.filter(
                              entry =>
                                entry.propId == propid &&
                                entry.type == "page_view"
                            );
                            const selectedDays = $state.select4.value;
                            const today = new Date();
                            const pastDate = new Date(today);
                            pastDate.setDate(today.getDate() - selectedDays);
                            filteredLogs = filteredLogs.filter(
                              log => new Date(log.created_at) >= pastDate
                            );
                            const dateViewCounts = {};
                            const formatDate = dateString => {
                              const date = new Date(dateString);
                              const options = {
                                day: "2-digit",
                                month: "short"
                              };
                              return date.toLocaleDateString("en-US", options);
                            };
                            filteredLogs.forEach(log => {
                              const formattedDate = formatDate(log.created_at);
                              if (dateViewCounts[formattedDate]) {
                                dateViewCounts[formattedDate] += 1;
                              } else {
                                dateViewCounts[formattedDate] = 1;
                              }
                            });
                            let chartData = Object.keys(dateViewCounts).map(
                              date => ({
                                date: date,
                                views: dateViewCounts[date]
                              })
                            );
                            if (chartData.length === 0) {
                              for (let i = 0; i < 5; i++) {
                                const dummyDate = new Date(today);
                                dummyDate.setDate(today.getDate() - i);
                                const formattedDummyDate = formatDate(
                                  dummyDate.toISOString()
                                );
                                chartData.unshift({
                                  date: formattedDummyDate,
                                  views: 0
                                });
                              }
                            }
                            if (chartData.length < 5 && chartData.length > 0) {
                              const earliestDate = new Date(chartData[0].date);
                              for (let i = 1; chartData.length < 5; i++) {
                                const dummyDate = new Date(earliestDate);
                                dummyDate.setDate(earliestDate.getDate() - i);
                                const formattedDummyDate = formatDate(
                                  dummyDate.toISOString()
                                );
                                if (
                                  !chartData.some(
                                    item => item.date === formattedDummyDate
                                  )
                                ) {
                                  chartData.unshift({
                                    date: formattedDummyDate,
                                    views: 0
                                  });
                                }
                              }
                            }
                            chartData.sort(
                              (a, b) => new Date(a.date) - new Date(b.date)
                            );
                            return chartData;
                          })()}
                          type={"line"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kyQS
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c3Evr
                            )}
                          >
                            {"Filter"}
                          </div>
                          <AntdSelect
                            data-plasmic-name={"select4"}
                            data-plasmic-override={overrides.select4}
                            className={classNames(
                              "__wab_instance",
                              sty.select4
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            defaultValue={7}
                            onChange={generateStateOnChangeProp($state, [
                              "select4",
                              "value"
                            ])}
                            options={(() => {
                              try {
                                return [
                                  {
                                    label: "This Week",
                                    value: 7
                                  },
                                  {
                                    label: "Last 30 Days",
                                    value: 30
                                  },
                                  {
                                    label: "Last 90 Days",
                                    value: 90
                                  },
                                  {
                                    label: "Last 6 Months",
                                    value: 180
                                  },
                                  {
                                    label: "Last 12 Months",
                                    value: 365
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [
                                    {
                                      value: "option1",
                                      label: "Option 1",
                                      type: "option"
                                    },
                                    {
                                      value: "option2",
                                      label: "Option 2",
                                      type: "option"
                                    }
                                  ];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={"Select..."}
                            popupScopeClassName={sty["select4__popup"]}
                            value={generateStateValueProp($state, [
                              "select4",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table4),
                          data: (() => {
                            try {
                              return (() => {
                                const propid = $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id;
                                return $queries.getLogs.data.filter(
                                  entry => entry.propId == propid
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", isHidden: null },
                              {
                                key: "created_at",
                                fieldId: "created_at",
                                disableSorting: null,
                                title: null,
                                dataType: null
                              },
                              {
                                key: "clientId",
                                fieldId: "clientId",
                                isHidden: null
                              },
                              {
                                key: "propId",
                                fieldId: "propId",
                                isHidden: null
                              },
                              {
                                key: "type",
                                fieldId: "type",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "description",
                                fieldId: "description",
                                title: null,
                                disableSorting: null
                              }
                            ];
                            __composite["0"]["isHidden"] = true;
                            __composite["1"]["disableSorting"] = false;
                            __composite["1"]["title"] = "Date Time";
                            __composite["1"]["dataType"] = "datetime";
                            __composite["2"]["isHidden"] = true;
                            __composite["3"]["isHidden"] = true;
                            __composite["4"]["title"] = "Type";
                            __composite["4"]["disableSorting"] = true;
                            __composite["5"]["title"] = "Description";
                            __composite["5"]["disableSorting"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table4", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table4", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table4", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table4", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pagination: (() => {
                            try {
                              return (() => {
                                const propid = $queries.getProperties.data.find(
                                  entry =>
                                    entry.address1 === $state.select8.value
                                ).id;
                                return (
                                  $queries.getLogs.data.filter(
                                    entry => entry.propId == propid
                                  ).length > 10
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          scopeClassName: sty["table4__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table4",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table4",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table4.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table4.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table4.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table4.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table4"}
                            data-plasmic-override={overrides.table4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </section>
                  ) : null}
                  {(() => {
                    try {
                      return $state.radioGroup.value == "3";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__o8Bld)}
                    />
                  ) : null}
                </div>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modalReassignLead"}
              data-plasmic-override={overrides.modalReassignLead}
              className={classNames("__wab_instance", sty.modalReassignLead)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modalReassignLead__modal"]}
              okText={"S"}
              onOpenChange={generateStateOnChangeProp($state, [
                "modalReassignLead",
                "open"
              ])}
              open={generateStateValueProp($state, [
                "modalReassignLead",
                "open"
              ])}
              title={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gwPgu
                    )}
                  >
                    {"Reassign Leads"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6UCvg
                    )}
                  >
                    {"Reassign Leads"}
                  </div>
                </React.Fragment>
              }
              trigger={
                <AntdButton
                  className={classNames("__wab_instance", sty.button___8SwG)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fTRej
                    )}
                  >
                    {"Show modal"}
                  </div>
                </AntdButton>
              }
              width={"50%"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__lx3TE)}>
                <div className={classNames(projectcss.all, sty.freeBox__q4HVt)}>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__u5N2I)}
                    size={"large"}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pwdxw
                      )}
                    >
                      {"Post"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__eHb0X)}
                    size={"large"}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Jggl
                      )}
                    >
                      {"Reassign"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__q01Uo)}
                    size={"large"}
                    type={"default"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mRoa3
                      )}
                    >
                      {"Revoke"}
                    </div>
                  </AntdButton>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pm0Gz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7VsCh)}
                  >
                    <AntdSwitch
                      data-plasmic-name={"switch22"}
                      data-plasmic-override={overrides.switch22}
                      checked={generateStateValueProp($state, [
                        "switch22",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.switch22)}
                      defaultChecked={false}
                      onChange={generateStateOnChangeProp($state, [
                        "switch22",
                        "checked"
                      ])}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cWn
                      )}
                    >
                      {""}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6A7Hw)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jrj2Q
                    )}
                  >
                    {""}
                  </div>
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      allowClear={true}
                      className={classNames("__wab_instance", sty.select2)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={generateStateOnChangeProp($state, [
                        "select2",
                        "value"
                      ])}
                      options={[
                        { value: "option1", label: "Option 1", type: "option" },
                        { value: "option2", label: "Option 2", type: "option" }
                      ]}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Cg3J
                          )}
                        >
                          {"Select Partner"}
                        </div>
                      }
                      popupScopeClassName={sty["select2__popup"]}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  ) : null}
                  <AntdSelect
                    data-plasmic-name={"select3"}
                    data-plasmic-override={overrides.select3}
                    className={classNames("__wab_instance", sty.select3)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    onChange={generateStateOnChangeProp($state, [
                      "select3",
                      "value"
                    ])}
                    options={[
                      { value: "option1", label: "Option 1", type: "option" },
                      { value: "option2", label: "Option 2", type: "option" }
                    ]}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Q2E0
                        )}
                      >
                        {"Select Campaign"}
                      </div>
                    }
                    popupScopeClassName={sty["select3__popup"]}
                    value={generateStateValueProp($state, ["select3", "value"])}
                  />
                </div>
              </div>
            </AntdModal>
            <AntdModal
              data-plasmic-name={"modalAddPartner"}
              data-plasmic-override={overrides.modalAddPartner}
              className={classNames("__wab_instance", sty.modalAddPartner)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modalAddPartner__modal"]}
              okText={"Add New Partner"}
              onOpenChange={generateStateOnChangeProp($state, [
                "modalAddPartner",
                "open"
              ])}
              open={generateStateValueProp($state, ["modalAddPartner", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nfSua
                  )}
                >
                  {"Choose Partner Type"}
                </div>
              }
              trigger={
                <AntdButton
                  className={classNames("__wab_instance", sty.button___2U2Qy)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3IaGd
                    )}
                  >
                    {"Show modal"}
                  </div>
                </AntdButton>
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__qgQIk)}>
                <div className={classNames(projectcss.all, sty.freeBox__jmal)}>
                  <AntdSelect
                    data-plasmic-name={"select6"}
                    data-plasmic-override={overrides.select6}
                    allowClear={true}
                    className={classNames("__wab_instance", sty.select6)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    defaultValue={"1"}
                    onChange={generateStateOnChangeProp($state, [
                      "select6",
                      "value"
                    ])}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null, type: "option" },
                        { value: null, label: null, type: "option" },
                        { type: "option", label: null, value: null }
                      ];
                      __composite["0"]["value"] = "1";
                      __composite["0"]["label"] = "LeadConnector Subaccount";
                      __composite["1"]["value"] = "2";
                      __composite["1"]["label"] = "LeadConnector User";
                      __composite["2"]["label"] = "Custom Webhook";
                      __composite["2"]["value"] = "3";
                      return __composite;
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k0Jh
                        )}
                      >
                        {"Select..."}
                      </div>
                    }
                    popupScopeClassName={sty["select6__popup"]}
                    value={generateStateValueProp($state, ["select6", "value"])}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8M0Vq
                    )}
                  >
                    {
                      "Click Add a New SubAccount, then select the account you would like to add from the dropdown"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hEjGf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___04Lig
                    )}
                  >
                    {"Enter a POST Webhook, then send a test"}
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.inputWh),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["inputWh", "value"],
                        AntdInput_Helpers
                      ),
                      placeholder: "Enter a Webhook Here",
                      value: generateStateValueProp($state, [
                        "inputWh",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "inputWh.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"inputWh"}
                        data-plasmic-override={overrides.inputWh}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdButton
                    className={classNames("__wab_instance", sty.button___3Yw)}
                    type={"dashed"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lIllB
                      )}
                    >
                      {"Send Test Lead"}
                    </div>
                  </AntdButton>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d4Dnc
                    )}
                  >
                    {""}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pEksU)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rox4H
                      )}
                    >
                      {"Optional:"}
                    </div>
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <AntdRadioGroup
                        data-plasmic-name={"radioGroup2"}
                        data-plasmic-override={overrides.radioGroup2}
                        className={classNames(
                          "__wab_instance",
                          sty.radioGroup2
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "radioGroup2",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null }
                          ];
                          __composite["0"]["value"] = "1";
                          __composite["0"]["label"] =
                            "Different LC Agency Location";
                          __composite["1"]["value"] = "2";
                          __composite["1"]["label"] = "Different LC User";
                          return __composite;
                        })()}
                        value={generateStateValueProp($state, [
                          "radioGroup2",
                          "value"
                        ])}
                      >
                        <AntdRadio
                          className={classNames(
                            "__wab_instance",
                            sty.radio__p2LOx
                          )}
                          value={"op1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__obuFz
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </AntdRadio>
                        <AntdRadio
                          className={classNames(
                            "__wab_instance",
                            sty.radio__uMtfb
                          )}
                          value={"op2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pyoaw
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </AntdRadio>
                      </AntdRadioGroup>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mcIy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bzZxv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aURy
                        )}
                      >
                        {"Have API Key?"}
                      </div>
                      <AntdSwitch
                        data-plasmic-name={"switch5"}
                        data-plasmic-override={overrides.switch5}
                        checked={generateStateValueProp($state, [
                          "switch5",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.switch5)}
                        defaultChecked={false}
                        onChange={generateStateOnChangeProp($state, [
                          "switch5",
                          "checked"
                        ])}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c1Ty6)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input20),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input20", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Enter LeadConnector API Key",
                          value: generateStateValueProp($state, [
                            "input20",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input20.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input20"}
                            data-plasmic-override={overrides.input20}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h9JlT)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4NgC2
                      )}
                    >
                      {"Location"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nZy2Z)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWu),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWu", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "LeadConnector Location ID",
                          value: generateStateValueProp($state, [
                            "inputWu",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWu.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWu"}
                            data-plasmic-override={overrides.inputWu}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nXjd
                        )}
                      >
                        {(() => {
                          try {
                            return true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__xj8Fj
                            )}
                            type={"dashed"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jod1L
                              )}
                            >
                              {"Get Location"}
                            </div>
                          </AntdButton>
                        ) : null}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jjiVx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kjqRw
                      )}
                    >
                      {"LC User Id"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mmatk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___28Cdf
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.inputWuId
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["inputWuId", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: "LeadConnector User ID",
                            value: generateStateValueProp($state, [
                              "inputWuId",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "inputWuId.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"inputWuId"}
                              data-plasmic-override={overrides.inputWuId}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4FFqx
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__c54D
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ryMnI
                              )}
                            >
                              {"Get Users"}
                            </div>
                          </AntdButton>
                          <AntdSelect
                            data-plasmic-name={"select9"}
                            data-plasmic-override={overrides.select9}
                            className={classNames(
                              "__wab_instance",
                              sty.select9
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={generateStateOnChangeProp($state, [
                              "select9",
                              "value"
                            ])}
                            options={[
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ]}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ppAmm
                                )}
                              >
                                {"Select..."}
                              </div>
                            }
                            popupScopeClassName={sty["select9__popup"]}
                            value={generateStateValueProp($state, [
                              "select9",
                              "value"
                            ])}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___54QKw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rkNby)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__piOpr
                        )}
                      >
                        {"Company Name"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWc),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWc", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Name of Company or Client",
                          value: generateStateValueProp($state, [
                            "inputWc",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWc.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWc"}
                            data-plasmic-override={overrides.inputWc}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y7Cit)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cSmu0
                        )}
                      >
                        {"Name"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWf),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWf", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "First Name",
                          value: generateStateValueProp($state, [
                            "inputWf",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWf.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWf"}
                            data-plasmic-override={overrides.inputWf}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWl),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWl", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Last Name",
                          value: generateStateValueProp($state, [
                            "inputWl",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWl.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWl"}
                            data-plasmic-override={overrides.inputWl}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3CC1P
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9FoYq
                        )}
                      >
                        {"Phone"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWp),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWp", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Phone",
                          value: generateStateValueProp($state, [
                            "inputWp",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWp.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWp"}
                            data-plasmic-override={overrides.inputWp}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k5NIb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o3Rsi
                        )}
                      >
                        {"Email"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWe),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWe", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Name of Company or Client",
                          value: generateStateValueProp($state, [
                            "inputWe",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWe.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWe"}
                            data-plasmic-override={overrides.inputWe}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Fkrr)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oOuUv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__li1NM
                        )}
                      >
                        {"Company Name"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.inputWHnoCoamp
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWHnoCoamp", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Name of Company or Client",
                          value: generateStateValueProp($state, [
                            "inputWHnoCoamp",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWHnoCoamp.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWHnoCoamp"}
                            data-plasmic-override={overrides.inputWHnoCoamp}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zBuO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aek1
                        )}
                      >
                        {"Name"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.inputWHnoFir
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWHnoFir", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "First Name",
                          value: generateStateValueProp($state, [
                            "inputWHnoFir",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWHnoFir.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWHnoFir"}
                            data-plasmic-override={overrides.inputWHnoFir}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.inputWHnoLas
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWHnoLas", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Last Name",
                          value: generateStateValueProp($state, [
                            "inputWHnoLas",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWHnoLas.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWHnoLas"}
                            data-plasmic-override={overrides.inputWHnoLas}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fCfdL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y6VEo
                        )}
                      >
                        {"Phone"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.inputWHnoPho
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWHnoPho", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Phone",
                          value: generateStateValueProp($state, [
                            "inputWHnoPho",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWHnoPho.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWHnoPho"}
                            data-plasmic-override={overrides.inputWHnoPho}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n7W1Y)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d7Dt1
                        )}
                      >
                        {"Email"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.inputWHnoEma
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWHnoEma", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Name of Company or Client",
                          value: generateStateValueProp($state, [
                            "inputWHnoEma",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWHnoEma.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWHnoEma"}
                            data-plasmic-override={overrides.inputWHnoEma}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pzuJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xzS5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nRa0Z
                        )}
                      >
                        {"Company Name"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWUc),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWUc", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Email",
                          value: generateStateValueProp($state, [
                            "inputWUc",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWUc.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWUc"}
                            data-plasmic-override={overrides.inputWUc}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a2XIb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Qlvq
                        )}
                      >
                        {"Name"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWUf),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWUf", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "First Name",
                          value: generateStateValueProp($state, [
                            "inputWUf",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWUf.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWUf"}
                            data-plasmic-override={overrides.inputWUf}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWUl),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWUl", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Last Name",
                          value: generateStateValueProp($state, [
                            "inputWUl",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWUl.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWUl"}
                            data-plasmic-override={overrides.inputWUl}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qb4Nu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e5Zd
                        )}
                      >
                        {"Phone"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWUp),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWUp", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Phone",
                          value: generateStateValueProp($state, [
                            "inputWUp",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWUp.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWUp"}
                            data-plasmic-override={overrides.inputWUp}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wedX4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cn3Mt
                        )}
                      >
                        {"Email"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.inputWUe),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["inputWUe", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Email",
                          value: generateStateValueProp($state, [
                            "inputWUe",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "inputWUe.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"inputWUe"}
                            data-plasmic-override={overrides.inputWUe}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__p2ODl)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vmFpj
                    )}
                  >
                    {"Select User"}
                  </div>
                  <AntdSelect
                    data-plasmic-name={"select7"}
                    data-plasmic-override={overrides.select7}
                    className={classNames("__wab_instance", sty.select7)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    onChange={generateStateOnChangeProp($state, [
                      "select7",
                      "value"
                    ])}
                    options={[
                      { value: "option1", label: "Option 1", type: "option" },
                      { value: "option2", label: "Option 2", type: "option" }
                    ]}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pt3Xo
                        )}
                      >
                        {"Select..."}
                      </div>
                    }
                    popupScopeClassName={sty["select7__popup"]}
                    value={generateStateValueProp($state, ["select7", "value"])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gwzdD)}>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__cEgy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mY5Jm
                      )}
                    >
                      {"Cancel"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__iXnV)}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fuKzb
                      )}
                    >
                      {"Add New Partner"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button___6S50P)}
                    type={"primary"}
                  >
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__t51Dv
                      )}
                      component={Link}
                      href={
                        "https://marketplace.gohighlevel.com/oauth/chooselocation?response_type=code&state=add&redirect_uri=https://hook.us1.make.com/3q9xp9a1ogd5disb6oczcdraxernhes3&client_id=659449828e3c6e23aedbdf08-lqwmu5ji&scope=locations/customFields.readonly%20locations/customFields.write%20locations.readonly%20contacts.readonly%20contacts.write%20links.write%20links.readonly%20users.readonly"
                      }
                      platform={"nextjs"}
                      target={"_blank"}
                    >
                      {"Add a New SubAccount"}
                    </PlasmicLink__>
                  </AntdButton>
                </div>
              </div>
            </AntdModal>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "drawerNotifications",
    "card",
    "drawerSupport",
    "embedHtml",
    "modalCredit",
    "modalFormCreate",
    "form",
    "select",
    "numberInput",
    "checkbox11",
    "modalEditCamp",
    "modalFormEdit",
    "form2",
    "switch4",
    "input4",
    "input5",
    "input6",
    "switch2",
    "textarea2",
    "checkboxEditStates",
    "checkboxEdit1",
    "checkboxEdit2",
    "checkboxEdit3",
    "checkboxEdit4",
    "checkboxEdit5",
    "editAttribute5",
    "richTextEditor",
    "textarea3",
    "input7",
    "modalCreateCamp",
    "modalFormCreate3",
    "form3",
    "select5",
    "input8",
    "input9",
    "input10",
    "switch3",
    "textarea4",
    "checkboxCreateStates",
    "checkboxCreate1",
    "checkboxCreate2",
    "checkboxCreate3",
    "checkboxCreate4",
    "checkboxCreate5",
    "editAttribute52",
    "richTextEditor2",
    "textarea5",
    "input11",
    "modal2",
    "input",
    "select10",
    "input14",
    "input15",
    "input16",
    "input17",
    "input23",
    "input24",
    "input25",
    "input26",
    "table",
    "modalEditPartner",
    "_switch",
    "input12",
    "input2",
    "input3",
    "input13",
    "select8",
    "radioGroup",
    "modal",
    "form4",
    "img",
    "table3",
    "table2",
    "chart",
    "select4",
    "table4",
    "modalReassignLead",
    "switch22",
    "select2",
    "select3",
    "modalAddPartner",
    "select6",
    "inputWh",
    "radioGroup2",
    "switch5",
    "input20",
    "inputWu",
    "inputWuId",
    "select9",
    "inputWc",
    "inputWf",
    "inputWl",
    "inputWp",
    "inputWe",
    "inputWHnoCoamp",
    "inputWHnoFir",
    "inputWHnoLas",
    "inputWHnoPho",
    "inputWHnoEma",
    "inputWUc",
    "inputWUf",
    "inputWUl",
    "inputWUp",
    "inputWUe",
    "select7"
  ],
  h1: ["h1"],
  drawerNotifications: ["drawerNotifications", "card"],
  card: ["card"],
  drawerSupport: ["drawerSupport", "embedHtml"],
  embedHtml: ["embedHtml"],
  modalCredit: [
    "modalCredit",
    "modalFormCreate",
    "form",
    "select",
    "numberInput",
    "checkbox11"
  ],
  modalFormCreate: [
    "modalFormCreate",
    "form",
    "select",
    "numberInput",
    "checkbox11"
  ],
  form: ["form", "select", "numberInput", "checkbox11"],
  select: ["select"],
  numberInput: ["numberInput"],
  checkbox11: ["checkbox11"],
  modalEditCamp: [
    "modalEditCamp",
    "modalFormEdit",
    "form2",
    "switch4",
    "input4",
    "input5",
    "input6",
    "switch2",
    "textarea2",
    "checkboxEditStates",
    "checkboxEdit1",
    "checkboxEdit2",
    "checkboxEdit3",
    "checkboxEdit4",
    "checkboxEdit5",
    "editAttribute5",
    "richTextEditor",
    "textarea3",
    "input7"
  ],
  modalFormEdit: [
    "modalFormEdit",
    "form2",
    "switch4",
    "input4",
    "input5",
    "input6",
    "switch2",
    "textarea2",
    "checkboxEditStates",
    "checkboxEdit1",
    "checkboxEdit2",
    "checkboxEdit3",
    "checkboxEdit4",
    "checkboxEdit5",
    "editAttribute5",
    "richTextEditor",
    "textarea3",
    "input7"
  ],
  form2: [
    "form2",
    "switch4",
    "input4",
    "input5",
    "input6",
    "switch2",
    "textarea2",
    "checkboxEditStates",
    "checkboxEdit1",
    "checkboxEdit2",
    "checkboxEdit3",
    "checkboxEdit4",
    "checkboxEdit5",
    "editAttribute5",
    "richTextEditor",
    "textarea3",
    "input7"
  ],
  switch4: ["switch4"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  switch2: ["switch2"],
  textarea2: ["textarea2"],
  checkboxEditStates: ["checkboxEditStates"],
  checkboxEdit1: ["checkboxEdit1"],
  checkboxEdit2: ["checkboxEdit2"],
  checkboxEdit3: ["checkboxEdit3"],
  checkboxEdit4: ["checkboxEdit4"],
  checkboxEdit5: ["checkboxEdit5"],
  editAttribute5: ["editAttribute5"],
  richTextEditor: ["richTextEditor"],
  textarea3: ["textarea3"],
  input7: ["input7"],
  modalCreateCamp: [
    "modalCreateCamp",
    "modalFormCreate3",
    "form3",
    "select5",
    "input8",
    "input9",
    "input10",
    "switch3",
    "textarea4",
    "checkboxCreateStates",
    "checkboxCreate1",
    "checkboxCreate2",
    "checkboxCreate3",
    "checkboxCreate4",
    "checkboxCreate5",
    "editAttribute52",
    "richTextEditor2",
    "textarea5",
    "input11"
  ],
  modalFormCreate3: [
    "modalFormCreate3",
    "form3",
    "select5",
    "input8",
    "input9",
    "input10",
    "switch3",
    "textarea4",
    "checkboxCreateStates",
    "checkboxCreate1",
    "checkboxCreate2",
    "checkboxCreate3",
    "checkboxCreate4",
    "checkboxCreate5",
    "editAttribute52",
    "richTextEditor2",
    "textarea5",
    "input11"
  ],
  form3: [
    "form3",
    "select5",
    "input8",
    "input9",
    "input10",
    "switch3",
    "textarea4",
    "checkboxCreateStates",
    "checkboxCreate1",
    "checkboxCreate2",
    "checkboxCreate3",
    "checkboxCreate4",
    "checkboxCreate5",
    "editAttribute52",
    "richTextEditor2",
    "textarea5",
    "input11"
  ],
  select5: ["select5"],
  input8: ["input8"],
  input9: ["input9"],
  input10: ["input10"],
  switch3: ["switch3"],
  textarea4: ["textarea4"],
  checkboxCreateStates: ["checkboxCreateStates"],
  checkboxCreate1: ["checkboxCreate1"],
  checkboxCreate2: ["checkboxCreate2"],
  checkboxCreate3: ["checkboxCreate3"],
  checkboxCreate4: ["checkboxCreate4"],
  checkboxCreate5: ["checkboxCreate5"],
  editAttribute52: ["editAttribute52"],
  richTextEditor2: ["richTextEditor2"],
  textarea5: ["textarea5"],
  input11: ["input11"],
  modal2: [
    "modal2",
    "input",
    "select10",
    "input14",
    "input15",
    "input16",
    "input17",
    "input23",
    "input24",
    "input25",
    "input26"
  ],
  input: ["input"],
  select10: ["select10"],
  input14: ["input14"],
  input15: ["input15"],
  input16: ["input16"],
  input17: ["input17"],
  input23: ["input23"],
  input24: ["input24"],
  input25: ["input25"],
  input26: ["input26"],
  table: ["table"],
  modalEditPartner: [
    "modalEditPartner",
    "_switch",
    "input12",
    "input2",
    "input3",
    "input13"
  ],
  _switch: ["_switch"],
  input12: ["input12"],
  input2: ["input2"],
  input3: ["input3"],
  input13: ["input13"],
  select8: ["select8"],
  radioGroup: ["radioGroup"],
  modal: ["modal", "form4"],
  form4: ["form4"],
  img: ["img"],
  table3: ["table3"],
  table2: ["table2"],
  chart: ["chart"],
  select4: ["select4"],
  table4: ["table4"],
  modalReassignLead: ["modalReassignLead", "switch22", "select2", "select3"],
  switch22: ["switch22"],
  select2: ["select2"],
  select3: ["select3"],
  modalAddPartner: [
    "modalAddPartner",
    "select6",
    "inputWh",
    "radioGroup2",
    "switch5",
    "input20",
    "inputWu",
    "inputWuId",
    "select9",
    "inputWc",
    "inputWf",
    "inputWl",
    "inputWp",
    "inputWe",
    "inputWHnoCoamp",
    "inputWHnoFir",
    "inputWHnoLas",
    "inputWHnoPho",
    "inputWHnoEma",
    "inputWUc",
    "inputWUf",
    "inputWUl",
    "inputWUp",
    "inputWUe",
    "select7"
  ],
  select6: ["select6"],
  inputWh: ["inputWh"],
  radioGroup2: ["radioGroup2"],
  switch5: ["switch5"],
  input20: ["input20"],
  inputWu: ["inputWu"],
  inputWuId: ["inputWuId"],
  select9: ["select9"],
  inputWc: ["inputWc"],
  inputWf: ["inputWf"],
  inputWl: ["inputWl"],
  inputWp: ["inputWp"],
  inputWe: ["inputWe"],
  inputWHnoCoamp: ["inputWHnoCoamp"],
  inputWHnoFir: ["inputWHnoFir"],
  inputWHnoLas: ["inputWHnoLas"],
  inputWHnoPho: ["inputWHnoPho"],
  inputWHnoEma: ["inputWHnoEma"],
  inputWUc: ["inputWUc"],
  inputWUf: ["inputWUf"],
  inputWUl: ["inputWUl"],
  inputWUp: ["inputWUp"],
  inputWUe: ["inputWUe"],
  select7: ["select7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  drawerNotifications: typeof DrawerBuyLeads;
  card: typeof Card;
  drawerSupport: typeof DrawerBuyLeads;
  embedHtml: typeof Embed;
  modalCredit: typeof AntdModal;
  modalFormCreate: "section";
  form: typeof FormWrapper;
  select: typeof AntdSelect;
  numberInput: typeof AntdInputNumber;
  checkbox11: typeof AntdCheckbox;
  modalEditCamp: typeof AntdModal;
  modalFormEdit: "section";
  form2: typeof FormWrapper;
  switch4: typeof AntdSwitch;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  switch2: typeof AntdSwitch;
  textarea2: "textarea";
  checkboxEditStates: typeof AntdCheckbox;
  checkboxEdit1: typeof AntdCheckbox;
  checkboxEdit2: typeof AntdCheckbox;
  checkboxEdit3: typeof AntdCheckbox;
  checkboxEdit4: typeof AntdCheckbox;
  checkboxEdit5: typeof AntdCheckbox;
  editAttribute5: "div";
  richTextEditor: typeof Quill;
  textarea3: "textarea";
  input7: typeof AntdInput;
  modalCreateCamp: typeof AntdModal;
  modalFormCreate3: "section";
  form3: typeof FormWrapper;
  select5: typeof AntdSelect;
  input8: typeof AntdInput;
  input9: typeof AntdInput;
  input10: typeof AntdInput;
  switch3: typeof AntdSwitch;
  textarea4: "textarea";
  checkboxCreateStates: typeof AntdCheckbox;
  checkboxCreate1: typeof AntdCheckbox;
  checkboxCreate2: typeof AntdCheckbox;
  checkboxCreate3: typeof AntdCheckbox;
  checkboxCreate4: typeof AntdCheckbox;
  checkboxCreate5: typeof AntdCheckbox;
  editAttribute52: "div";
  richTextEditor2: typeof Quill;
  textarea5: "textarea";
  input11: typeof AntdInput;
  modal2: typeof AntdModal;
  input: typeof AntdInput;
  select10: typeof AntdSelect;
  input14: typeof AntdInput;
  input15: typeof AntdInput;
  input16: typeof AntdInput;
  input17: typeof AntdInput;
  input23: typeof AntdInput;
  input24: typeof AntdInput;
  input25: typeof AntdInput;
  input26: typeof AntdInput;
  table: typeof RichTable;
  modalEditPartner: typeof AntdModal;
  _switch: typeof AntdSwitch;
  input12: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input13: typeof AntdInput;
  select8: typeof AntdSelect;
  radioGroup: typeof AntdRadioGroup;
  modal: typeof AntdModal;
  form4: typeof FormWrapper;
  img: typeof PlasmicImg__;
  table3: typeof RichTable;
  table2: typeof RichTable;
  chart: typeof SimpleChart;
  select4: typeof AntdSelect;
  table4: typeof RichTable;
  modalReassignLead: typeof AntdModal;
  switch22: typeof AntdSwitch;
  select2: typeof AntdSelect;
  select3: typeof AntdSelect;
  modalAddPartner: typeof AntdModal;
  select6: typeof AntdSelect;
  inputWh: typeof AntdInput;
  radioGroup2: typeof AntdRadioGroup;
  switch5: typeof AntdSwitch;
  input20: typeof AntdInput;
  inputWu: typeof AntdInput;
  inputWuId: typeof AntdInput;
  select9: typeof AntdSelect;
  inputWc: typeof AntdInput;
  inputWf: typeof AntdInput;
  inputWl: typeof AntdInput;
  inputWp: typeof AntdInput;
  inputWe: typeof AntdInput;
  inputWHnoCoamp: typeof AntdInput;
  inputWHnoFir: typeof AntdInput;
  inputWHnoLas: typeof AntdInput;
  inputWHnoPho: typeof AntdInput;
  inputWHnoEma: typeof AntdInput;
  inputWUc: typeof AntdInput;
  inputWUf: typeof AntdInput;
  inputWUl: typeof AntdInput;
  inputWUp: typeof AntdInput;
  inputWUe: typeof AntdInput;
  select7: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminDash__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminDash__VariantsArgs;
    args?: PlasmicAdminDash__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminDash__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdminDash__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminDash__ArgProps,
          internalVariantPropNames: PlasmicAdminDash__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminDash__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminDash";
  } else {
    func.displayName = `PlasmicAdminDash.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "tkmnpDqLBPFkHbb2kiGN2p"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAdminDash = Object.assign(
  // Top-level PlasmicAdminDash renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    drawerNotifications: makeNodeComponent("drawerNotifications"),
    card: makeNodeComponent("card"),
    drawerSupport: makeNodeComponent("drawerSupport"),
    embedHtml: makeNodeComponent("embedHtml"),
    modalCredit: makeNodeComponent("modalCredit"),
    modalFormCreate: makeNodeComponent("modalFormCreate"),
    form: makeNodeComponent("form"),
    select: makeNodeComponent("select"),
    numberInput: makeNodeComponent("numberInput"),
    checkbox11: makeNodeComponent("checkbox11"),
    modalEditCamp: makeNodeComponent("modalEditCamp"),
    modalFormEdit: makeNodeComponent("modalFormEdit"),
    form2: makeNodeComponent("form2"),
    switch4: makeNodeComponent("switch4"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    switch2: makeNodeComponent("switch2"),
    textarea2: makeNodeComponent("textarea2"),
    checkboxEditStates: makeNodeComponent("checkboxEditStates"),
    checkboxEdit1: makeNodeComponent("checkboxEdit1"),
    checkboxEdit2: makeNodeComponent("checkboxEdit2"),
    checkboxEdit3: makeNodeComponent("checkboxEdit3"),
    checkboxEdit4: makeNodeComponent("checkboxEdit4"),
    checkboxEdit5: makeNodeComponent("checkboxEdit5"),
    editAttribute5: makeNodeComponent("editAttribute5"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    textarea3: makeNodeComponent("textarea3"),
    input7: makeNodeComponent("input7"),
    modalCreateCamp: makeNodeComponent("modalCreateCamp"),
    modalFormCreate3: makeNodeComponent("modalFormCreate3"),
    form3: makeNodeComponent("form3"),
    select5: makeNodeComponent("select5"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),
    switch3: makeNodeComponent("switch3"),
    textarea4: makeNodeComponent("textarea4"),
    checkboxCreateStates: makeNodeComponent("checkboxCreateStates"),
    checkboxCreate1: makeNodeComponent("checkboxCreate1"),
    checkboxCreate2: makeNodeComponent("checkboxCreate2"),
    checkboxCreate3: makeNodeComponent("checkboxCreate3"),
    checkboxCreate4: makeNodeComponent("checkboxCreate4"),
    checkboxCreate5: makeNodeComponent("checkboxCreate5"),
    editAttribute52: makeNodeComponent("editAttribute52"),
    richTextEditor2: makeNodeComponent("richTextEditor2"),
    textarea5: makeNodeComponent("textarea5"),
    input11: makeNodeComponent("input11"),
    modal2: makeNodeComponent("modal2"),
    input: makeNodeComponent("input"),
    select10: makeNodeComponent("select10"),
    input14: makeNodeComponent("input14"),
    input15: makeNodeComponent("input15"),
    input16: makeNodeComponent("input16"),
    input17: makeNodeComponent("input17"),
    input23: makeNodeComponent("input23"),
    input24: makeNodeComponent("input24"),
    input25: makeNodeComponent("input25"),
    input26: makeNodeComponent("input26"),
    table: makeNodeComponent("table"),
    modalEditPartner: makeNodeComponent("modalEditPartner"),
    _switch: makeNodeComponent("_switch"),
    input12: makeNodeComponent("input12"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input13: makeNodeComponent("input13"),
    select8: makeNodeComponent("select8"),
    radioGroup: makeNodeComponent("radioGroup"),
    modal: makeNodeComponent("modal"),
    form4: makeNodeComponent("form4"),
    img: makeNodeComponent("img"),
    table3: makeNodeComponent("table3"),
    table2: makeNodeComponent("table2"),
    chart: makeNodeComponent("chart"),
    select4: makeNodeComponent("select4"),
    table4: makeNodeComponent("table4"),
    modalReassignLead: makeNodeComponent("modalReassignLead"),
    switch22: makeNodeComponent("switch22"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),
    modalAddPartner: makeNodeComponent("modalAddPartner"),
    select6: makeNodeComponent("select6"),
    inputWh: makeNodeComponent("inputWh"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    switch5: makeNodeComponent("switch5"),
    input20: makeNodeComponent("input20"),
    inputWu: makeNodeComponent("inputWu"),
    inputWuId: makeNodeComponent("inputWuId"),
    select9: makeNodeComponent("select9"),
    inputWc: makeNodeComponent("inputWc"),
    inputWf: makeNodeComponent("inputWf"),
    inputWl: makeNodeComponent("inputWl"),
    inputWp: makeNodeComponent("inputWp"),
    inputWe: makeNodeComponent("inputWe"),
    inputWHnoCoamp: makeNodeComponent("inputWHnoCoamp"),
    inputWHnoFir: makeNodeComponent("inputWHnoFir"),
    inputWHnoLas: makeNodeComponent("inputWHnoLas"),
    inputWHnoPho: makeNodeComponent("inputWHnoPho"),
    inputWHnoEma: makeNodeComponent("inputWHnoEma"),
    inputWUc: makeNodeComponent("inputWUc"),
    inputWUf: makeNodeComponent("inputWUf"),
    inputWUl: makeNodeComponent("inputWUl"),
    inputWUp: makeNodeComponent("inputWUp"),
    inputWUe: makeNodeComponent("inputWUe"),
    select7: makeNodeComponent("select7"),

    // Metadata about props expected for PlasmicAdminDash
    internalVariantProps: PlasmicAdminDash__VariantProps,
    internalArgProps: PlasmicAdminDash__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminDash;
/* prettier-ignore-end */
