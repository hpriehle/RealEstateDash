// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tkmnpDqLBPFkHbb2kiGN2p
// Component: c79l0iO1D1hR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Card from "../../Card"; // plasmic-import: bm7RsgXbCAG4/component
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tkmnpDqLBPFkHbb2kiGN2p/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: c79l0iO1D1hR/css

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  reveal?: Flex__<typeof Reveal>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  card?: Flex__<typeof Card>;
  checkbox?: Flex__<typeof AntdCheckbox>;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "addressDone",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "address",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "addressLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "photoLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.root
            )}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__l65Zl
              )}
            >
              {"Find out the value of your home"}
            </h1>
            <div className={classNames(projectcss.all, sty.freeBox__cgiLq)}>
              <div className={classNames(projectcss.all, sty.freeBox__cf4J7)}>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ),
                    placeholder: "Your Address",
                    value: generateStateValueProp($state, ["input", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              {(() => {
                try {
                  return !$state.addressDone;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <AntdButton
                  className={classNames("__wab_instance", sty.button__xAtHm)}
                  onClick={async () => {
                    const $steps = {};

                    $steps["addressLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["addressLoading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["addressLoading"] != null &&
                      typeof $steps["addressLoading"] === "object" &&
                      typeof $steps["addressLoading"].then === "function"
                    ) {
                      $steps["addressLoading"] = await $steps["addressLoading"];
                    }

                    $steps["httpGet"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "bSrtPUv86f4jB8WoMEkcXN",
                              opId: "5b17e136-3b64-47c2-81ed-878adf138600",
                              userArgs: {
                                path: [$state.input.value]
                              },
                              cacheKey: null,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["httpGet"] != null &&
                      typeof $steps["httpGet"] === "object" &&
                      typeof $steps["httpGet"].then === "function"
                    ) {
                      $steps["httpGet"] = await $steps["httpGet"];
                    }

                    $steps["notFound"] =
                      $steps.httpGet.data.response.status != "OK"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["input", "value"]
                              },
                              operation: 0,
                              value: "Address not found. Please enter again"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["notFound"] != null &&
                      typeof $steps["notFound"] === "object" &&
                      typeof $steps["notFound"].then === "function"
                    ) {
                      $steps["notFound"] = await $steps["notFound"];
                    }

                    $steps["updateAddressDone"] =
                      $steps.httpGet.data.response.status == "OK"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["addressDone"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateAddressDone"] != null &&
                      typeof $steps["updateAddressDone"] === "object" &&
                      typeof $steps["updateAddressDone"].then === "function"
                    ) {
                      $steps["updateAddressDone"] = await $steps[
                        "updateAddressDone"
                      ];
                    }

                    $steps["addressLoad"] =
                      $steps.httpGet.data.response.status != "OK"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["addressLoading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["addressLoad"] != null &&
                      typeof $steps["addressLoad"] === "object" &&
                      typeof $steps["addressLoad"].then === "function"
                    ) {
                      $steps["addressLoad"] = await $steps["addressLoad"];
                    }

                    $steps["updateInputValue2"] =
                      $steps.httpGet.data.response.status == "OK"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["address"]
                              },
                              operation: 0,
                              value: $steps.httpGet.data.response.results[0]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateInputValue2"] != null &&
                      typeof $steps["updateInputValue2"] === "object" &&
                      typeof $steps["updateInputValue2"].then === "function"
                    ) {
                      $steps["updateInputValue2"] = await $steps[
                        "updateInputValue2"
                      ];
                    }

                    $steps["getPhoto"] =
                      $steps.httpGet.data.response.status == "OK"
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "94DwF4GLwVL8D9jt9sN8Dy",
                                opId: "8c0273d7-fc5a-4ced-8865-267a13551803",
                                userArgs: {
                                  body: [$state.address]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["getPhoto"] != null &&
                      typeof $steps["getPhoto"] === "object" &&
                      typeof $steps["getPhoto"].then === "function"
                    ) {
                      $steps["getPhoto"] = await $steps["getPhoto"];
                    }

                    $steps["updateInputValue4"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["address"]
                            },
                            operation: 0,
                            value: (() => {
                              return {
                                ...$state.address,
                                photo: $steps.getPhoto.data.response.photo
                              };
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInputValue4"] != null &&
                      typeof $steps["updateInputValue4"] === "object" &&
                      typeof $steps["updateInputValue4"].then === "function"
                    ) {
                      $steps["updateInputValue4"] = await $steps[
                        "updateInputValue4"
                      ];
                    }

                    $steps["updatePhotoLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["photoLoading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePhotoLoading"] != null &&
                      typeof $steps["updatePhotoLoading"] === "object" &&
                      typeof $steps["updatePhotoLoading"].then === "function"
                    ) {
                      $steps["updatePhotoLoading"] = await $steps[
                        "updatePhotoLoading"
                      ];
                    }
                  }}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__qzfTs
                    )}
                  >
                    {"Find out"}
                  </h1>
                </AntdButton>
              ) : null}
              {(() => {
                try {
                  return $state.addressDone;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Reveal
                  data-plasmic-name={"reveal"}
                  data-plasmic-override={overrides.reveal}
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal)}
                  direction={"down"}
                  triggerOnce={true}
                >
                  {(() => {
                    try {
                      return $state.addressDone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qkySg)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Your First Name",
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Your Last Name",
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.addressDone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__afC4O)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input5", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Your Email",
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "Your Phone",
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.addressDone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Card
                      data-plasmic-name={"card"}
                      data-plasmic-override={overrides.card}
                      className={classNames("__wab_instance", sty.card)}
                      noTitle={true}
                      title={"Card title"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f7P32
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nc2Aj
                          )}
                        >
                          {(() => {
                            try {
                              return true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__fibH)}
                              displayHeight={"125px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"177px"}
                              loading={(() => {
                                try {
                                  return $state.photoLoading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "lazy";
                                  }
                                  throw e;
                                }
                              })()}
                              src={(() => {
                                try {
                                  return $state.address.photo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dn6Fb
                          )}
                        >
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__ohBm
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.address.formatted_address;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "You won't believe what happens next.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h1>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cuRsq
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__uUxCy
                              )}
                            >
                              {"Value: $"}
                            </h1>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__c5GSl)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"167px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/real_estate_dashboard/images/amountBlurred200X50Png.png",
                                fullWidth: 200,
                                fullHeight: 50,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                        </div>
                      </div>
                    </Card>
                  ) : null}
                  {(() => {
                    try {
                      return $state.addressDone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <AntdCheckbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      checked={generateStateValueProp($state, [
                        "checkbox",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.checkbox)}
                      onChange={generateStateOnChangeProp($state, [
                        "checkbox",
                        "checked"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xhSme
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {"By Proceeding, you agree to our "}
                          </React.Fragment>
                          {
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__lkFgr
                              )}
                              component={Link}
                              href={
                                "https://app.gohighlevel.com/v2/preview/dStZX9nVX09j4m5eHaEO?notrack=true"
                              }
                              platform={"nextjs"}
                            >
                              {"Terms of Service"}
                            </PlasmicLink__>
                          }
                          <React.Fragment>{", and \nto our "}</React.Fragment>
                          {
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link__tkcaa
                              )}
                              component={Link}
                              href={
                                "https://app.gohighlevel.com/v2/preview/yPR0kBZmRJJsOPHqp7kvcom"
                              }
                              platform={"nextjs"}
                            >
                              {"Privacy Policy"}
                            </PlasmicLink__>
                          }
                          <React.Fragment>
                            {
                              " regarding the information relating \nto you. Msg/data rates may apply. You may opt out \nat any time."
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </AntdCheckbox>
                  ) : null}
                  {(() => {
                    try {
                      return $state.addressDone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__qXyCx
                      )}
                      disabled={(() => {
                        try {
                          return (() => {
                            const input4 = $state.input5.value;
                            const input5 = $state.input4.value;
                            const isInput4Valid =
                              input4 && input4.includes("@");
                            const isInput5Valid = input5 && input5.length >= 10;
                            return !(isInput4Valid && isInput5Valid);
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {(() => {
                        try {
                          return (() => {
                            const input4 = $state.input5.value;
                            const input5 = $state.input4.value;
                            return (
                              input4 &&
                              input4.includes("@") &&
                              input5 &&
                              input5.length >= 10
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bvx2X
                          )}
                        >
                          {"See My Home Value"}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const input4 = $state.input5.value;
                            const input5 = $state.input4.value;
                            return !(
                              input4 &&
                              input4.includes("@") &&
                              input5 &&
                              input5.length >= 10
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wEcuZ
                          )}
                        >
                          {"See My Home Value"}
                        </div>
                      ) : null}
                    </AntdButton>
                  ) : null}
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nZlnH
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAddressDone"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["addressDone"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAddressDone"] != null &&
                          typeof $steps["updateAddressDone"] === "object" &&
                          typeof $steps["updateAddressDone"].then === "function"
                        ) {
                          $steps["updateAddressDone"] = await $steps[
                            "updateAddressDone"
                          ];
                        }
                      }}
                    >
                      {"Restart"}
                    </div>
                  ) : null}
                </Reveal>
              ) : null}
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "input",
    "reveal",
    "input2",
    "input3",
    "input5",
    "input4",
    "card",
    "checkbox"
  ],
  input: ["input"],
  reveal: [
    "reveal",
    "input2",
    "input3",
    "input5",
    "input4",
    "card",
    "checkbox"
  ],
  input2: ["input2"],
  input3: ["input3"],
  input5: ["input5"],
  input4: ["input4"],
  card: ["card"],
  checkbox: ["checkbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  input: typeof AntdInput;
  reveal: typeof Reveal;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input5: typeof AntdInput;
  input4: typeof AntdInput;
  card: typeof Card;
  checkbox: typeof AntdCheckbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "tkmnpDqLBPFkHbb2kiGN2p"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    reveal: makeNodeComponent("reveal"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input5: makeNodeComponent("input5"),
    input4: makeNodeComponent("input4"),
    card: makeNodeComponent("card"),
    checkbox: makeNodeComponent("checkbox"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
